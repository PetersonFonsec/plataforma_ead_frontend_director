{
    "pipes": [],
    "interfaces": [
        {
            "name": "ErrorDefault",
            "id": "interface-ErrorDefault-5bd6d16954c6fe886dc44becf37e466393528f1c07a9ba85b2a8e270d4b81de8ffc037b222126880e09c03c1f26b6b1c984c7c95b645df8fbad45d9015b2a38c",
            "file": "src/app/shared/interfaces/error.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ErrorDefault {\r\n  message: string,\r\n  error: string,\r\n  statusCode: number\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputPhotoValue",
            "id": "interface-InputPhotoValue-da6c232f3cd8e250dd8b5ad5b9eb0c81353edc6f46903447ed9bf277b2ff2a6649a961529208ef7e1b5c66b8a47bbdba37efedd8937e2ea69c805d668f8b26c7",
            "file": "src/app/shared/components/input-upload/input-upload.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgIf } from '@angular/common';\nimport { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface InputPhotoValue {\n  b64: string;\n  file: any;\n}\n\n@Component({\n  selector: 'input-upload',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './input-upload.component.html',\n  styleUrl: './input-upload.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputUploadComponent),\n    },\n  ],\n})\nexport class InputUploadComponent implements OnInit, ControlValueAccessor {\n  @Input() id = '';\n  @Input() initialImage?: string = '';\n\n  val: InputPhotoValue = {\n    b64: '',\n    file: '',\n  };\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  showImage(event: any): void {\n    const files: FileList = event.target.files;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.value = {\n        b64: reader.result as string,\n        file: files[0],\n      };\n    };\n\n    reader.readAsDataURL(files[0]);\n  }\n}\n",
            "properties": [
                {
                    "name": "b64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectOptions",
            "id": "interface-ISelectOptions-bf2c35a6d0cf00ff6439c455614fd97463e55f1817ec0c58dc8cb8b2959068522f975c14d29c62f1bdbbfb3a44d66dff7f7c93fb6f91e0688d4fd755e09815e9",
            "file": "src/app/shared/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputTextComponent } from '../input-text/input-text.component';\n\nexport interface ISelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [CommonModule, FormsModule, InputTextComponent],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n    },\n  ],\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  @Input() options: ISelectOptions[] | null = [];\n  _options: ISelectOptions[] | null = [];\n  inputValue = '';\n  showOptions = false;\n  val = '';\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this._options = this.options;\n  }\n\n  setValue(product: any) {\n    this.showOptions = false;\n\n    this.inputValue = product.label;\n    this.value = product.value;\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  filterOptions(): ISelectOptions[] {\n    if (!this.options) return [];\n    this._options = this.options.filter(({ label }) => label.includes(this.inputValue));\n    return this._options;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-c7c141738b8b33accd92cfb471d5795e5e45ca9aab305b3c179045f98fdb5f42f8f4b6f46c13c0afcb0c0ac29ac586ac9664908264acdbbdbcc130fbe693ea44",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"../../../../shared/enums/roles.enum\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  email: string,\r\n  name: string,\r\n  id: number\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginResponse",
            "id": "interface-LoginResponse-c7c141738b8b33accd92cfb471d5795e5e45ca9aab305b3c179045f98fdb5f42f8f4b6f46c13c0afcb0c0ac29ac586ac9664908264acdbbdbcc130fbe693ea44",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"../../../../shared/enums/roles.enum\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  email: string,\r\n  name: string,\r\n  id: number\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterRequest",
            "id": "interface-RegisterRequest-c7c141738b8b33accd92cfb471d5795e5e45ca9aab305b3c179045f98fdb5f42f8f4b6f46c13c0afcb0c0ac29ac586ac9664908264acdbbdbcc130fbe693ea44",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"../../../../shared/enums/roles.enum\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  email: string,\r\n  name: string,\r\n  id: number\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [
                {
                    "name": "confirm_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "documentNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roles",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterResponse",
            "id": "interface-RegisterResponse-c7c141738b8b33accd92cfb471d5795e5e45ca9aab305b3c179045f98fdb5f42f8f4b6f46c13c0afcb0c0ac29ac586ac9664908264acdbbdbcc130fbe693ea44",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"../../../../shared/enums/roles.enum\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  email: string,\r\n  name: string,\r\n  id: number\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "LoginResponse"
            ]
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-384061834f7c56bfa550e40b0d15d197017c0aa011775ba046043a9959268177ab4b12fff03720e48699ee6c70a853eec37c928fb6a60729405d11a8f1a5ed42",
            "file": "src/app/pages/auth/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#tokenService",
                    "defaultValue": "inject(TokenService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "payload",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RegisterResponse>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, signal } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\n\nimport { LoginRequest, LoginResponse, RegisterRequest, RegisterResponse } from './auth.model';\nimport { TokenService } from '../../../../shared/services/token/token.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  #tokenService = inject(TokenService);\n  #http = inject(HttpClient);\n\n  login({ email, password }: LoginRequest): Observable<LoginResponse> {\n    return this.#http.post<LoginResponse>(\"http://localhost:3000/auth/login\", { email, password })\n      .pipe(tap(({ access_token }) => this.#tokenService.token = access_token))\n  }\n\n  register(payload: RegisterRequest): Observable<RegisterResponse> {\n    let url = \"http://localhost:3000/auth/register/\";\n    url += payload.role.toLocaleLowerCase();\n\n    return this.#http.post<RegisterResponse>(url, payload)\n      .pipe(tap(({ access_token }) => this.#tokenService.token = access_token))\n  }\n\n  logout() {\n    this.#tokenService.clearToken();\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-9d1aa12385830f7c19d3e0ef1e20b146400ed7c7f98315edf5119bea102ef6b967423424c71fcf7408f5c1678a5d76332cbf24b8284a5770dabcbf48f639ebce",
            "file": "src/app/shared/services/token/token.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenService {\n\n  set token(token: string) {\n    localStorage.setItem(\"@ODIN/TOKEN\", token);\n  }\n\n  get token(): string {\n    return localStorage.getItem(\"@ODIN/TOKEN\") ?? '';\n  }\n\n  clearToken() {\n    localStorage.removeItem(\"@ODIN/TOKEN\")\n  }\n\n}\n",
            "accessors": {
                "token": {
                    "name": "token",
                    "setSignature": {
                        "name": "token",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "token",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 8,
                        "jsdoctags": [
                            {
                                "name": "token",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "token",
                        "type": "string",
                        "returnType": "string",
                        "line": 12
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-42bb90b94e25fa809b11e72432bd32388806d001d03704966deb7952f76c9533e35a6852de65ea1cd4c9dfee541ca187a95e3ca5d161739f8f99adcfb830e1b8",
            "file": "src/app/shared/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "AlertTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faInfoCircle, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport enum AlertTypes {\n  error = \"error\",\n  warning = \"warning\",\n  success = \"success\",\n  info = \"info\"\n}\n\n@Component({\n  selector: 'alert',\n  standalone: true,\n  imports: [FontAwesomeModule],\n  templateUrl: './alert.component.html',\n  styleUrl: './alert.component.scss'\n})\nexport class AlertComponent {\n  @Input() type: AlertTypes = AlertTypes.error\n\n  get icon() {\n    return this.type != AlertTypes.success ? faInfoCircle : faCheckCircle\n  };\n}\n",
            "styleUrl": "./alert.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "icon": {
                    "name": "icon",
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "templateData": "<div role=\"alert\" class=\"alert alert-{{ type }}\">\n  <fa-icon class=\"alert-icon\" [icon]=\"icon\"></fa-icon>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b0640d5211604e5dc08bcf7ab2efab833ed254b7ed6c8dec1195e58924071ebb9803ad1b6756b567bcf6c0f5cf04315ab83d14119d882f319e6c835f1853ff3e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'director'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "AuthComponent",
                    "type": "component"
                },
                {
                    "name": "NotFoundComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { AuthComponent } from './pages/auth/auth.component';\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\nimport { ButtonComponent } from './shared/components/button/button.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet, AuthComponent, NotFoundComponent, ButtonComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'director';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "AsideMenuComponent",
            "id": "component-AsideMenuComponent-d6ad003df9da6b16d072dc7367657266b3d2355196594f6a0baacc8bc69fec432e142d960685de5abe90b827a23425c966ee55b01d14567383438264fd388d48",
            "file": "src/app/shared/components/aside-menu/aside-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aside-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aside-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-aside-menu',\n  standalone: true,\n  imports: [],\n  templateUrl: './aside-menu.component.html',\n  styleUrl: './aside-menu.component.scss'\n})\nexport class AsideMenuComponent {\n\n}\n",
            "styleUrl": "./aside-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>aside-menu works!</p>\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-1ae2f99ab8747b5bad14703f5a121685650949ff024b2dec47ffed2f201b57c1603184feb6d961b4bc3640a44ec33e95ae5be8c63edfb1d348b60b242bec2071",
            "file": "src/app/pages/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logo",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                },
                {
                    "name": "RegisterComponent",
                    "type": "component"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NgOptimizedImage } from '@angular/common';\n\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nimport { ButtonComponent } from '../../shared/components/button/button.component';\nimport { fadeAnimation } from '../../shared/animations/fade/fade.animation';\n@Component({\n  selector: 'app-auth',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    LoginComponent,\n    RegisterComponent,\n    NgOptimizedImage,\n    ButtonComponent,\n  ],\n  templateUrl: './auth.component.html',\n  styleUrl: './auth.component.scss',\n  animations: [\n    fadeAnimation\n  ]\n})\nexport class AuthComponent {\n  logo = \"\";\n}\n",
            "styleUrl": "./auth.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main class=\"auth\">\n  @if(logo){\n  <header class=\"auth-header\">\n    <img\n      src=\"/assets/ilustrations/celular-lg.png\"\n      alt=\"ilustração de dois jovens em volta de um smartfone\"\n      priority\n      fetchpriority=\"high\"\n    />\n  </header>\n  }\n  <div class=\"auth-image\">\n    <picture>\n      <source\n        srcset=\"/assets/ilustrations/celular-sm.png\"\n        media=\"(max-width: 768px)\"\n      />\n      <img\n        src=\"/assets/ilustrations/celular-lg.png\"\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\n        priority\n        fetchpriority=\"high\"\n      />\n    </picture>\n  </div>\n  <div class=\"auth-route\">\n    <div [@fade]=\"outlet.isActivated ? outlet.activatedRoute : ''\">\n      <router-outlet #outlet=\"outlet\"></router-outlet>\n    </div>\n  </div>\n</main>\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-c1a2a07bbad6cffd9029983285045d53ff8245de32ee7280e5a7a490e3c996a81da7e93a21884f8baeb0041299bb199d6d99ee2cc833600aae54ebbb071d8f2e",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "AvatarSizeParam.small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "AvatarSizeParam",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\nexport enum AvatarSizeParam {\n  \"small\" = \"sm\",\n  \"medium\" = \"md\",\n  \"large\" = \"lg\"\n}\n@Component({\n  selector: 'app-avatar',\n  standalone: true,\n  imports: [NgClass],\n  templateUrl: './avatar.component.html',\n  styleUrl: './avatar.component.scss'\n})\nexport class AvatarComponent {\n  @Input() src = \"\";\n  @Input() alt = \"\";\n  @Input() id = \"\";\n  @Input() loading = true;\n  @Input() size: AvatarSizeParam = AvatarSizeParam.small;\n}\n",
            "styleUrl": "./avatar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"avatar {{ size }}\" [ngClass]=\"{ loading: loading }\">\n  @if(!loading) {\n  <img [id]=\"id\" [src]=\"src\" [alt]=\"alt\" />\n  } @else {\n  <div class=\"avatar-loader\"></div>\n  }\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8633d15a0db422b2f7602947890a3cb9d129cee0a86e732c71ba77e0af2764dd1648bcd41968b7c3b84964b8350fd7112615ac5ca28de038c813cf64d7dcd9eb",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "\"primary\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "id",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"medium\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"button\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport enum ButtonColors {\r\n  \"primary\" = \"primary\",\r\n  \"secundary\" = \"secundary\"\r\n}\r\nexport enum ButtonSize {\r\n  \"small\" = \"small\",\r\n  \"medium\" = \"medium\"\r\n}\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n  @Input() color = \"primary\";\r\n  @Input() size = \"medium\";\r\n  @Input({ transform: (value: string) => `${value}-button` }) id = \"\";\r\n  @Input() disabled = false;\r\n  @Input() type = \"button\";\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n  [disabled]=\"disabled\"\r\n  id=\"{{ id }}\"\r\n  class=\"button button--{{ color }} button--{{ size }}\"\r\n  [type]=\"type\"\r\n>\r\n  <ng-content></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "ButtonMenuComponent",
            "id": "component-ButtonMenuComponent-9182de7c62c5b1940cf3b804d7f4efbfdbfba67b8528d59866441888fd415bbc619b5cebb068bd8fbe900369a3d086a1ac1845024ef20921691421e0e160c540",
            "file": "src/app/shared/components/button-menu/button-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button-menu',\n  standalone: true,\n  imports: [NgClass],\n  templateUrl: './button-menu.component.html',\n  styleUrl: './button-menu.component.scss'\n})\nexport class ButtonMenuComponent {\n  @Input() isOpen = false\n}\n",
            "styleUrl": "./button-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  class=\"button-menu\"\n  (click)=\"isOpen = !isOpen\"\n  [ngClass]=\"{\n    close: !isOpen,\n    open: isOpen\n  }\"\n>\n  <span class=\"bar\"></span>\n  <span class=\"bar\"></span>\n  <span class=\"bar\"></span>\n</button>\n"
        },
        {
            "name": "InputColorComponent",
            "id": "component-InputColorComponent-69bee69ea4649745871d0206b1b34fef02b3f3002af2cfe3f974dc47dc6d71ae36552eec6d8e83c71370d09a8f989534657d467baf1e6bebbe1e744e88191790",
            "file": "src/app/shared/components/input-color/input-color.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputColorComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-color",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-color.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Component, Input, OnInit, forwardRef } from '@angular/core';\nimport { NgStyle } from '@angular/common';\n\n@Component({\n  selector: 'app-input-color',\n  standalone: true,\n  imports: [FormsModule, NgStyle],\n  templateUrl: './input-color.component.html',\n  styleUrl: './input-color.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputColorComponent),\n    },\n  ],\n})\nexport class InputColorComponent implements OnInit, ControlValueAccessor {\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  val = '';\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n}\n",
            "styleUrl": "./input-color.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "templateData": "<div (click)=\"input.click()\" class=\"input-color\">\n  <div class=\"input-color_header\">\n    <label [for]=\"id\">{{ label }}</label>\n  </div>\n\n  <div\n    class=\"input-color_square\"\n    [ngStyle]=\"{\n      backgroundColor: value\n    }\"\n  ></div>\n\n  <input #input type=\"color\" [(ngModel)]=\"value\" [id]=\"id\" [name]=\"id\" />\n</div>\n"
        },
        {
            "name": "InputTextComponent",
            "id": "component-InputTextComponent-9463dc1e32cfcb2db969ed90a49b9c0c5decc14b89fc0866916afadec2f87e8814668f1363089482c8104d37f01aa63faa80f8fa83926458ba33f15544da79a5",
            "file": "src/app/shared/components/input-text/input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputTextComponent),\n}",
                    "type": "component"
                },
                {
                    "name": "provideNgxMask()"
                }
            ],
            "selector": "app-input-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "id",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgxMaskDirective",
                    "type": "directive"
                },
                {
                    "name": "NgxMaskPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Component, Input, OnInit, forwardRef } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgxMaskDirective, NgxMaskPipe, provideNgxMask } from 'ngx-mask';\n\nexport enum InputTextTypes {\n  password = \"password\",\n  text = \"text\"\n}\n\n@Component({\n  selector: 'app-input-text',\n  standalone: true,\n  imports: [FormsModule, NgClass, NgxMaskDirective, NgxMaskPipe],\n  templateUrl: './input-text.component.html',\n  styleUrl: './input-text.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputTextComponent),\n    },\n    provideNgxMask()\n  ],\n})\nexport class InputTextComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() success = false;\n  @Input() error = false;\n  @Input() label = '';\n  @Input({ transform: (value: string) => `${value}-input` }) id = \"\";\n  @Input() type = \"text\";\n  @Input() mask = \"\";\n  val = '';\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "styleUrl": "./input-text.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<div class=\"input-text\" [ngClass]=\"{ 'has-error': error, success: success }\">\n  <div class=\"input-text_header\">\n    <label [for]=\"id\">{{ label }}</label>\n\n    <div class=\"input-text_header_right\">\n      <ng-content select=\"[right]\"></ng-content>\n    </div>\n  </div>\n\n  <input\n    [(ngModel)]=\"value\"\n    [id]=\"id\"\n    [name]=\"id\"\n    [type]=\"type\"\n    [mask]=\"mask\"\n    [placeholder]=\"placeholder\"\n  />\n</div>\n"
        },
        {
            "name": "InputUploadComponent",
            "id": "component-InputUploadComponent-da6c232f3cd8e250dd8b5ad5b9eb0c81353edc6f46903447ed9bf277b2ff2a6649a961529208ef7e1b5c66b8a47bbdba37efedd8937e2ea69c805d668f8b26c7",
            "file": "src/app/shared/components/input-upload/input-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputUploadComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "input-upload",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-upload.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initialImage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "val",
                    "defaultValue": "{\n    b64: '',\n    file: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputPhotoValue",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgIf } from '@angular/common';\nimport { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface InputPhotoValue {\n  b64: string;\n  file: any;\n}\n\n@Component({\n  selector: 'input-upload',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './input-upload.component.html',\n  styleUrl: './input-upload.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputUploadComponent),\n    },\n  ],\n})\nexport class InputUploadComponent implements OnInit, ControlValueAccessor {\n  @Input() id = '';\n  @Input() initialImage?: string = '';\n\n  val: InputPhotoValue = {\n    b64: '',\n    file: '',\n  };\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  showImage(event: any): void {\n    const files: FileList = event.target.files;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.value = {\n        b64: reader.result as string,\n        file: files[0],\n      };\n    };\n\n    reader.readAsDataURL(files[0]);\n  }\n}\n",
            "styleUrl": "./input-upload.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"input-upload\">\n  @if (value.b64) {\n  <img [src]=\"value.b64\" class=\"input-upload_preview\" />\n  }\n\n  <input\n    #inputFile\n    type=\"file\"\n    [id]=\"id\"\n    [name]=\"id\"\n    (change)=\"showImage($event)\"\n    accept=\"image/png, image/jpeg\"\n    class=\"input-upload_input\"\n  />\n\n  <button\n    [id]=\"id + '-input-upload-button'\"\n    type=\"button\"\n    (click)=\"inputFile.click()\"\n    class=\"input-upload_button\"\n  >\n    icone\n  </button>\n</div>\n\n<label [for]=\"id + '-input-upload-button'\" class=\"input-upload_text\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "JumbotronComponent",
            "id": "component-JumbotronComponent-83bb32cc3db87732389962d3069edb0c1eb5c89ac4e1d2e6d08cfb6b55d01269ca5c121d09cbf75f442e9b39f5337b171e21859a9fb81b14fb84e21aefe5d73b",
            "file": "src/app/shared/components/jumbotron/jumbotron.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jumbotron",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jumbotron.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-jumbotron',\n  standalone: true,\n  imports: [],\n  templateUrl: './jumbotron.component.html',\n  styleUrl: './jumbotron.component.scss'\n})\nexport class JumbotronComponent {\n\n}\n",
            "styleUrl": "./jumbotron.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"jumbotron\">\n  <div class=\"jumbotron-header\">\n    <ng-content select=\"[header]\"></ng-content>\n  </div>\n\n  <div class=\"jumbotron-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <footer class=\"jumbotron-footer\">\n    <ng-content select=\"[footer]\"></ng-content>\n  </footer>\n</div>\n"
        },
        {
            "name": "JumbotronWellcomeComponent",
            "id": "component-JumbotronWellcomeComponent-d5b048e81556bdd970bc5605989d0ff4bc8e2e7e70ceef00952fc66e0a3c06707970ea5994a1d1f9e7a05b989875bb69e201381f74af474fde41aeea934d7b3e",
            "file": "src/app/pages/logged-area/components/jumbotron-wellcome/jumbotron-wellcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jumbotron-wellcome",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jumbotron-wellcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "JumbotronComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { JumbotronComponent } from '../../../../shared/components/jumbotron/jumbotron.component';\nimport { ButtonComponent } from '../../../../shared/components/button/button.component';\n\n@Component({\n  selector: 'app-jumbotron-wellcome',\n  standalone: true,\n  imports: [JumbotronComponent, ButtonComponent],\n  templateUrl: './jumbotron-wellcome.component.html',\n  styleUrl: './jumbotron-wellcome.component.scss'\n})\nexport class JumbotronWellcomeComponent {\n\n}\n",
            "styleUrl": "./jumbotron-wellcome.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-jumbotron>\n  <h1 header>Seja bem vindo !!</h1>\n\n  <div>\n    <img\n      src=\"/assets/ilustrations/lecture.png\"\n      alt=\"Ilustração de uma palestra\"\n    />\n  </div>\n\n  <app-button footer> ir para as aulas </app-button>\n</app-jumbotron>\n"
        },
        {
            "name": "LoggedAreaComponent",
            "id": "component-LoggedAreaComponent-32e3d7855e99d56c79502ecdb1cdf27dd40488d141219806c93edbed26a862e55576dc88d5e869e3c84d465ccb5a8e6d89d6cdd7417904b69610f6ebf065c8bd",
            "file": "src/app/pages/logged-area/logged-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logged-area",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logged-area.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonMenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { JumbotronWellcomeComponent } from './components/jumbotron-wellcome/jumbotron-wellcome.component';\nimport { ButtonMenuComponent } from '../../shared/components/button-menu/button-menu.component';\n\n@Component({\n  selector: 'app-logged-area',\n  standalone: true,\n  imports: [ButtonMenuComponent],\n  templateUrl: './logged-area.component.html',\n  styleUrl: './logged-area.component.scss'\n})\nexport class LoggedAreaComponent { }\n",
            "styleUrl": "./logged-area.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main>\n  <app-button-menu></app-button-menu>\n</main>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-b27901b29bf5827f88c499f66d2e7b3d988b6c0cf0d5e0632a2f22b7b681e5d813736c0bf152b3eeca53d28462e420b676919e291290df6ee7a0b13049ad0b4d",
            "file": "src/app/pages/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "error",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "payload",
                    "defaultValue": "{\n    password: \"\",\n    email: \"\",\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\nimport { AlertComponent, AlertTypes } from '../../../shared/components/alert/alert.component';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { ErrorDefault } from '../../../shared/interfaces/error.model';\nimport { AuthService } from '../services/auth/auth.service';\nimport { fadeAnimation } from '../../../shared/animations/fade/fade.animation';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [ButtonComponent, InputTextComponent, RouterLink, FormsModule, AlertComponent],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [fadeAnimation]\n})\nexport class LoginComponent {\n  #authService = inject(AuthService);\n  alertType = AlertTypes.error;\n  #router = inject(Router);\n  error = \"\"\n\n  payload = {\n    password: \"\",\n    email: \"\",\n  };\n\n  submit() {\n    this.#authService.login(this.payload).subscribe({\n      next: () => {\n        this.#router.navigateByUrl(\"/home\")\n      },\n      error: (error: HttpErrorResponse) => {\n        this.error = error.error.message\n      }\n    })\n  }\n}\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"login\">\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" class=\"login-form\">\n    <app-input-text\n      [(ngModel)]=\"payload.email\"\n      id=\"email\"\n      name=\"email\"\n      [required]=\"true\"\n      label=\"Email\"\n      email\n      type=\"text\"\n      placeholder=\"Informe o seu email\"\n    ></app-input-text>\n\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      [required]=\"true\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n    ></app-input-text>\n\n    <a class=\"link\" id=\"login-forget-link\" routerLink=\"../recuperar-senha\">\n      Esqueceu a senha ? <span>Clique aqui.</span>\n    </a>\n\n    <a class=\"link\" id=\"login-register-link\" routerLink=\"../cadastrar\">\n      Ainda não tem uma conta ? <span>Cadastre-se !</span>\n    </a>\n\n    <div class=\"login-form-footer\">\n      <app-button type=\"submit\" id=\"login-submit\" [disabled]=\"!!form.invalid\">\n        Entrar\n      </app-button>\n    </div>\n  </form>\n\n  @if (error) {\n    <alert @fade [type]=\"alertType\"> {{ error }} </alert>\n  }\n</div>\n"
        },
        {
            "name": "NewPasswordComponent",
            "id": "component-NewPasswordComponent-1a597fd4fe6e50ecbcb518f992772c8208e690ddad1d5077298d3073c8b04370be6ee049f6b25e6167ec9db55c1934fc2548d86d115269cf931a1bb81bbeeff4",
            "file": "src/app/pages/auth/new-password/new-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payload",
                    "defaultValue": "{\n    password: \"\",\n    email: \"\",\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\nimport { RouterLink } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-new-password',\n  standalone: true,\n  imports: [ButtonComponent, InputTextComponent, RouterLink, FormsModule],\n  templateUrl: './new-password.component.html',\n  styleUrl: './new-password.component.scss'\n})\nexport class NewPasswordComponent {\n  payload = {\n    password: \"\",\n    email: \"\",\n  } as any;\n\n}\n",
            "styleUrl": "./new-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"register\">\n  <form #form=\"ngForm\" class=\"register-form\">\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n    ></app-input-text>\n\n    <app-input-text\n      name=\"confirm_password\"\n      [(ngModel)]=\"payload.confirm_password\"\n      id=\"confirm_password\"\n      type=\"password\"\n      label=\"Confirme sua nova Senha\"\n      placeholder=\"Confirme sua nova senha\"\n    ></app-input-text>\n  </form>\n\n  <div class=\"register-form-footer\">\n    <app-button [disabled]=\"!!form.invalid\"> Atualizar senha </app-button>\n  </div>\n</div>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-be249e0604f95154af9167def19d3979bcdd90dbded660d60052252df2531418895955b45f6703aae5dbffb4396344e6f919370ddc0c4746e4d3fa12b3d75a65",
            "file": "src/app/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgOptimizedImage } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { RouterLink, RouterOutlet } from '@angular/router';\nimport { ButtonComponent } from '../../shared/components/button/button.component';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    NgOptimizedImage,\n    ButtonComponent,\n    RouterLink\n  ],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss'\n})\nexport class NotFoundComponent {\n\n}\n",
            "styleUrl": "./not-found.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"not-found\">\n  <div class=\"not-found-image\">\n    <picture>\n      <source\n        srcset=\"/assets/ilustrations/email-sm.png\"\n        media=\"(max-width: 768px)\"\n      />\n      <img\n        src=\"/assets/ilustrations/email-lg.png\"\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\n        priority\n        fetchpriority=\"high\"\n      />\n    </picture>\n  </div>\n  <div class=\"not-found-route\">\n    <h3 class=\"not-found-description text\">\n      Em breve você recebera um email nosso com um link para cadastrar uma nova\n      senha.\n    </h3>\n    <app-button routerLink=\"/\"> Voltar para tela inicial </app-button>\n  </div>\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-1cfe6ffa0f8730cd363d199e275b946486f20235e431db950bc4ff3e16f16adab4aab794ba46f364078ccc59ca6a1973088920d648e22fe2c9d97504d37d1d4d",
            "file": "src/app/pages/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "error",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "payload",
                    "defaultValue": "{\n    role: Roles.DIRECTOR,\n    confirm_password: \"\",\n    documentNumber: \"\",\n    password: \"\",\n    email: \"\",\n    name: \"\",\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormsModule } from '@angular/forms';\nimport { Component, inject } from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';\n\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\nimport { AlertComponent, AlertTypes } from '../../../shared/components/alert/alert.component';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { AuthService } from '../services/auth/auth.service';\nimport { Roles } from '../../../shared/enums/roles.enum';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { fadeAnimation } from '../../../shared/animations/fade/fade.animation';\n\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [ButtonComponent, InputTextComponent, RouterLink, FormsModule, AlertComponent],\n  templateUrl: './register.component.html',\n  styleUrl: './register.component.scss',\n  animations: [fadeAnimation]\n})\nexport class RegisterComponent {\n  #authService = inject(AuthService);\n  alertType = AlertTypes.error;\n  #router = inject(Router);\n  error = \"\";\n\n  payload = {\n    role: Roles.DIRECTOR,\n    confirm_password: \"\",\n    documentNumber: \"\",\n    password: \"\",\n    email: \"\",\n    name: \"\",\n  };\n\n  submit() {\n    this.#authService.register(this.payload).subscribe({\n      next: () => {\n        this.#router.navigateByUrl(\"/home\")\n      },\n      error: (error: HttpErrorResponse) => {\n        console.log(error)\n        this.error = error.error.message\n      }\n    })\n  }\n}\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"register\">\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" class=\"register-form\">\n    <app-input-text\n      [(ngModel)]=\"payload.name\"\n      id=\"name\"\n      name=\"name\"\n      [required]=\"true\"\n      label=\"Nome\"\n      type=\"text\"\n      placeholder=\"Informe o seu nome\"\n    ></app-input-text>\n\n    <app-input-text\n      [(ngModel)]=\"payload.email\"\n      id=\"email\"\n      name=\"email\"\n      [required]=\"true\"\n      label=\"Email\"\n      email\n      type=\"text\"\n      placeholder=\"Informe o seu email\"\n    ></app-input-text>\n\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      [required]=\"true\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n    ></app-input-text>\n\n    <app-input-text\n      name=\"confirm_password\"\n      [(ngModel)]=\"payload.confirm_password\"\n      id=\"confirm_password\"\n      type=\"password\"\n      [required]=\"true\"\n      label=\"Confirme sua Senha\"\n      placeholder=\"Confirme sua senha\"\n    ></app-input-text>\n\n    <app-input-text\n      [(ngModel)]=\"payload.documentNumber\"\n      id=\"document_number\"\n      name=\"document_number\"\n      [required]=\"true\"\n      mask=\"000.000.000-AA\"\n      label=\"CPF\"\n      type=\"text\"\n      placeholder=\"Informe o seu email\"\n    ></app-input-text>\n\n    <a class=\"link\" id=\"register-login-link\" routerLink=\"../login\">\n      Já tem uma conta ? <span>Entre!</span>\n    </a>\n\n    <div class=\"register-form-footer\">\n      <app-button\n        id=\"register-submit\"\n        type=\"submit\"\n        [disabled]=\"\n          !!form.invalid || payload.password != payload.confirm_password\n        \"\n      >\n        Entrar\n      </app-button>\n    </div>\n  </form>\n\n  @if (error) {\n    <alert @fade [type]=\"alertType\"> {{ error }} </alert>\n  }\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-bf2c35a6d0cf00ff6439c455614fd97463e55f1817ec0c58dc8cb8b2959068522f975c14d29c62f1bdbbfb3a44d66dff7f7c93fb6f91e0688d4fd755e09815e9",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ISelectOptions[] | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISelectOptions[] | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "showOptions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "filterOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "ISelectOptions[]",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputTextComponent } from '../input-text/input-text.component';\n\nexport interface ISelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [CommonModule, FormsModule, InputTextComponent],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n    },\n  ],\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  @Input() options: ISelectOptions[] | null = [];\n  _options: ISelectOptions[] | null = [];\n  inputValue = '';\n  showOptions = false;\n  val = '';\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this._options = this.options;\n  }\n\n  setValue(product: any) {\n    this.showOptions = false;\n\n    this.inputValue = product.label;\n    this.value = product.value;\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  filterOptions(): ISelectOptions[] {\n    if (!this.options) return [];\n    this._options = this.options.filter(({ label }) => label.includes(this.inputValue));\n    return this._options;\n  }\n\n}\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 50
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            },
            "templateData": "<div class=\"select\">\n  <div class=\"select_input\">\n    <app-input-text\n      (click)=\"showOptions = true\"\n      (blur)=\"showOptions = false\"\n      label=\"Produto\"\n      placeholder=\"Nome do produto\"\n      [(ngModel)]=\"inputValue\"\n      (ngModelChange)=\"filterOptions()\"\n      [id]=\"id\"\n    >\n    </app-input-text>\n  </div>\n\n  <ul class=\"select_options scroll-style\" [ngClass]=\"{ show: showOptions }\">\n    @for(option of _options; track $index){\n    <li (click)=\"setValue(option)\" class=\"select_options_item\">\n      {{ option.label }}\n    </li>\n    } @empty {\n    <li class=\"select_options_empty\">sem resultados</li>\n    }\n  </ul>\n</div>\n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-be718248c3ed088aba15053bcd4d84045169ff989344e7afba39aae476feffbec539f3d95ab97c64353536ff7ad0bfe33ba6bb53895aa7343d04db799e27d169",
            "file": "src/app/pages/auth/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-welcome',\n  standalone: true,\n  imports: [ButtonComponent, RouterLink],\n  templateUrl: './welcome.component.html',\n  styleUrl: './welcome.component.scss'\n})\nexport class WelcomeComponent {\n\n}\n",
            "styleUrl": "./welcome.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"welcome\">\n  <h1 class=\"welcome-title title\">Entre na sua conta</h1>\n\n  <p class=\"welcome-description subtitle\">\n    Transforme seu aprendizado com cursos online de alta qualidade. Junte-se a\n    nós agora!\n  </p>\n\n  <app-button\n    id=\"welcome-login-button\"\n    routerLink=\"./login\"\n    class=\"welcome-button\"\n  >\n    Login\n  </app-button>\n  <app-button\n    id=\"welcome-register-button\"\n    routerLink=\"./cadastrar\"\n    color=\"secundary\"\n    class=\"welcome-button\"\n  >\n    Cadastre-se\n  </app-button>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideAnimations(),\n    provideHttpClient(withFetch()),\n    provideEnvironmentNgxMask(maskConfig),\n  ]\n}"
            },
            {
                "name": "fadeAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/fade/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fade', [\n  transition('* <=> *', [\n    query(':enter', [\n      style({ opacity: 0 }),\n      stagger(30, [\n        animate('300ms ease-in', style({ opacity: 1 })),\n      ])\n    ]),\n  ])\n])"
            },
            {
                "name": "maskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<IConfig>",
                "defaultValue": "{\n  validation: false,\n}"
            },
            {
                "name": "optional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/fade/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ optional: true }"
            },
            {
                "name": "tokenInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interceptors/token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n\n  if (tokenService.token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${}`,\n        Accept: 'application/json',\n      },\n    });\n  }\n\n  return next(req);\n}"
            }
        ],
        "functions": [
            {
                "name": "debounce",
                "file": "src/app/shared/decorators/debounce/debounce.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Decorator<T>",
                "jsdoctags": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "debouncify",
                "file": "src/app/shared/decorators/debounce/debouncify.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "originalMethod",
                        "type": "Method",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Method<void, A>",
                "jsdoctags": [
                    {
                        "name": "originalMethod",
                        "type": "Method",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AsyncMethod",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Decorator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Method",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "UnboxPromise",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            }
        ],
        "enumerations": [
            {
                "name": "AlertTypes",
                "childs": [
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/alert/alert.component.ts"
            },
            {
                "name": "AvatarSizeParam",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sm"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "md"
                    },
                    {
                        "name": "large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/avatar/avatar.component.ts"
            },
            {
                "name": "ButtonColors",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secundary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secundary"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/button/button.component.ts"
            },
            {
                "name": "ButtonSize",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/button/button.component.ts"
            },
            {
                "name": "InputTextTypes",
                "childs": [
                    {
                        "name": "password",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "password"
                    },
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/input-text/input-text.component.ts"
            },
            {
                "name": "Roles",
                "childs": [
                    {
                        "name": "DIRECTOR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DIRECTOR"
                    },
                    {
                        "name": "TEACHER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TEACHER"
                    },
                    {
                        "name": "STUDENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "STUDENT"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/roles.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideAnimations(),\n    provideHttpClient(withFetch()),\n    provideEnvironmentNgxMask(maskConfig),\n  ]\n}"
                },
                {
                    "name": "maskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<IConfig>",
                    "defaultValue": "{\n  validation: false,\n}"
                }
            ],
            "src/app/shared/animations/fade/fade.animation.ts": [
                {
                    "name": "fadeAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/fade/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fade', [\n  transition('* <=> *', [\n    query(':enter', [\n      style({ opacity: 0 }),\n      stagger(30, [\n        animate('300ms ease-in', style({ opacity: 1 })),\n      ])\n    ]),\n  ])\n])"
                },
                {
                    "name": "optional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/fade/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ optional: true }"
                }
            ],
            "src/app/shared/interceptors/token.interceptor.ts": [
                {
                    "name": "tokenInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interceptors/token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n\n  if (tokenService.token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${}`,\n        Accept: 'application/json',\n      },\n    });\n  }\n\n  return next(req);\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/decorators/debounce/debounce.ts": [
                {
                    "name": "debounce",
                    "file": "src/app/shared/decorators/debounce/debounce.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Decorator<T>",
                    "jsdoctags": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/decorators/debounce/debouncify.ts": [
                {
                    "name": "debouncify",
                    "file": "src/app/shared/decorators/debounce/debouncify.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "originalMethod",
                            "type": "Method",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Method<void, A>",
                    "jsdoctags": [
                        {
                            "name": "originalMethod",
                            "type": "Method",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/components/alert/alert.component.ts": [
                {
                    "name": "AlertTypes",
                    "childs": [
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/alert/alert.component.ts"
                }
            ],
            "src/app/shared/components/avatar/avatar.component.ts": [
                {
                    "name": "AvatarSizeParam",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sm"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "md"
                        },
                        {
                            "name": "large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/avatar/avatar.component.ts"
                }
            ],
            "src/app/shared/components/button/button.component.ts": [
                {
                    "name": "ButtonColors",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secundary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secundary"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/button/button.component.ts"
                },
                {
                    "name": "ButtonSize",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/button/button.component.ts"
                }
            ],
            "src/app/shared/components/input-text/input-text.component.ts": [
                {
                    "name": "InputTextTypes",
                    "childs": [
                        {
                            "name": "password",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "password"
                        },
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/input-text/input-text.component.ts"
                }
            ],
            "src/app/shared/enums/roles.enum.ts": [
                {
                    "name": "Roles",
                    "childs": [
                        {
                            "name": "DIRECTOR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DIRECTOR"
                        },
                        {
                            "name": "TEACHER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TEACHER"
                        },
                        {
                            "name": "STUDENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "STUDENT"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/roles.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/decorators/debounce/debounce.model.ts": [
                {
                    "name": "AsyncMethod",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Decorator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Method",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "UnboxPromise",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/new-password/new-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/components/jumbotron-wellcome/jumbotron-wellcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JumbotronWellcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/logged-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoggedAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/fade/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/fade/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/aside-menu/aside-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-menu/button-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-color/input-color.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputColorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-upload/input-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-upload/input-upload.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputPhotoValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/jumbotron/jumbotron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JumbotronComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debounce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debouncify.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debouncify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/error.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorDefault",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/token/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}