{
    "pipes": [],
    "interfaces": [
        {
            "name": "InputPhotoValue",
            "id": "interface-InputPhotoValue-da6c232f3cd8e250dd8b5ad5b9eb0c81353edc6f46903447ed9bf277b2ff2a6649a961529208ef7e1b5c66b8a47bbdba37efedd8937e2ea69c805d668f8b26c7",
            "file": "src/app/shared/components/input-upload/input-upload.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgIf } from '@angular/common';\nimport { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface InputPhotoValue {\n  b64: string;\n  file: any;\n}\n\n@Component({\n  selector: 'input-upload',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './input-upload.component.html',\n  styleUrl: './input-upload.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputUploadComponent),\n    },\n  ],\n})\nexport class InputUploadComponent implements OnInit, ControlValueAccessor {\n  @Input() id = '';\n  @Input() initialImage?: string = '';\n\n  val: InputPhotoValue = {\n    b64: '',\n    file: '',\n  };\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  showImage(event: any): void {\n    const files: FileList = event.target.files;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.value = {\n        b64: reader.result as string,\n        file: files[0],\n      };\n    };\n\n    reader.readAsDataURL(files[0]);\n  }\n}\n",
            "properties": [
                {
                    "name": "b64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectOptions",
            "id": "interface-ISelectOptions-bf2c35a6d0cf00ff6439c455614fd97463e55f1817ec0c58dc8cb8b2959068522f975c14d29c62f1bdbbfb3a44d66dff7f7c93fb6f91e0688d4fd755e09815e9",
            "file": "src/app/shared/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputTextComponent } from '../input-text/input-text.component';\n\nexport interface ISelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [CommonModule, FormsModule, InputTextComponent],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n    },\n  ],\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  @Input() options: ISelectOptions[] | null = [];\n  _options: ISelectOptions[] | null = [];\n  inputValue = '';\n  showOptions = false;\n  val = '';\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this._options = this.options;\n  }\n\n  setValue(product: any) {\n    this.showOptions = false;\n\n    this.inputValue = product.label;\n    this.value = product.value;\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  filterOptions(): ISelectOptions[] {\n    if (!this.options) return [];\n    this._options = this.options.filter(({ label }) => label.includes(this.inputValue));\n    return this._options;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-95bde1efa7ec1a98c60d7c9580f0be2fe4fccdafd00868ac98eb210cf82b89812eb8020a8ec68e77e9e0bfad725fa263f4634be71c71223abb7f81d097da6d8d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'director'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "AuthComponent",
                    "type": "component"
                },
                {
                    "name": "NotFoundComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { AuthComponent } from './pages/auth/auth.component';\r\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\r\nimport { ButtonComponent } from './shared/components/button/button.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet, AuthComponent, NotFoundComponent, ButtonComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  title = 'director';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-0871a54ba316c3d291aba58653f32b09be78750f9baee37fc9e3fccb6527a64e8b8b523fd0d88bd23481520c58979be0799598e4bf7cbc61aa23b0862899cfcf",
            "file": "src/app/pages/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logo",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                },
                {
                    "name": "RegisterComponent",
                    "type": "component"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { NgOptimizedImage } from '@angular/common';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\nimport { fadeAnimation } from '../../shared/animations/fade/fade.animation';\r\n@Component({\r\n  selector: 'app-auth',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    NgOptimizedImage,\r\n    ButtonComponent,\r\n  ],\r\n  templateUrl: './auth.component.html',\r\n  styleUrl: './auth.component.scss',\r\n  animations: [\r\n    fadeAnimation\r\n  ]\r\n})\r\nexport class AuthComponent {\r\n  logo = \"\";\r\n}\r\n",
            "styleUrl": "./auth.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main class=\"auth\">\r\n  @if(logo){\r\n  <header class=\"auth-header\">\r\n    <img\r\n      src=\"/assets/ilustrations/celular-lg.png\"\r\n      alt=\"ilustração de dois jovens em volta de um smartfone\"\r\n      priority\r\n      fetchpriority=\"high\"\r\n    />\r\n  </header>\r\n  }\r\n  <div class=\"auth-image\">\r\n    <picture>\r\n      <source\r\n        srcset=\"/assets/ilustrations/celular-sm.png\"\r\n        media=\"(max-width: 768px)\"\r\n      />\r\n      <img\r\n        src=\"/assets/ilustrations/celular-lg.png\"\r\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\r\n        priority\r\n        fetchpriority=\"high\"\r\n      />\r\n    </picture>\r\n  </div>\r\n  <div class=\"auth-route\">\r\n    <div [@fade]=\"outlet.isActivated ? outlet.activatedRoute : ''\">\r\n      <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n  </div>\r\n</main>\r\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-c1a2a07bbad6cffd9029983285045d53ff8245de32ee7280e5a7a490e3c996a81da7e93a21884f8baeb0041299bb199d6d99ee2cc833600aae54ebbb071d8f2e",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "AvatarSizeParam.small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "AvatarSizeParam",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\nexport enum AvatarSizeParam {\n  \"small\" = \"sm\",\n  \"medium\" = \"md\",\n  \"large\" = \"lg\"\n}\n@Component({\n  selector: 'app-avatar',\n  standalone: true,\n  imports: [NgClass],\n  templateUrl: './avatar.component.html',\n  styleUrl: './avatar.component.scss'\n})\nexport class AvatarComponent {\n  @Input() src = \"\";\n  @Input() alt = \"\";\n  @Input() id = \"\";\n  @Input() loading = true;\n  @Input() size: AvatarSizeParam = AvatarSizeParam.small;\n}\n",
            "styleUrl": "./avatar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"avatar {{ size }}\" [ngClass]=\"{ loading: loading }\">\n  @if(!loading) {\n  <img [id]=\"id\" [src]=\"src\" [alt]=\"alt\" />\n  } @else {\n  <div class=\"avatar-loader\"></div>\n  }\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-062c728cd5d1cebed67e3771f8aabf3d151c806da13b96ff39f509d86fce6f3568a55dc8308fb032d11ee8581fdebec39881c057246b52aa7bfcd6807c680cee",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "ButtonColors.primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ButtonColors",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "ButtonSize.medium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ButtonSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport enum ButtonColors {\r\n  \"primary\" = \"primary\",\r\n  \"secundary\" = \"secundary\"\r\n}\r\nexport enum ButtonSize {\r\n  \"small\" = \"small\",\r\n  \"medium\" = \"medium\"\r\n}\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n  @Input() color: ButtonColors = ButtonColors.primary;\r\n  @Input() size: ButtonSize = ButtonSize.medium;\r\n  @Input() disabled = false;\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [disabled]=\"disabled\"\n  class=\"button button--{{ color }} button--{{ size }}\"\n>\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "InputColorComponent",
            "id": "component-InputColorComponent-69bee69ea4649745871d0206b1b34fef02b3f3002af2cfe3f974dc47dc6d71ae36552eec6d8e83c71370d09a8f989534657d467baf1e6bebbe1e744e88191790",
            "file": "src/app/shared/components/input-color/input-color.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputColorComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-color",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-color.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Component, Input, OnInit, forwardRef } from '@angular/core';\nimport { NgStyle } from '@angular/common';\n\n@Component({\n  selector: 'app-input-color',\n  standalone: true,\n  imports: [FormsModule, NgStyle],\n  templateUrl: './input-color.component.html',\n  styleUrl: './input-color.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputColorComponent),\n    },\n  ],\n})\nexport class InputColorComponent implements OnInit, ControlValueAccessor {\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  val = '';\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n}\n",
            "styleUrl": "./input-color.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "templateData": "<div (click)=\"input.click()\" class=\"input-color\">\n  <div class=\"input-color_header\">\n    <label [for]=\"id\">{{ label }}</label>\n  </div>\n\n  <div\n    class=\"input-color_square\"\n    [ngStyle]=\"{\n      backgroundColor: value\n    }\"\n  ></div>\n\n  <input #input type=\"color\" [(ngModel)]=\"value\" [id]=\"id\" [name]=\"id\" />\n</div>\n"
        },
        {
            "name": "InputTextComponent",
            "id": "component-InputTextComponent-d044e118225cefba5498b9ab351ba1b975b07109c156a05d2e3d07cd787e7a2e8325e9d8b2f3b906c822fb2911eef2e153995a9e9aa7bf92daa73b0af1fa00d5",
            "file": "src/app/shared/components/input-text/input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputTextComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "InputTextTypes.text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "InputTextTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Component, Input, OnInit, forwardRef } from '@angular/core';\nimport { NgClass } from '@angular/common';\n\nexport enum InputTextTypes {\n  password = \"password\",\n  text = \"text\"\n}\n\n@Component({\n  selector: 'app-input-text',\n  standalone: true,\n  imports: [FormsModule, NgClass],\n  templateUrl: './input-text.component.html',\n  styleUrl: './input-text.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputTextComponent),\n    },\n  ],\n})\nexport class InputTextComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() success = false;\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  @Input() type: InputTextTypes = InputTextTypes.text;\n  val = '';\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "styleUrl": "./input-text.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"input-text\" [ngClass]=\"{ 'has-error': error, success: success }\">\n  <div class=\"input-text_header\">\n    <label [for]=\"id\">{{ label }}</label>\n\n    <div class=\"input-text_header_right\">\n      <ng-content select=\"[right]\"></ng-content>\n    </div>\n  </div>\n\n  <input\n    [(ngModel)]=\"value\"\n    [id]=\"id\"\n    [name]=\"id\"\n    [type]=\"type\"\n    [placeholder]=\"placeholder\"\n  />\n</div>\n"
        },
        {
            "name": "InputUploadComponent",
            "id": "component-InputUploadComponent-da6c232f3cd8e250dd8b5ad5b9eb0c81353edc6f46903447ed9bf277b2ff2a6649a961529208ef7e1b5c66b8a47bbdba37efedd8937e2ea69c805d668f8b26c7",
            "file": "src/app/shared/components/input-upload/input-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputUploadComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "input-upload",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-upload.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initialImage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "val",
                    "defaultValue": "{\n    b64: '',\n    file: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputPhotoValue",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgIf } from '@angular/common';\nimport { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface InputPhotoValue {\n  b64: string;\n  file: any;\n}\n\n@Component({\n  selector: 'input-upload',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './input-upload.component.html',\n  styleUrl: './input-upload.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputUploadComponent),\n    },\n  ],\n})\nexport class InputUploadComponent implements OnInit, ControlValueAccessor {\n  @Input() id = '';\n  @Input() initialImage?: string = '';\n\n  val: InputPhotoValue = {\n    b64: '',\n    file: '',\n  };\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  showImage(event: any): void {\n    const files: FileList = event.target.files;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.value = {\n        b64: reader.result as string,\n        file: files[0],\n      };\n    };\n\n    reader.readAsDataURL(files[0]);\n  }\n}\n",
            "styleUrl": "./input-upload.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"input-upload\">\n  @if (value.b64) {\n  <img [src]=\"value.b64\" class=\"input-upload_preview\" />\n  }\n\n  <input\n    #inputFile\n    type=\"file\"\n    [id]=\"id\"\n    [name]=\"id\"\n    (change)=\"showImage($event)\"\n    accept=\"image/png, image/jpeg\"\n    class=\"input-upload_input\"\n  />\n\n  <button\n    [id]=\"id + '-input-upload-button'\"\n    type=\"button\"\n    (click)=\"inputFile.click()\"\n    class=\"input-upload_button\"\n  >\n    icone\n  </button>\n</div>\n\n<label [for]=\"id + '-input-upload-button'\" class=\"input-upload_text\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "LoggedAreaComponent",
            "id": "component-LoggedAreaComponent-1c1411dfbbac60a024f56a9b48406064916a53a270e2f25f191d72614a6ee30cdcee7d1c3373c1f64c4925067336a13b85fe468ca56d9bd31c060730638b178a",
            "file": "src/app/pages/logged-area/logged-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logged-area",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logged-area.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-logged-area',\n  standalone: true,\n  imports: [],\n  templateUrl: './logged-area.component.html',\n  styleUrl: './logged-area.component.scss'\n})\nexport class LoggedAreaComponent {\n\n}\n",
            "styleUrl": "./logged-area.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>logged-area works!</p>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-60c841168597eeaf4020509677c839739e8829e26eb04770494302edec8821d0a6f3acc0286f47236ba81cb6339071beee1e56f9e5253ed4c7b7bed0160ed90c",
            "file": "src/app/pages/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payload",
                    "defaultValue": "{\r\n    password: \"\",\r\n    email: \"\",\r\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [ButtonComponent, InputTextComponent, RouterLink, FormsModule],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss'\r\n})\r\nexport class LoginComponent {\r\n  payload = {\r\n    password: \"\",\r\n    email: \"\",\r\n  } as any;\r\n\r\n  submit() {\r\n\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"login\">\r\n  <form #form=\"ngForm\" class=\"login-form\">\r\n    <app-input-text\r\n      [(ngModel)]=\"payload.email\"\r\n      id=\"email\"\r\n      name=\"email\"\r\n      [required]=\"true\"\r\n      label=\"Email\"\r\n      type=\"text\"\r\n      placeholder=\"Informe o seu email\"\r\n    ></app-input-text>\r\n\r\n    <app-input-text\r\n      name=\"password\"\r\n      [(ngModel)]=\"payload.password\"\r\n      id=\"password\"\r\n      type=\"password\"\r\n      [required]=\"true\"\r\n      label=\"Senha\"\r\n      placeholder=\"Informe a sua senha\"\r\n    ></app-input-text>\r\n  </form>\r\n\r\n  <a class=\"link\" routerLink=\"../recuperar-senha\">\r\n    Esqueceu a senha ? <span>Clique aqui.</span>\r\n  </a>\r\n\r\n  <a class=\"link\" routerLink=\"../cadastrar\">\r\n    Ainda não tem uma conta ? <span>Cadastre-se !</span>\r\n  </a>\r\n\r\n  <div class=\"login-form-footer\">\r\n    <app-button [disabled]=\"!!form.invalid\"> Entrar </app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NewPasswordComponent",
            "id": "component-NewPasswordComponent-1a597fd4fe6e50ecbcb518f992772c8208e690ddad1d5077298d3073c8b04370be6ee049f6b25e6167ec9db55c1934fc2548d86d115269cf931a1bb81bbeeff4",
            "file": "src/app/pages/auth/new-password/new-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payload",
                    "defaultValue": "{\n    password: \"\",\n    email: \"\",\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\nimport { RouterLink } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-new-password',\n  standalone: true,\n  imports: [ButtonComponent, InputTextComponent, RouterLink, FormsModule],\n  templateUrl: './new-password.component.html',\n  styleUrl: './new-password.component.scss'\n})\nexport class NewPasswordComponent {\n  payload = {\n    password: \"\",\n    email: \"\",\n  } as any;\n\n}\n",
            "styleUrl": "./new-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"register\">\n  <form #form=\"ngForm\" class=\"register-form\">\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n    ></app-input-text>\n\n    <app-input-text\n      name=\"confirm_password\"\n      [(ngModel)]=\"payload.confirm_password\"\n      id=\"confirm_password\"\n      type=\"password\"\n      label=\"Confirme sua nova Senha\"\n      placeholder=\"Confirme sua nova senha\"\n    ></app-input-text>\n  </form>\n\n  <div class=\"register-form-footer\">\n    <app-button [disabled]=\"!!form.invalid\"> Atualizar senha </app-button>\n  </div>\n</div>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-43c1dd2e119e453c08aa38bd78d1c05ac3aa63658fa1fa2c5b1ddfe7e873117f4156bcde380e26809ca6ba301eac5ece744c6ac80959796c3d7a7c562e1a2cee",
            "file": "src/app/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgOptimizedImage } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { RouterLink, RouterOutlet } from '@angular/router';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    NgOptimizedImage,\r\n    ButtonComponent,\r\n    RouterLink\r\n  ],\r\n  templateUrl: './not-found.component.html',\r\n  styleUrl: './not-found.component.scss'\r\n})\r\nexport class NotFoundComponent {\r\n\r\n}\r\n",
            "styleUrl": "./not-found.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"not-found\">\r\n  <div class=\"not-found-image\">\r\n    <picture>\r\n      <source\r\n        srcset=\"/assets/ilustrations/email-sm.png\"\r\n        media=\"(max-width: 768px)\"\r\n      />\r\n      <img\r\n        src=\"/assets/ilustrations/email-lg.png\"\r\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\r\n        priority\r\n        fetchpriority=\"high\"\r\n      />\r\n    </picture>\r\n  </div>\r\n  <div class=\"not-found-route\">\r\n    <h3 class=\"not-found-description text\">\r\n      Em breve você recebera um email nosso com um link para cadastrar uma nova\r\n      senha.\r\n    </h3>\r\n    <app-button routerLink=\"/\"> Voltar para tela inicial </app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-33dbb71272aac9cb823d960382d5f55958d814b8a756705a605f7922a15a90fc3d95cfd1efb5199f3d0441a4a06af28633835fb494c3340bee49eb8b422fc910",
            "file": "src/app/pages/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payload",
                    "defaultValue": "{\r\n    password: \"\",\r\n    email: \"\",\r\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { RouterLink } from '@angular/router';\r\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [ButtonComponent, InputTextComponent, RouterLink, FormsModule],\r\n  templateUrl: './register.component.html',\r\n  styleUrl: './register.component.scss'\r\n})\r\nexport class RegisterComponent {\r\n  payload = {\r\n    password: \"\",\r\n    email: \"\",\r\n  } as any;\r\n\r\n}\r\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"register\">\r\n  <form #form=\"ngForm\" class=\"register-form\">\r\n    <app-input-text\r\n      [(ngModel)]=\"payload.email\"\r\n      id=\"email\"\r\n      name=\"email\"\r\n      [required]=\"true\"\r\n      label=\"Email\"\r\n      type=\"text\"\r\n      placeholder=\"Informe o seu email\"\r\n    ></app-input-text>\r\n\r\n    <app-input-text\r\n      name=\"password\"\r\n      [(ngModel)]=\"payload.password\"\r\n      id=\"password\"\r\n      type=\"password\"\r\n      label=\"Senha\"\r\n      placeholder=\"Informe a sua senha\"\r\n    ></app-input-text>\r\n\r\n    <app-input-text\r\n      name=\"confirm_password\"\r\n      [(ngModel)]=\"payload.confirm_password\"\r\n      id=\"confirm_password\"\r\n      type=\"password\"\r\n      label=\"Confirme sua Senha\"\r\n      placeholder=\"Confirme sua senha\"\r\n    ></app-input-text>\r\n\r\n    <app-input-text\r\n      [(ngModel)]=\"payload.document_number\"\r\n      id=\"document_number\"\r\n      name=\"document_number\"\r\n      [required]=\"true\"\r\n      label=\"CPF\"\r\n      type=\"text\"\r\n      placeholder=\"Informe o seu email\"\r\n    ></app-input-text>\r\n  </form>\r\n\r\n  <a class=\"link\" routerLink=\"../login\">\r\n    Já tem uma conta ? <span>Entre!</span>\r\n  </a>\r\n\r\n  <div class=\"register-form-footer\">\r\n    <app-button [disabled]=\"!!form.invalid\"> Entrar </app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-bf2c35a6d0cf00ff6439c455614fd97463e55f1817ec0c58dc8cb8b2959068522f975c14d29c62f1bdbbfb3a44d66dff7f7c93fb6f91e0688d4fd755e09815e9",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ISelectOptions[] | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISelectOptions[] | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "showOptions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "filterOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "ISelectOptions[]",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputTextComponent } from '../input-text/input-text.component';\n\nexport interface ISelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [CommonModule, FormsModule, InputTextComponent],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n    },\n  ],\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = '';\n  @Input() error = false;\n  @Input() label = '';\n  @Input() id = '';\n  @Input() options: ISelectOptions[] | null = [];\n  _options: ISelectOptions[] | null = [];\n  inputValue = '';\n  showOptions = false;\n  val = '';\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this._options = this.options;\n  }\n\n  setValue(product: any) {\n    this.showOptions = false;\n\n    this.inputValue = product.label;\n    this.value = product.value;\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  filterOptions(): ISelectOptions[] {\n    if (!this.options) return [];\n    this._options = this.options.filter(({ label }) => label.includes(this.inputValue));\n    return this._options;\n  }\n\n}\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 50
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            },
            "templateData": "<div class=\"select\">\n  <div class=\"select_input\">\n    <app-input-text\n      (click)=\"showOptions = true\"\n      (blur)=\"showOptions = false\"\n      label=\"Produto\"\n      placeholder=\"Nome do produto\"\n      [(ngModel)]=\"inputValue\"\n      (ngModelChange)=\"filterOptions()\"\n      [id]=\"id\"\n    >\n    </app-input-text>\n  </div>\n\n  <ul class=\"select_options scroll-style\" [ngClass]=\"{ show: showOptions }\">\n    @for(option of _options; track $index){\n    <li (click)=\"setValue(option)\" class=\"select_options_item\">\n      {{ option.label }}\n    </li>\n    } @empty {\n    <li class=\"select_options_empty\">sem resultados</li>\n    }\n  </ul>\n</div>\n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-1e598966ff96cad10ef5193c498dfa23cbbc5cdcf7ad2b931ba465d156dba47885514c2dc2c31043440746688f183879f8ad8583dcbd3cb1ddfeaaae311b98b0",
            "file": "src/app/pages/auth/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-welcome',\r\n  standalone: true,\r\n  imports: [ButtonComponent, RouterLink],\r\n  templateUrl: './welcome.component.html',\r\n  styleUrl: './welcome.component.scss'\r\n})\r\nexport class WelcomeComponent {\r\n\r\n}\r\n",
            "styleUrl": "./welcome.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"welcome\">\r\n  <h1 class=\"welcome-title title\">Entre na sua conta</h1>\r\n\r\n  <p class=\"welcome-description subtitle\">\r\n    Transforme seu aprendizado com cursos online de alta qualidade. Junte-se a\r\n    nós agora!\r\n  </p>\r\n\r\n  <app-button routerLink=\"./login\" class=\"welcome-button\"> Login </app-button>\r\n  <app-button routerLink=\"./cadastrar\" color=\"secundary\" class=\"welcome-button\">\r\n    Cadastre-se\r\n  </app-button>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideRouter(routes), provideAnimations()]\n}"
            },
            {
                "name": "fadeAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/fade/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fade', [\r\n  transition('* <=> *', [\r\n    query(':enter', [\r\n      style({ opacity: 0 }),\r\n      stagger(30, [\r\n        animate('300ms ease-in', style({ opacity: 1 })),\r\n      ])\r\n    ]),\r\n  ])\r\n])"
            },
            {
                "name": "optional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/fade/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ optional: true }"
            }
        ],
        "functions": [
            {
                "name": "debounce",
                "file": "src/app/shared/decorators/debounce/debounce.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Decorator<T>",
                "jsdoctags": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "debouncify",
                "file": "src/app/shared/decorators/debounce/debouncify.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "originalMethod",
                        "type": "Method",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Method<void, A>",
                "jsdoctags": [
                    {
                        "name": "originalMethod",
                        "type": "Method",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AsyncMethod",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Decorator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Method",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "UnboxPromise",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            }
        ],
        "enumerations": [
            {
                "name": "AvatarSizeParam",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sm"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "md"
                    },
                    {
                        "name": "large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/avatar/avatar.component.ts"
            },
            {
                "name": "ButtonColors",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secundary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secundary"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/button/button.component.ts"
            },
            {
                "name": "ButtonSize",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/button/button.component.ts"
            },
            {
                "name": "InputTextTypes",
                "childs": [
                    {
                        "name": "password",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "password"
                    },
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/input-text/input-text.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideRouter(routes), provideAnimations()]\n}"
                }
            ],
            "src/app/shared/animations/fade/fade.animation.ts": [
                {
                    "name": "fadeAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/fade/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fade', [\r\n  transition('* <=> *', [\r\n    query(':enter', [\r\n      style({ opacity: 0 }),\r\n      stagger(30, [\r\n        animate('300ms ease-in', style({ opacity: 1 })),\r\n      ])\r\n    ]),\r\n  ])\r\n])"
                },
                {
                    "name": "optional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/fade/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ optional: true }"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/decorators/debounce/debounce.ts": [
                {
                    "name": "debounce",
                    "file": "src/app/shared/decorators/debounce/debounce.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Decorator<T>",
                    "jsdoctags": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/decorators/debounce/debouncify.ts": [
                {
                    "name": "debouncify",
                    "file": "src/app/shared/decorators/debounce/debouncify.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "originalMethod",
                            "type": "Method",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Method<void, A>",
                    "jsdoctags": [
                        {
                            "name": "originalMethod",
                            "type": "Method",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/components/avatar/avatar.component.ts": [
                {
                    "name": "AvatarSizeParam",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sm"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "md"
                        },
                        {
                            "name": "large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/avatar/avatar.component.ts"
                }
            ],
            "src/app/shared/components/button/button.component.ts": [
                {
                    "name": "ButtonColors",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secundary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secundary"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/button/button.component.ts"
                },
                {
                    "name": "ButtonSize",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/button/button.component.ts"
                }
            ],
            "src/app/shared/components/input-text/input-text.component.ts": [
                {
                    "name": "InputTextTypes",
                    "childs": [
                        {
                            "name": "password",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "password"
                        },
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/input-text/input-text.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/decorators/debounce/debounce.model.ts": [
                {
                    "name": "AsyncMethod",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Decorator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Method",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "UnboxPromise",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/new-password/new-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/logged-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoggedAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/fade/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/fade/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-color/input-color.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputColorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-upload/input-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-upload/input-upload.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputPhotoValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debounce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debouncify.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debouncify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}