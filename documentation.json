{
    "pipes": [
        {
            "name": "GetUrlBasePipe",
            "id": "pipe-GetUrlBasePipe-affbc24104fe3163b7b0ab6e93fb983fed892b40c0d2a4d12ca778d865cc2b8170f26cd69bdd19711e7606770ed200f12ea5a6c1c8cd0600483fdecab90f8bec",
            "file": "src/app/shared/pipes/get-url-base/get-url-base.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "getUrlBase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'getUrlBase'\r\n})\r\nexport class GetUrlBasePipe implements PipeTransform {\r\n\r\n  transform(value: unknown, ...args: unknown[]): unknown {\r\n    return null;\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "IuserToAvatarPipe",
            "id": "pipe-IuserToAvatarPipe-8ebba26e5f9ecc0b4d4d932799b945578f8a2322c504f72ef52b8db92dbe70af79799d28957def28675d2b2cc517ab80b99d02bc050b8e8052bf2990e7541f62",
            "file": "src/app/shared/pipes/iuserToAvatar/iuser-to-avatar.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IAvatarParans",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "iuserToAvatar",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { IAvatarParans } from '@shared/components/avatar/avatar.component';\r\nimport { IUser } from '@shared/services/user-logged/user-logged.model';\r\n\r\n@Pipe({\r\n  name: 'iuserToAvatar',\r\n  standalone: true\r\n})\r\nexport class IuserToAvatarPipe implements PipeTransform {\r\n\r\n  transform({ photo: src, name }: IUser): IAvatarParans {\r\n    return { src, name };\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "NgModelErrorPipe",
            "id": "pipe-NgModelErrorPipe-db5bca07a714cbbe11c439f4b0b2af62b50ef9d6b39be19df79da3c923d990bb8dbc1a2f11ac0bae38bc760d665c2599d96801724eb394f2c5df89e78aad5b2a",
            "file": "src/app/shared/pipes/ngModel/ng-model-error.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "controler",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controler",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": false,
            "ngname": "ngModelError",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { NgModel } from '@angular/forms';\r\n\r\n@Pipe({\r\n  name: 'ngModelError',\r\n  standalone: true,\r\n  pure: false\r\n})\r\nexport class NgModelErrorPipe implements PipeTransform {\r\n\r\n  transform(controler: NgModel): boolean {\r\n    const { errors, dirty, pristine } = controler;\r\n\r\n    if (!errors) return false;\r\n\r\n    return !!(Object.keys(errors).length && !pristine)\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "TrustHtmlPipe",
            "id": "pipe-TrustHtmlPipe-cc9b07a5a31660005acf69f86d37d5380c0e5781923536c825d223630ae566c1f1f5f1ece4c87d2adbbbd38dfe96ff5df259fbcb2c89dba2dc197e9ed315e46e",
            "file": "src/app/shared/pipes/trust-html/trust-html.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "#sanitizer",
                    "defaultValue": "inject(DomSanitizer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "trustHtml",
            "sourceCode": "import { inject, Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'trustHtml',\r\n  standalone: true\r\n})\r\nexport class TrustHtmlPipe implements PipeTransform {\r\n  #sanitizer = inject(DomSanitizer);\r\n\r\n  transform(content: string): SafeHtml {\r\n    return this.#sanitizer.bypassSecurityTrustHtml(content);\r\n  }\r\n}\r\n"
        },
        {
            "name": "TrustUrlPipe",
            "id": "pipe-TrustUrlPipe-007cb5367d0c4c0409b4e403a2c022f2de639c3d1c350fe87a5123933e956808509e410d7a809f51a0c35fd473c5353c3dacd60f05a6e979115373abcad39c20",
            "file": "src/app/shared/pipes/trust-url/trust-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "#sanitizer",
                    "defaultValue": "inject(DomSanitizer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeResourceUrl",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "trustUrl",
            "sourceCode": "import { inject, Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'trustUrl'\r\n})\r\nexport class TrustUrlPipe implements PipeTransform {\r\n  #sanitizer = inject(DomSanitizer);\r\n\r\n  transform(content: string): SafeResourceUrl {\r\n    return this.#sanitizer.bypassSecurityTrustResourceUrl(content);\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "College",
            "id": "interface-College-ad0e6f66148d24dd4aa867385c9911e0718515f6d0c34d22f0e6ed3c4b3d9cf612fdf3219035f4927064232a92e55dbbd3e508e6c527c4f06a52215e6f52642b",
            "file": "src/app/shared/services/college/collage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICourse } from \"../course/course.model\"\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\nexport interface CollegeStyle {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface ResponseCollegelist extends College { }\r\n\r\nexport interface CollegeRequest {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  thumb: any,\r\n  name: string,\r\n}\r\n\r\nexport interface CollegeResponse {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "CollegeStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollegeStyle[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "Course",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICourse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "College",
            "id": "interface-College-ad0e6f66148d24dd4aa867385c9911e0718515f6d0c34d22f0e6ed3c4b3d9cf612fdf3219035f4927064232a92e55dbbd3e508e6c527c4f06a52215e6f52642b-1",
            "file": "src/app/shared/services/college/collage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICourse } from \"../course/course.model\"\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\nexport interface CollegeStyle {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface ResponseCollegelist extends College { }\r\n\r\nexport interface CollegeRequest {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  thumb: any,\r\n  name: string,\r\n}\r\n\r\nexport interface CollegeResponse {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "CollegeStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollegeStyle[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "Course",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICourse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "College-1"
        },
        {
            "name": "CollegeRequest",
            "id": "interface-CollegeRequest-ad0e6f66148d24dd4aa867385c9911e0718515f6d0c34d22f0e6ed3c4b3d9cf612fdf3219035f4927064232a92e55dbbd3e508e6c527c4f06a52215e6f52642b",
            "file": "src/app/shared/services/college/collage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICourse } from \"../course/course.model\"\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\nexport interface CollegeStyle {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface ResponseCollegelist extends College { }\r\n\r\nexport interface CollegeRequest {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  thumb: any,\r\n  name: string,\r\n}\r\n\r\nexport interface CollegeResponse {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "primaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "secundaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CollegeResponse",
            "id": "interface-CollegeResponse-ad0e6f66148d24dd4aa867385c9911e0718515f6d0c34d22f0e6ed3c4b3d9cf612fdf3219035f4927064232a92e55dbbd3e508e6c527c4f06a52215e6f52642b",
            "file": "src/app/shared/services/college/collage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICourse } from \"../course/course.model\"\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\nexport interface CollegeStyle {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface ResponseCollegelist extends College { }\r\n\r\nexport interface CollegeRequest {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  thumb: any,\r\n  name: string,\r\n}\r\n\r\nexport interface CollegeResponse {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "collegeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "primaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "secundaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CollegeStyle",
            "id": "interface-CollegeStyle-ad0e6f66148d24dd4aa867385c9911e0718515f6d0c34d22f0e6ed3c4b3d9cf612fdf3219035f4927064232a92e55dbbd3e508e6c527c4f06a52215e6f52642b",
            "file": "src/app/shared/services/college/collage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICourse } from \"../course/course.model\"\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\nexport interface CollegeStyle {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface ResponseCollegelist extends College { }\r\n\r\nexport interface CollegeRequest {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  thumb: any,\r\n  name: string,\r\n}\r\n\r\nexport interface CollegeResponse {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "collegeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "primaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "secundaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Config",
            "id": "interface-Config-f56b82c1c82cb531a673d2914c07bc3dc8ca6d2da6117cd6db633b5d3ddb7b45a7834c1d46caf5883083697b25517212b472376040bfb88da931b663c6c4c8bf",
            "file": "src/app/shared/components/text-editor/counter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import 'quill'\r\nimport Quill from 'quill'\r\n\r\nexport interface Config {\r\n  container: string\r\n  unit: 'word' | 'char'\r\n}\r\n\r\nexport interface QuillInstance {\r\n  on: any\r\n  getText: any\r\n}\r\n\r\nexport default class Counter {\r\n  quill: QuillInstance\r\n  options: Config\r\n\r\n  constructor(quill: Quill, options: any) {\r\n    this.quill = quill\r\n    this.options = options\r\n\r\n    const container = document.querySelector(this.options.container)\r\n\r\n    this.quill.on('editor-change', () => {\r\n      const length = this.calculate()\r\n\r\n      container!.innerHTML = length + ' ' + this.options.unit + 's'\r\n    })\r\n  }\r\n\r\n  calculate() {\r\n    const text = this.quill.getText().trim()\r\n\r\n    if (this.options.unit === 'word') {\r\n      return !text ? 0 : text.split(/\\s+/).length\r\n    }\r\n    return text.length\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"word\" | \"char\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateQuizOption",
            "id": "interface-CreateQuizOption-e9335801be62facec1c37d99bdf1d4490ae2566a51cb28a76c228713b6de8f17f010de9d2c4bcc253c88f2008b680ff44563ebd2cda2f7118b341616970cc06f",
            "file": "src/app/shared/services/quiz/quiz.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateQuizOption {\r\n  title: string;\r\n  correctOptions: boolean;\r\n  quizId: number;\r\n}\r\n\r\nexport interface QuizOption {\r\n  correctOptions: boolean,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  title: string,\r\n  quizId: number,\r\n  id: number,\r\n}\r\n\r\nexport interface QuizCreateRequest {\r\n  name: string;\r\n  courseId: number;\r\n  quizOptions: CreateQuizOption[];\r\n}\r\n\r\nexport interface QuizCreateResponse {\r\n  id: number,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  name: string,\r\n  courseId: number,\r\n  quizOptions: QuizOption[]\r\n}\r\n",
            "properties": [
                {
                    "name": "correctOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "quizId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ErrorDefault",
            "id": "interface-ErrorDefault-5bd6d16954c6fe886dc44becf37e466393528f1c07a9ba85b2a8e270d4b81de8ffc037b222126880e09c03c1f26b6b1c984c7c95b645df8fbad45d9015b2a38c",
            "file": "src/app/shared/interfaces/error.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ErrorDefault {\r\n  message: string,\r\n  error: string,\r\n  statusCode: number\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetLessonResponse",
            "id": "interface-GetLessonResponse-b7e02754cc3126b3db9901ffe9eb380e1f0201c8484cb876a9d06d228307f979fb23c6efa5c9f375850335e1489a691821cc41eeb1ef0e2c8e1b6fd19093ae74",
            "file": "src/app/shared/services/lesson/lesson.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SafeHtml } from \"@angular/platform-browser\"\r\n\r\nexport interface LessonCreateRequest {\r\n  title: string\r\n  description: string\r\n  urlContent: string\r\n  courseId: number\r\n  content: SafeHtml\r\n  fileVideo: any\r\n}\r\n\r\nexport interface GetLessonResponse {\r\n  authorId: number\r\n  courseId: number\r\n  createdAt: string\r\n  description: string\r\n  id: number\r\n  title: string\r\n  updatedAt: string\r\n  urlContent: string\r\n  content: string\r\n}\r\n",
            "properties": [
                {
                    "name": "authorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "courseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "urlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetProfileRequest",
            "id": "interface-GetProfileRequest-5b50e91c618145349a098752baddeef8de1a786da84bfa10dc20e4be2cf2ce8e4d0a080f42e765e54e8523aa9fbb7720d06387aef95ef8928acc50c5aca37ef8",
            "file": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\n\r\nexport interface GetProfileRequest {\r\n  id: string\r\n}\r\n\r\nexport interface GetProfileResponse {\r\n  email: string,\r\n  name: string,\r\n  role: string,\r\n  id: number\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  documentNumber?: string,\r\n  celphone?: string,\r\n  photo?: string,\r\n  email?: string,\r\n  name?: string,\r\n}\r\n\r\nexport interface UpdateProfileResponse extends GetProfileResponse {\r\n  photo: string,\r\n  role: Roles\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetProfileResponse",
            "id": "interface-GetProfileResponse-5b50e91c618145349a098752baddeef8de1a786da84bfa10dc20e4be2cf2ce8e4d0a080f42e765e54e8523aa9fbb7720d06387aef95ef8928acc50c5aca37ef8",
            "file": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\n\r\nexport interface GetProfileRequest {\r\n  id: string\r\n}\r\n\r\nexport interface GetProfileResponse {\r\n  email: string,\r\n  name: string,\r\n  role: string,\r\n  id: number\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  documentNumber?: string,\r\n  celphone?: string,\r\n  photo?: string,\r\n  email?: string,\r\n  name?: string,\r\n}\r\n\r\nexport interface UpdateProfileResponse extends GetProfileResponse {\r\n  photo: string,\r\n  role: Roles\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAvatarParans",
            "id": "interface-IAvatarParans-94e31d0112e4684d82a0f9f88393f291bc054fa9d138ba05e0a31fdb4b8a599727ba49a6995cb25c589f1c19b7cc6a9016e06449129cf302ebb1ad491a5a6c89",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, input } from '@angular/core';\r\n\r\nimport { AvatarLoaderComponent } from '../loaders/avatar-loader/avatar-loader.component';\r\nimport { TrustHtmlPipe } from '@shared/pipes/trust-html/trust-html.pipe';\r\nimport { TrustUrlPipe } from '@shared/pipes/trust-url/trust-url.pipe';\r\n\r\nexport interface IAvatarParans {\r\n  src: string\r\n  name: string\r\n}\r\n\r\nexport enum AvatarSizeParam {\r\n  \"small\" = \"sm\",\r\n  \"medium\" = \"md\",\r\n  \"large\" = \"lg\"\r\n}\r\n@Component({\r\n  selector: 'app-avatar',\r\n  standalone: true,\r\n  imports: [AvatarLoaderComponent, TrustUrlPipe],\r\n  templateUrl: './avatar.component.html',\r\n  styleUrl: './avatar.component.scss'\r\n})\r\nexport class AvatarComponent {\r\n  readonly content = input.required<IAvatarParans>();\r\n  readonly size = input<AvatarSizeParam>(AvatarSizeParam.small);\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICourse",
            "id": "interface-ICourse-0eabf8cf20bf657b029731b4ab00398f87a2e5fdceb67fd548500dd253f24feab8e6c8b9b88cc9787830bd33326dc4c10fb72ef7027508bdae5720d7fce05462",
            "file": "src/app/shared/services/course/course.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICourse {\r\n  createdAt: string\r\n  collegeId: number\r\n  updatedAt: string\r\n  thumb: string\r\n  name: string\r\n  id: number\r\n  content: any\r\n}\r\n\r\nexport class CourseForm {\r\n  thumb = \"\"\r\n  name = \"\"\r\n  id = -1\r\n}\r\n\r\nexport interface IRequestCourseCreate {\r\n  thumb: any,\r\n  name: string,\r\n  collegeId: number\r\n}\r\n\r\nexport interface IResponseCourseCreate extends ICourse { }\r\nexport interface IResponseCourseGetById extends ICourse { }\r\n",
            "properties": [
                {
                    "name": "collegeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICreatePostRequest",
            "id": "interface-ICreatePostRequest-5a4704dab9555658a2b8f4e53f4d0e5ded784ff211e24b14ef97b5483cbb9c9b87d11a068ea3142ea62c38f2fdfb705e83503ad34b43074472ee6e9b10b52683",
            "file": "src/app/shared/services/post/post.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreatePostRequest {\r\n  collegeId: string;\r\n  courseId: string;\r\n  content: string;\r\n}\r\n\r\nexport interface ICreatePostResponse {\r\n  collegeId: string;\r\n  courseId: string;\r\n  content: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "collegeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "courseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICreatePostResponse",
            "id": "interface-ICreatePostResponse-5a4704dab9555658a2b8f4e53f4d0e5ded784ff211e24b14ef97b5483cbb9c9b87d11a068ea3142ea62c38f2fdfb705e83503ad34b43074472ee6e9b10b52683",
            "file": "src/app/shared/services/post/post.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreatePostRequest {\r\n  collegeId: string;\r\n  courseId: string;\r\n  content: string;\r\n}\r\n\r\nexport interface ICreatePostResponse {\r\n  collegeId: string;\r\n  courseId: string;\r\n  content: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "collegeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "courseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMenu",
            "id": "interface-IMenu-5de3767a1a6ec69a799b4c846853a45ef98227ec6c8d63f901d17270f95fb06aa5f8afd022fa23ac64ee9eaaf80f48b0c38b3880319ede0b237f3b82b2472003",
            "file": "src/app/shared/data/menus.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenu {\r\n  label: string;\r\n  link: string;\r\n};\r\n\r\nconst STUDENT: IMenu[] = [\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Avaliações', link: 'assessments' },\r\n  { label: 'Materias', link: 'assessments' },\r\n  { label: 'Atividades', link: 'task' },\r\n  { label: 'Publicações', link: 'feed' },\r\n];\r\n\r\nconst TEACHER: IMenu[] = [\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Avaliações', link: 'assessments' },\r\n  { label: 'Materias', link: 'assessments' },\r\n  { label: 'Atividades', link: 'task' },\r\n  { label: 'Publicações', link: 'feed' },\r\n];\r\n\r\nconst DIRECTOR: IMenu[] = [\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Escolas', link: 'list-college' },\r\n  { label: 'Publicações', link: 'feed' },\r\n];\r\n\r\nconst INSTITUTIONAL: IMenu[] = [\r\n  { label: 'Perguntas Frequentes', link: 'faq' },\r\n  { label: 'Quem somos', link: 'about' },\r\n  { label: 'Ajuda', link: 'suport' }\r\n];\r\n\r\nexport const menus = {\r\n  STUDENT,\r\n  TEACHER,\r\n  DIRECTOR,\r\n  INSTITUTIONAL\r\n};\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputPhotoValue",
            "id": "interface-InputPhotoValue-37fa1e1138a1cda7ce4a50bdbdb1231ea37280c216d3eb1528048210198a8da6af7b7139c95b9c12aaa0532642a8f28bba8a7274b5cbbb85aef00423104d7498",
            "file": "src/app/shared/components/input-upload/input-upload.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule, NgIf } from '@angular/common';\r\nimport { Component, forwardRef, Input, OnInit, input } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { Utils } from '@shared/services/utils/utils.service';\r\n\r\nexport interface InputPhotoValue {\r\n  b64: string;\r\n  file: any;\r\n}\r\n@Component({\r\n  selector: 'input-upload',\r\n  standalone: true,\r\n  imports: [CommonModule, FontAwesomeModule],\r\n  templateUrl: './input-upload.component.html',\r\n  styleUrl: './input-upload.component.scss',\r\n  providers: [\r\n    {\r\n      multi: true,\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputUploadComponent),\r\n    },\r\n  ]\r\n})\r\nexport class InputUploadComponent implements OnInit, ControlValueAccessor {\r\n  readonly id = input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input-upload` });\r\n  @Input() initialImage?: string = '';\r\n  readonly disabled = input(false);\r\n  readonly accept = input('image/png, image/jpeg');\r\n  icon = faCloudUploadAlt\r\n  val: InputPhotoValue = {\r\n    b64: '',\r\n    file: '',\r\n  };\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  get value() {\r\n    return this.val;\r\n  }\r\n\r\n  set value(val) {\r\n    if (val !== undefined && val !== null) {\r\n      this.val = val;\r\n      this.onChange(val);\r\n      this.onTouched(val);\r\n    }\r\n  }\r\n\r\n  onBlur() { }\r\n\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  showImage(event: any): void {\r\n    const files: FileList = event.target.files;\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      const limit = 10 * Utils.byteValue;\r\n\r\n      if (files[0].size > limit) return;\r\n\r\n      this.value = {\r\n        b64: reader.result as string,\r\n        file: files[0],\r\n      };\r\n    };\r\n\r\n    reader.readAsDataURL(files[0]);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "b64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPageThumbParams",
            "id": "interface-IPageThumbParams-fc0827c385c5cc71c691d36d8acb228c3c3e9b4208a523348431ef104cd3793fade8136406e721e868dd83022cbce2bfb44ed2e8c355c64e59383ea4202eee19",
            "file": "src/app/shared/components/page-thumb/page-thumb.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPageThumbParams {\r\n  primaryColor?: string\r\n  thumb: string\r\n  name: string\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "primaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPost",
            "id": "interface-IPost-2df79e2a7d722e03e5b8ed84b8468b617caee13201e8bbdc38339a5e3d06ccaca81afaaa03ed618c2ede08bcbcf98f7e65e450fd06d040a99b15420d88dd7fd4",
            "file": "src/app/shared/components/post/post.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, input } from '@angular/core';\r\n\r\nimport { AvatarProfileComponent } from \"../avatar-profile/avatar-profile.component\";\r\nimport { IAvatarParans } from '../avatar/avatar.component';\r\n\r\nexport interface IPost extends IAvatarParans { }\r\n\r\n@Component({\r\n  selector: 'app-post',\r\n  imports: [AvatarProfileComponent],\r\n  templateUrl: './post.component.html',\r\n  styleUrl: './post.component.scss'\r\n})\r\nexport class PostComponent {\r\n  readonly postParams = input.required<IPost>();\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IAvatarParans"
            ]
        },
        {
            "name": "IRequestCourseCreate",
            "id": "interface-IRequestCourseCreate-0eabf8cf20bf657b029731b4ab00398f87a2e5fdceb67fd548500dd253f24feab8e6c8b9b88cc9787830bd33326dc4c10fb72ef7027508bdae5720d7fce05462",
            "file": "src/app/shared/services/course/course.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICourse {\r\n  createdAt: string\r\n  collegeId: number\r\n  updatedAt: string\r\n  thumb: string\r\n  name: string\r\n  id: number\r\n  content: any\r\n}\r\n\r\nexport class CourseForm {\r\n  thumb = \"\"\r\n  name = \"\"\r\n  id = -1\r\n}\r\n\r\nexport interface IRequestCourseCreate {\r\n  thumb: any,\r\n  name: string,\r\n  collegeId: number\r\n}\r\n\r\nexport interface IResponseCourseCreate extends ICourse { }\r\nexport interface IResponseCourseGetById extends ICourse { }\r\n",
            "properties": [
                {
                    "name": "collegeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IResponseCourseCreate",
            "id": "interface-IResponseCourseCreate-0eabf8cf20bf657b029731b4ab00398f87a2e5fdceb67fd548500dd253f24feab8e6c8b9b88cc9787830bd33326dc4c10fb72ef7027508bdae5720d7fce05462",
            "file": "src/app/shared/services/course/course.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICourse {\r\n  createdAt: string\r\n  collegeId: number\r\n  updatedAt: string\r\n  thumb: string\r\n  name: string\r\n  id: number\r\n  content: any\r\n}\r\n\r\nexport class CourseForm {\r\n  thumb = \"\"\r\n  name = \"\"\r\n  id = -1\r\n}\r\n\r\nexport interface IRequestCourseCreate {\r\n  thumb: any,\r\n  name: string,\r\n  collegeId: number\r\n}\r\n\r\nexport interface IResponseCourseCreate extends ICourse { }\r\nexport interface IResponseCourseGetById extends ICourse { }\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ICourse"
            ]
        },
        {
            "name": "IResponseCourseGetById",
            "id": "interface-IResponseCourseGetById-0eabf8cf20bf657b029731b4ab00398f87a2e5fdceb67fd548500dd253f24feab8e6c8b9b88cc9787830bd33326dc4c10fb72ef7027508bdae5720d7fce05462",
            "file": "src/app/shared/services/course/course.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICourse {\r\n  createdAt: string\r\n  collegeId: number\r\n  updatedAt: string\r\n  thumb: string\r\n  name: string\r\n  id: number\r\n  content: any\r\n}\r\n\r\nexport class CourseForm {\r\n  thumb = \"\"\r\n  name = \"\"\r\n  id = -1\r\n}\r\n\r\nexport interface IRequestCourseCreate {\r\n  thumb: any,\r\n  name: string,\r\n  collegeId: number\r\n}\r\n\r\nexport interface IResponseCourseCreate extends ICourse { }\r\nexport interface IResponseCourseGetById extends ICourse { }\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ICourse"
            ]
        },
        {
            "name": "ISelectOptions",
            "id": "interface-ISelectOptions-af56147f00dabbcdb6df9ceacc770085403b8adb88c1274cd8c7495defcbffeee6de489690dc5c051b2c2ca753667e38fa6d90fc234bf9efdf717413ffcbe084",
            "file": "src/app/shared/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, forwardRef, input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputTextComponent } from '../input-text/input-text.component';\n\nexport interface ISelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n    selector: 'app-select',\n    imports: [CommonModule, FormsModule, InputTextComponent],\n    templateUrl: './select.component.html',\n    styleUrl: './select.component.scss',\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SelectComponent),\n        },\n    ]\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  readonly placeholder = input('');\n  readonly error = input(false);\n  readonly label = input('');\n  readonly id = input('');\n  readonly options = input<ISelectOptions[] | null>([]);\n  _options: ISelectOptions[] | null = [];\n  inputValue = '';\n  showOptions = false;\n  val = '';\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this._options = this.options();\n  }\n\n  setValue(product: any) {\n    this.showOptions = false;\n\n    this.inputValue = product.label;\n    this.value = product.value;\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  filterOptions(): ISelectOptions[] {\n    const options = this.options();\n    if (!options) return [];\n    this._options = options.filter(({ label }) => label.includes(this.inputValue));\n    return this._options;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITimeLine",
            "id": "interface-ITimeLine-7301143212201cea176c48aaac9243b3a1e6bf8f0f0c00990934d9f533e7b568fb1e2d4a3285a58f2c656a2a9da50b54cffe876e465c8d8fff7cadf1fd7632d7",
            "file": "src/app/shared/interfaces/timeline.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITimeLine {\r\n  date: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-a49ce86bbd78f7a302ece8f15dd918d83bdc5c67af414549670e5d7847ff09ba5ee27acba3bd5169c03868479290e5e99f75fa5eff01052a92f0e20a2a183819",
            "file": "src/app/shared/services/user-logged/user-logged.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LoginResponse } from \"app/pages/auth/services/auth/auth.model\";\r\n\r\nexport interface IUserLogged extends LoginResponse { }\r\n\r\nexport interface IUser {\r\n  email: string,\r\n  name: string,\r\n  role: string,\r\n  photo: string,\r\n  id: number\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUserLogged",
            "id": "interface-IUserLogged-a49ce86bbd78f7a302ece8f15dd918d83bdc5c67af414549670e5d7847ff09ba5ee27acba3bd5169c03868479290e5e99f75fa5eff01052a92f0e20a2a183819",
            "file": "src/app/shared/services/user-logged/user-logged.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LoginResponse } from \"app/pages/auth/services/auth/auth.model\";\r\n\r\nexport interface IUserLogged extends LoginResponse { }\r\n\r\nexport interface IUser {\r\n  email: string,\r\n  name: string,\r\n  role: string,\r\n  photo: string,\r\n  id: number\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "LoginResponse"
            ]
        },
        {
            "name": "LessonCreateRequest",
            "id": "interface-LessonCreateRequest-b7e02754cc3126b3db9901ffe9eb380e1f0201c8484cb876a9d06d228307f979fb23c6efa5c9f375850335e1489a691821cc41eeb1ef0e2c8e1b6fd19093ae74",
            "file": "src/app/shared/services/lesson/lesson.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SafeHtml } from \"@angular/platform-browser\"\r\n\r\nexport interface LessonCreateRequest {\r\n  title: string\r\n  description: string\r\n  urlContent: string\r\n  courseId: number\r\n  content: SafeHtml\r\n  fileVideo: any\r\n}\r\n\r\nexport interface GetLessonResponse {\r\n  authorId: number\r\n  courseId: number\r\n  createdAt: string\r\n  description: string\r\n  id: number\r\n  title: string\r\n  updatedAt: string\r\n  urlContent: string\r\n  content: string\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "courseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fileVideo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "urlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-082d033e5f946153b2a766cde55a57e59001fc934885914de56666754935a956289af88bd88a8f336a122a49386d7979c1e0aeec0d9913429a6f0d1c8e123975",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\nimport { College } from \"@shared/services/college/collage.model\"\r\nimport { IUser } from \"@shared/services/user-logged/user-logged.model\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  user: IUser,\r\n  colleges: College[],\r\n  calendar: [],\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginResponse",
            "id": "interface-LoginResponse-082d033e5f946153b2a766cde55a57e59001fc934885914de56666754935a956289af88bd88a8f336a122a49386d7979c1e0aeec0d9913429a6f0d1c8e123975",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\nimport { College } from \"@shared/services/college/collage.model\"\r\nimport { IUser } from \"@shared/services/user-logged/user-logged.model\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  user: IUser,\r\n  colleges: College[],\r\n  calendar: [],\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "colleges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "College[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QuillInstance",
            "id": "interface-QuillInstance-f56b82c1c82cb531a673d2914c07bc3dc8ca6d2da6117cd6db633b5d3ddb7b45a7834c1d46caf5883083697b25517212b472376040bfb88da931b663c6c4c8bf",
            "file": "src/app/shared/components/text-editor/counter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import 'quill'\r\nimport Quill from 'quill'\r\n\r\nexport interface Config {\r\n  container: string\r\n  unit: 'word' | 'char'\r\n}\r\n\r\nexport interface QuillInstance {\r\n  on: any\r\n  getText: any\r\n}\r\n\r\nexport default class Counter {\r\n  quill: QuillInstance\r\n  options: Config\r\n\r\n  constructor(quill: Quill, options: any) {\r\n    this.quill = quill\r\n    this.options = options\r\n\r\n    const container = document.querySelector(this.options.container)\r\n\r\n    this.quill.on('editor-change', () => {\r\n      const length = this.calculate()\r\n\r\n      container!.innerHTML = length + ' ' + this.options.unit + 's'\r\n    })\r\n  }\r\n\r\n  calculate() {\r\n    const text = this.quill.getText().trim()\r\n\r\n    if (this.options.unit === 'word') {\r\n      return !text ? 0 : text.split(/\\s+/).length\r\n    }\r\n    return text.length\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "getText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "on",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QuizCreateRequest",
            "id": "interface-QuizCreateRequest-e9335801be62facec1c37d99bdf1d4490ae2566a51cb28a76c228713b6de8f17f010de9d2c4bcc253c88f2008b680ff44563ebd2cda2f7118b341616970cc06f",
            "file": "src/app/shared/services/quiz/quiz.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateQuizOption {\r\n  title: string;\r\n  correctOptions: boolean;\r\n  quizId: number;\r\n}\r\n\r\nexport interface QuizOption {\r\n  correctOptions: boolean,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  title: string,\r\n  quizId: number,\r\n  id: number,\r\n}\r\n\r\nexport interface QuizCreateRequest {\r\n  name: string;\r\n  courseId: number;\r\n  quizOptions: CreateQuizOption[];\r\n}\r\n\r\nexport interface QuizCreateResponse {\r\n  id: number,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  name: string,\r\n  courseId: number,\r\n  quizOptions: QuizOption[]\r\n}\r\n",
            "properties": [
                {
                    "name": "courseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "quizOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateQuizOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QuizCreateResponse",
            "id": "interface-QuizCreateResponse-e9335801be62facec1c37d99bdf1d4490ae2566a51cb28a76c228713b6de8f17f010de9d2c4bcc253c88f2008b680ff44563ebd2cda2f7118b341616970cc06f",
            "file": "src/app/shared/services/quiz/quiz.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateQuizOption {\r\n  title: string;\r\n  correctOptions: boolean;\r\n  quizId: number;\r\n}\r\n\r\nexport interface QuizOption {\r\n  correctOptions: boolean,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  title: string,\r\n  quizId: number,\r\n  id: number,\r\n}\r\n\r\nexport interface QuizCreateRequest {\r\n  name: string;\r\n  courseId: number;\r\n  quizOptions: CreateQuizOption[];\r\n}\r\n\r\nexport interface QuizCreateResponse {\r\n  id: number,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  name: string,\r\n  courseId: number,\r\n  quizOptions: QuizOption[]\r\n}\r\n",
            "properties": [
                {
                    "name": "courseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "quizOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuizOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QuizOption",
            "id": "interface-QuizOption-e9335801be62facec1c37d99bdf1d4490ae2566a51cb28a76c228713b6de8f17f010de9d2c4bcc253c88f2008b680ff44563ebd2cda2f7118b341616970cc06f",
            "file": "src/app/shared/services/quiz/quiz.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateQuizOption {\r\n  title: string;\r\n  correctOptions: boolean;\r\n  quizId: number;\r\n}\r\n\r\nexport interface QuizOption {\r\n  correctOptions: boolean,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  title: string,\r\n  quizId: number,\r\n  id: number,\r\n}\r\n\r\nexport interface QuizCreateRequest {\r\n  name: string;\r\n  courseId: number;\r\n  quizOptions: CreateQuizOption[];\r\n}\r\n\r\nexport interface QuizCreateResponse {\r\n  id: number,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  name: string,\r\n  courseId: number,\r\n  quizOptions: QuizOption[]\r\n}\r\n",
            "properties": [
                {
                    "name": "correctOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "quizId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterRequest",
            "id": "interface-RegisterRequest-082d033e5f946153b2a766cde55a57e59001fc934885914de56666754935a956289af88bd88a8f336a122a49386d7979c1e0aeec0d9913429a6f0d1c8e123975",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\nimport { College } from \"@shared/services/college/collage.model\"\r\nimport { IUser } from \"@shared/services/user-logged/user-logged.model\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  user: IUser,\r\n  colleges: College[],\r\n  calendar: [],\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [
                {
                    "name": "confirm_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "documentNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roles",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterResponse",
            "id": "interface-RegisterResponse-082d033e5f946153b2a766cde55a57e59001fc934885914de56666754935a956289af88bd88a8f336a122a49386d7979c1e0aeec0d9913429a6f0d1c8e123975",
            "file": "src/app/pages/auth/services/auth/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\nimport { College } from \"@shared/services/college/collage.model\"\r\nimport { IUser } from \"@shared/services/user-logged/user-logged.model\"\r\n\r\nexport interface LoginRequest {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string,\r\n  user: IUser,\r\n  colleges: College[],\r\n  calendar: [],\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  confirm_password: string,\r\n  documentNumber: string,\r\n  password: string,\r\n  email: string,\r\n  name: string,\r\n  role: Roles,\r\n}\r\n\r\nexport interface RegisterResponse extends LoginResponse {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "LoginResponse"
            ]
        },
        {
            "name": "ResponseCollegelist",
            "id": "interface-ResponseCollegelist-ad0e6f66148d24dd4aa867385c9911e0718515f6d0c34d22f0e6ed3c4b3d9cf612fdf3219035f4927064232a92e55dbbd3e508e6c527c4f06a52215e6f52642b",
            "file": "src/app/shared/services/college/collage.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICourse } from \"../course/course.model\"\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\nexport interface CollegeStyle {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface ResponseCollegelist extends College { }\r\n\r\nexport interface CollegeRequest {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  thumb: any,\r\n  name: string,\r\n}\r\n\r\nexport interface CollegeResponse {\r\n  secundaryColor: string,\r\n  primaryColor: string,\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  collegeId: number,\r\n  thumb: string,\r\n  id: number,\r\n}\r\n\r\nexport interface College {\r\n  CollegeStyle: CollegeStyle[]\r\n  createdAt: string,\r\n  updatedAt: string,\r\n  Course: ICourse[],\r\n  userId: number,\r\n  name: string,\r\n  id: number,\r\n}\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "College"
            ]
        },
        {
            "name": "UpdateProfileRequest",
            "id": "interface-UpdateProfileRequest-5b50e91c618145349a098752baddeef8de1a786da84bfa10dc20e4be2cf2ce8e4d0a080f42e765e54e8523aa9fbb7720d06387aef95ef8928acc50c5aca37ef8",
            "file": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\n\r\nexport interface GetProfileRequest {\r\n  id: string\r\n}\r\n\r\nexport interface GetProfileResponse {\r\n  email: string,\r\n  name: string,\r\n  role: string,\r\n  id: number\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  documentNumber?: string,\r\n  celphone?: string,\r\n  photo?: string,\r\n  email?: string,\r\n  name?: string,\r\n}\r\n\r\nexport interface UpdateProfileResponse extends GetProfileResponse {\r\n  photo: string,\r\n  role: Roles\r\n}\r\n",
            "properties": [
                {
                    "name": "celphone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "documentNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateProfileResponse",
            "id": "interface-UpdateProfileResponse-5b50e91c618145349a098752baddeef8de1a786da84bfa10dc20e4be2cf2ce8e4d0a080f42e765e54e8523aa9fbb7720d06387aef95ef8928acc50c5aca37ef8",
            "file": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\"\r\n\r\nexport interface GetProfileRequest {\r\n  id: string\r\n}\r\n\r\nexport interface GetProfileResponse {\r\n  email: string,\r\n  name: string,\r\n  role: string,\r\n  id: number\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  documentNumber?: string,\r\n  celphone?: string,\r\n  photo?: string,\r\n  email?: string,\r\n  name?: string,\r\n}\r\n\r\nexport interface UpdateProfileResponse extends GetProfileResponse {\r\n  photo: string,\r\n  role: Roles\r\n}\r\n",
            "properties": [
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roles",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "GetProfileResponse"
            ]
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-d182396709c5a84c638055668b318e3305af4adca529d77af64d3f09ff12ff2f094f58a15145131f3f161105225936f81bb65c2938aa0588e62e0427cbd14996",
            "file": "src/app/pages/auth/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#tokenService",
                    "defaultValue": "inject(TokenService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "payload",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RegisterResponse>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\nimport { LoginRequest, LoginResponse, RegisterRequest, RegisterResponse } from './auth.model';\r\nimport { TokenService } from '@shared/services/token/token.service';\r\nimport { UserLoggedService } from '@shared/services/user-logged/user-logged.service';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  #userService = inject(UserLoggedService);\r\n  #tokenService = inject(TokenService);\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  login({ email, password }: LoginRequest): Observable<LoginResponse> {\r\n    return this.#http.post<LoginResponse>(`${this.#baseUrl}/auth/login`, { email, password })\r\n      .pipe(\r\n        tap(({ access_token }) => this.#tokenService.token = access_token),\r\n        tap(response => {\r\n          this.#userService.seUserLogged(response);\r\n        })\r\n      )\r\n  }\r\n\r\n  register(payload: RegisterRequest): Observable<RegisterResponse> {\r\n    let url = `${this.#baseUrl}/auth/register/`;\r\n    url += payload.role.toLocaleLowerCase();\r\n\r\n    return this.#http.post<RegisterResponse>(url, payload)\r\n      .pipe(\r\n        tap(({ access_token }) => this.#tokenService.token = access_token),\r\n        tap(response => {\r\n          this.#userService.seUserLogged(response as any);\r\n        })\r\n      )\r\n  }\r\n\r\n  logout() {\r\n    this.#tokenService.clearToken();\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CollegeService",
            "id": "injectable-CollegeService-3762458ca801aff3e31bfd71281bd88bbb1ff5e2a6051628561ee95e2d98ee353ba92c045bc765270c6f663a67355fe060c4fc13d8403362350e6284ea23ad30",
            "file": "src/app/shared/services/college/college.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCollege",
                    "args": [
                        {
                            "name": "payload",
                            "type": "CollegeRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CollegeResponse>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "CollegeRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCollages",
                    "args": [
                        {
                            "name": "collegeId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<College>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collegeId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCollagesInMemory",
                    "args": [
                        {
                            "name": "collegeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "College",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collegeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchCollagesByCollegeId",
                    "args": [
                        {
                            "name": "collegeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ResponseCollegelist>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collegeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchCollagesByUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ResponseCollegelist[]>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCollegeInMemory",
                    "args": [
                        {
                            "name": "college",
                            "type": "College",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "college",
                            "type": "College",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\nimport { College, CollegeRequest, CollegeResponse, ResponseCollegelist } from './collage.model';\r\nimport { environment } from 'environments/environment';\r\nimport { Utils } from '../utils/utils.service';\r\nimport { UserLoggedService } from '../user-logged/user-logged.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CollegeService {\r\n  #userService = inject(UserLoggedService);\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  getCollages(collegeId: string | number): Observable<College> {\r\n    return new Observable((subscribe) => {\r\n      const id = `${collegeId}`;\r\n      const inMemory = this.getCollagesInMemory(id);\r\n\r\n      if (inMemory) {\r\n        subscribe.next(inMemory)\r\n        subscribe.complete();\r\n        return;\r\n      }\r\n\r\n      this.searchCollagesByCollegeId(id).subscribe({\r\n        next: (response) => {\r\n          subscribe.next(response);\r\n          subscribe.complete();\r\n        },\r\n        error: (error) => {\r\n          subscribe.error(error);\r\n          subscribe.complete();\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  getCollagesInMemory(collegeId: string): College {\r\n    const user = this.#userService.user();\r\n    const college = user.colleges.filter((college) => `${college.id}` === collegeId);\r\n    return college[0] ?? null;\r\n  }\r\n\r\n  searchCollagesByCollegeId(collegeId: string): Observable<ResponseCollegelist> {\r\n    return this.#http.get<ResponseCollegelist>(`${this.#baseUrl}/college/${collegeId}`).pipe(\r\n      tap(res => this.updateCollegeInMemory(res))\r\n    );\r\n  }\r\n\r\n  searchCollagesByUser(): Observable<ResponseCollegelist[]> {\r\n    return this.#http.get<ResponseCollegelist[]>(`${this.#baseUrl}/college`).pipe(\r\n      // tap(res => this.updateCollegeInMemory(res))\r\n    );\r\n  }\r\n\r\n  createCollege(payload: CollegeRequest): Observable<CollegeResponse> {\r\n    const formatedPayload = Utils.convertToFormData(payload);\r\n    return this.#http.post<CollegeResponse>(`${this.#baseUrl}/college`, formatedPayload).pipe(\r\n      // tap(res => this.updateCollegeInMemory(res))\r\n    );\r\n  }\r\n\r\n\r\n  updateCollegeInMemory(college: College): void {\r\n    const user = this.#userService.user();\r\n    let currentCollege = user.colleges.filter(({ id }) => id === college.id)[0];\r\n    currentCollege ? currentCollege = college : user.colleges.push(college);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CourseService",
            "id": "injectable-CourseService-adf18abdf57d91e02c9a0d3b66f39d4d3c4828749056113b6361bbe5ecd337cbbf5890db52a45f52ee0f5b15e0e8d91791f6b8224de02fe561cab40cf33526b6",
            "file": "src/app/shared/services/course/course.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "payload",
                            "type": "IRequestCourseCreate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResponseCourseCreate>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "IRequestCourseCreate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContent",
                    "args": [
                        {
                            "name": "coursesId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coursesId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCourse",
                    "args": [
                        {
                            "name": "collegeId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICourse>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collegeId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCourseInMemory",
                    "args": [
                        {
                            "name": "coursesId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICourse",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coursesId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCoursesInMemory",
                    "args": [],
                    "optional": false,
                    "returnType": "ICourse[]",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchCourseById",
                    "args": [
                        {
                            "name": "coursesId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResponseCourseGetById>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coursesId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCourseInMemory",
                    "args": [
                        {
                            "name": "course",
                            "type": "ICourse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "course",
                            "type": "ICourse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable, switchMap, tap } from 'rxjs';\r\n\r\nimport { ICourse, IRequestCourseCreate, IResponseCourseCreate, IResponseCourseGetById } from './course.model';\r\nimport { UserLoggedService } from '../user-logged/user-logged.service';\r\nimport { environment } from 'environments/environment';\r\nimport { Utils } from '../utils/utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseService {\r\n  #userService = inject(UserLoggedService);\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  create(payload: IRequestCourseCreate): Observable<IResponseCourseCreate> {\r\n    const formatedPayload = Utils.convertToFormData(payload);\r\n    return this.#http.post<IResponseCourseCreate>(`${this.#baseUrl}/course`, formatedPayload).pipe(\r\n      tap((res) => this.updateCourseInMemory(res))\r\n    )\r\n  }\r\n\r\n  getCourse(collegeId: string | number): Observable<ICourse> {\r\n    return new Observable((subscribe) => {\r\n      const id = `${collegeId}`;\r\n      const inMemory = this.getCourseInMemory(id);\r\n\r\n      if (inMemory) {\r\n        subscribe.next(inMemory)\r\n        subscribe.complete();\r\n        return;\r\n      }\r\n\r\n      this.searchCourseById(id).subscribe({\r\n        next: (response) => {\r\n          subscribe.next(response);\r\n          subscribe.complete();\r\n        },\r\n        error: (error) => {\r\n          subscribe.error(error);\r\n          subscribe.complete();\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  getCourseInMemory(coursesId: string): ICourse {\r\n    const courses = this.getCoursesInMemory();\r\n    const course = courses.filter(course => course.id === parseInt(coursesId));\r\n    return course[0] ?? null;\r\n  }\r\n\r\n  updateCourseInMemory(course: ICourse): void {\r\n    const user = this.#userService.user();\r\n    const college = user.colleges.filter((college) => college.id === course.collegeId)[0];\r\n\r\n    let currentCourse = college.Course.filter((college) => college.id === course.id)[0];\r\n    currentCourse ? currentCourse = course : user.colleges.push(college);\r\n  }\r\n\r\n  getCoursesInMemory(): ICourse[] {\r\n    const user = this.#userService.user();\r\n    return user.colleges.reduce<ICourse[]>((acumulator, current) => {\r\n      if (current.Course.length) acumulator.push(...current.Course);\r\n      return acumulator\r\n    }, []);\r\n  }\r\n\r\n  getContent(coursesId: string | number): Observable<any> {\r\n    return this.#http.get<any>(`${this.#baseUrl}/course/${coursesId}/content`);\r\n  }\r\n\r\n  searchCourseById(coursesId: string): Observable<IResponseCourseGetById> {\r\n    return this.#http.get<IResponseCourseGetById>(`${this.#baseUrl}/course/${coursesId}`);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EncriptService",
            "id": "injectable-EncriptService-bf521342c69a90e70691145a57cf7060eb11e6cba8163a3a7784d2a34d3c7ae02b6fce01e50cbb1615acff96ccab8c2bfb49d2668e7e1974a0fe68c869b8d11a",
            "file": "src/app/shared/services/encript/encript.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "decript",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encript",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EncriptService {\r\n\r\n  encript(value: string) {\r\n    return of(btoa(value))\r\n  }\r\n\r\n  decript(value: string) {\r\n    return of(atob(value))\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LessonService",
            "id": "injectable-LessonService-37d844889d4cf820b718d66f6cb3c655e933e6ce92cc618523a2b5a2996992df372afe710a54d4baa4a77500c8e2bbfa1cd34d58a49a1b8b05efac3735062e8e",
            "file": "src/app/shared/services/lesson/lesson.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "payload",
                            "type": "LessonCreateRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "LessonCreateRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "lessonId",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetLessonResponse>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lessonId",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Utils } from '../utils/utils.service';\r\nimport { GetLessonResponse, LessonCreateRequest } from './lesson.model';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LessonService {\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  create(payload: LessonCreateRequest): Observable<any> {\r\n    const formatedPayload = Utils.convertToFormData(payload);\r\n    return this.#http.post(`${this.#baseUrl}/lesson`, formatedPayload);\r\n  }\r\n\r\n  get(lessonId: number | string): Observable<GetLessonResponse> {\r\n    return this.#http.get<GetLessonResponse>(`${this.#baseUrl}/lesson/${lessonId}`);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PostService",
            "id": "injectable-PostService-d7c0e19cd53e08d9cb96961f4181657ab6404cd3f4a7d8b75ac4a69f7698efed8d6ad753204b31e11585137d2e4cbb59e67c1c514d65095be59a59f0feb472dd",
            "file": "src/app/shared/services/post/post.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "payload",
                            "type": "ICreatePostRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICreatePostResponse>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "ICreatePostRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { environment } from 'environments/environment';\r\nimport { ICreatePostRequest, ICreatePostResponse } from './post.model';\r\nimport { Observable, timer } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PostService {\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  create(payload: ICreatePostRequest): Observable<ICreatePostResponse> {\r\n    return this.#http.post<ICreatePostResponse>(`${this.#baseUrl}/post`, payload);\r\n  }\r\n\r\n  list(): Observable<any[]> {\r\n    return this.#http.get<ICreatePostResponse[]>(`${this.#baseUrl}/post`);\r\n  }\r\n\r\n  get(id: string): Observable<any> {\r\n    return this.#http.get<ICreatePostResponse>(`${this.#baseUrl}/post/${id}`);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-d7447c884f3c7164fceea1588aaff29f0a8567cfda8b1ba0aec4ee94957a2182d8776083b868af6001a506863ee2db3e28c08f2ffd4c72abb4d3a026728aacac",
            "file": "src/app/pages/logged-area/pages/profile/services/profile/profile.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "payload",
                            "type": "GetProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetProfileResponse>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "GetProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProfile",
                    "args": [
                        {
                            "name": "payload",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateProfileResponse>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  GetProfileRequest,\r\n  GetProfileResponse,\r\n  UpdateProfileRequest,\r\n  UpdateProfileResponse\r\n} from './profile.model';\r\nimport { environment } from 'environments/environment';\r\nimport { Utils } from '@shared/services/utils/utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  getProfile(payload: GetProfileRequest): Observable<GetProfileResponse> {\r\n    return this.#http.get<GetProfileResponse>(`${this.#baseUrl}/users/${payload.id}`)\r\n  }\r\n\r\n  updateProfile(payload: UpdateProfileRequest): Observable<UpdateProfileResponse> {\r\n    const formatedPayload = Utils.convertToFormData(payload);\r\n    return this.#http.patch<UpdateProfileResponse>(`${this.#baseUrl}/users/`, formatedPayload)\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "QuizService",
            "id": "injectable-QuizService-e0db7fb9600816a41ebc7b92247ab633fb3485cf0db530b6b6a7a82299c8047540ef1da86f19a4e83409cb00011ecaec288e513130faf148fb7f128591d53c5d",
            "file": "src/app/shared/services/quiz/quiz.service.ts",
            "properties": [
                {
                    "name": "#baseUrl",
                    "defaultValue": "environment.url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "payload",
                            "type": "QuizCreateRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<QuizCreateResponse>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "QuizCreateRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { QuizCreateRequest, QuizCreateResponse } from './quiz.model';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n  #http = inject(HttpClient);\r\n  #baseUrl = environment.url;\r\n\r\n  create(payload: QuizCreateRequest): Observable<QuizCreateResponse> {\r\n    return this.#http.post<QuizCreateResponse>(`${this.#baseUrl}/quiz`, payload);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-f7dc91ab6de795108e11ee1663f5fc1d5f2f849a313aa219c045a356a0453fa4d0b6512f48e2fbc6a2ca366299aca7dcc6397924b81c0b3b0748548048077e70",
            "file": "src/app/shared/services/token/token.service.ts",
            "properties": [
                {
                    "name": "#keyLocalStorage",
                    "defaultValue": "environment.token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n  #keyLocalStorage = environment.token;\r\n\r\n  set token(token: string) {\r\n    localStorage.setItem(this.#keyLocalStorage, token);\r\n  }\r\n\r\n  get token(): string {\r\n    return localStorage.getItem(this.#keyLocalStorage) ?? '';\r\n  }\r\n\r\n  clearToken() {\r\n    localStorage.removeItem(this.#keyLocalStorage)\r\n  }\r\n}\r\n",
            "accessors": {
                "token": {
                    "name": "token",
                    "setSignature": {
                        "name": "token",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "token",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 10,
                        "jsdoctags": [
                            {
                                "name": "token",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "token",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserLoggedService",
            "id": "injectable-UserLoggedService-235bd3381596ad2261c0234754f63dc100813d9334849f82b90a54271f45819fd6500e5ba536c32bb6b911fafa7ada8f473fe33844e452b7a307222b355faf65",
            "file": "src/app/shared/services/user-logged/user-logged.service.ts",
            "properties": [
                {
                    "name": "#keyLocalStorage",
                    "defaultValue": "environment.user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#tokenService",
                    "defaultValue": "inject(TokenService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "storageUser",
                    "defaultValue": "localStorage.getItem(this.#keyLocalStorage) ?? '{}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "user",
                    "defaultValue": "signal<IUserLogged>(JSON.parse(this.storageUser))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "seUserLogged",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUserLogged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUserLogged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatetUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, signal } from '@angular/core';\r\nimport { IUser, IUserLogged } from './user-logged.model';\r\nimport { Router } from '@angular/router';\r\nimport { TokenService } from '../token/token.service';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserLoggedService {\r\n  #keyLocalStorage = environment.user;\r\n  #tokenService = inject(TokenService);\r\n  #router = inject(Router);\r\n  storageUser: string = localStorage.getItem(this.#keyLocalStorage) ?? '{}';\r\n  user = signal<IUserLogged>(JSON.parse(this.storageUser));\r\n\r\n  seUserLogged(user: IUserLogged) {\r\n    this.user.set(user);\r\n    localStorage.setItem(this.#keyLocalStorage, JSON.stringify(this.user()));\r\n  }\r\n\r\n  updatetUser(user: IUser) {\r\n    this.user.update((userLogged) => {\r\n      userLogged.user = user;\r\n      return userLogged\r\n    });\r\n    localStorage.setItem(this.#keyLocalStorage, JSON.stringify(this.user()));\r\n  }\r\n\r\n  logout() {\r\n    this.user.update(() => null as any);\r\n    this.#tokenService.clearToken();\r\n    localStorage.removeItem(this.#keyLocalStorage);\r\n    this.#router.navigateByUrl(\"/\");\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CollegeForm",
            "id": "class-CollegeForm-6935111cd81d122a4d8dd65c66b6b4ea85dc314fb05b4e0d2b7107653217f69ea9463a9fad19fe5ccbcd0522aefe55d4f00d19c94e7b1cb5387dde5285df79e3",
            "file": "src/app/pages/logged-area/pages/college/model/college.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CollegeForm {\r\n  secundaryColor = \"\"\r\n  primaryColor = \"\"\r\n  thumb = \"\"\r\n  name = \"\"\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "primaryColor",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "secundaryColor",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "thumb",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Counter",
            "id": "class-Counter-f56b82c1c82cb531a673d2914c07bc3dc8ca6d2da6117cd6db633b5d3ddb7b45a7834c1d46caf5883083697b25517212b472376040bfb88da931b663c6c4c8bf",
            "file": "src/app/shared/components/text-editor/counter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import 'quill'\r\nimport Quill from 'quill'\r\n\r\nexport interface Config {\r\n  container: string\r\n  unit: 'word' | 'char'\r\n}\r\n\r\nexport interface QuillInstance {\r\n  on: any\r\n  getText: any\r\n}\r\n\r\nexport default class Counter {\r\n  quill: QuillInstance\r\n  options: Config\r\n\r\n  constructor(quill: Quill, options: any) {\r\n    this.quill = quill\r\n    this.options = options\r\n\r\n    const container = document.querySelector(this.options.container)\r\n\r\n    this.quill.on('editor-change', () => {\r\n      const length = this.calculate()\r\n\r\n      container!.innerHTML = length + ' ' + this.options.unit + 's'\r\n    })\r\n  }\r\n\r\n  calculate() {\r\n    const text = this.quill.getText().trim()\r\n\r\n    if (this.options.unit === 'word') {\r\n      return !text ? 0 : text.split(/\\s+/).length\r\n    }\r\n    return text.length\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "quill",
                        "type": "Quill",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "quill",
                        "type": "Quill",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Config",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "quill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuillInstance",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "calculate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CourseForm",
            "id": "class-CourseForm-0eabf8cf20bf657b029731b4ab00398f87a2e5fdceb67fd548500dd253f24feab8e6c8b9b88cc9787830bd33326dc4c10fb72ef7027508bdae5720d7fce05462",
            "file": "src/app/shared/services/course/course.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface ICourse {\r\n  createdAt: string\r\n  collegeId: number\r\n  updatedAt: string\r\n  thumb: string\r\n  name: string\r\n  id: number\r\n  content: any\r\n}\r\n\r\nexport class CourseForm {\r\n  thumb = \"\"\r\n  name = \"\"\r\n  id = -1\r\n}\r\n\r\nexport interface IRequestCourseCreate {\r\n  thumb: any,\r\n  name: string,\r\n  collegeId: number\r\n}\r\n\r\nexport interface IResponseCourseCreate extends ICourse { }\r\nexport interface IResponseCourseGetById extends ICourse { }\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "thumb",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateCourse",
            "id": "class-CreateCourse-28fb3ddb0fb7d825aaa96973b40c72a8f270e9beecfc9027165c61a451211a0402a7bb8dc9635bc67d7e824473b3f81c8b6b07382b79ce09f95b9499bc5d5242",
            "file": "src/app/pages/logged-area/pages/create-course/create-course.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IUser } from \"@shared/services/user-logged/user-logged.model\"\r\n\r\nexport class CreateCourse {\r\n  // users: IUser[] = []\r\n  collegeId = 0\r\n  thumb = \"\"\r\n  name = \"\"\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "collegeId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "thumb",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LessonForm",
            "id": "class-LessonForm-23bd9d80c1774e15d2f282e576a3be98a871843f6bd3f4a3cc3eff15398853b254a1064aaa1f7a2f38bf83e053e9886294886cb74e9414e12e93cedbadbea011",
            "file": "src/app/pages/logged-area/pages/lesson/lesson.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Component, inject, signal } from '@angular/core';\nimport { QuillEditorComponent } from 'ngx-quill';\n\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\nimport { InputRadioComponent } from '@shared/components/input-radio/input-radio.component';\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { LessonCreateRequest } from '@shared/services/lesson/lesson.model';\nimport { LessonService } from '@shared/services/lesson/lesson.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { LessonFormLoadingComponent } from './lesson-form-loading/lesson-form-loading.component';\n\nexport class LessonForm implements LessonCreateRequest {\n  content: any = \"\";\n  description = \"\";\n  urlContent = \"\";\n  courseId = 0;\n  title = \"\";\n  fileVideo: any = null;\n}\n\n@Component({\n  selector: 'app-lesson',\n  imports: [\n    QuillEditorComponent,\n    ReactiveFormsModule,\n    InputRadioComponent,\n    ButtonComponent,\n    FormsModule,\n    InputTextComponent,\n    InputUploadComponent,\n    AlertComponent,\n    ButtonBackComponent,\n    LessonFormLoadingComponent\n  ],\n  templateUrl: './lesson.component.html',\n  styleUrl: './lesson.component.scss'\n})\nexport class LessonComponent {\n  #sanitizer = inject(DomSanitizer);\n  #router = inject(ActivatedRoute);\n  #lesson = inject(LessonService);\n  alertTypes = AlertTypes;\n  alertType = AlertTypes.success;\n  payload = new LessonForm();\n  alertMessage = signal(\"\");\n  loading = signal(true);\n  videoType = \"\";\n\n  public ngOnInit(): void {\n    this.#router.paramMap.subscribe({\n      next: params => {\n        const collegeId = Number(params.get('id'));\n        this.payload.courseId = collegeId;\n\n        const lessonId = params.get('lessonId');\n        if (!lessonId) return this.loading.set(false);\n\n        this.#lesson.get(lessonId).subscribe({\n          next: (res) => {\n            this.payload.title = res.title;\n            this.payload.description = res.description;\n            this.payload.urlContent = res.urlContent;\n\n            if (this.payload.urlContent) {\n              this.videoType = \"link\";\n            }\n\n            this.loading.set(false);\n          },\n          error: (error: HttpErrorResponse) => {\n            this.alertType = AlertTypes.error;\n            this.alertMessage.set(error.error.message);\n            this.loading.set(false);\n          }\n        })\n      }\n    });\n  }\n\n  byPassHTML(html: string) {\n    return\n  }\n\n  create() {\n    const payload = this.payload;\n\n    if (payload.content) {\n      payload.content = this.#sanitizer.bypassSecurityTrustHtml(payload.content);\n    }\n\n    if (payload.fileVideo) {\n      payload.fileVideo = this.payload?.fileVideo?.file\n    }\n\n    this.#lesson.create(payload).subscribe({\n      next: () => {\n        this.alertType = AlertTypes.success;\n\n        this.alertMessage.set('Aula criada com sucesso!!');\n\n      },\n      error: (error: HttpErrorResponse) => {\n        this.alertType = AlertTypes.error;\n        this.alertMessage.set(error.error.message);\n      }\n    })\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "content",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "courseId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "description",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fileVideo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "urlContent",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "LessonCreateRequest"
            ]
        },
        {
            "name": "PayloadRequest",
            "id": "class-PayloadRequest-90a04a221f4b147c485c01ca65b0fd85049e12373de4a60c3b3ff77c65ef2aba3316bf9e6cae15970840ae85d32989e728455908ab3482e99cd5606c139a328f",
            "file": "src/app/shared/services/encript/payload.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { enableEncryption, encript } from \"@shared/decorators/encript/encript.decorator\";\r\n\r\n@enableEncryption()\r\nexport class PayloadRequest {\r\n  email = \"\";\r\n\r\n  password: any;\r\n\r\n  confirmPassword: any;\r\n\r\n  documentNumber: any;\r\n\r\n  documentType: any;\r\n\r\n  person: Person = new Person();\r\n}\r\n\r\nexport class Person {\r\n  @encript\r\n  name: any;\r\n\r\n  @encript\r\n  surname: any;\r\n\r\n  idade: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "documentNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "email",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "person",
                    "defaultValue": "new Person()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "rawdescription": "\n",
            "methods": [],
            "indexSignatures": [],
            "extends": []
        },
        {
            "name": "Person",
            "id": "class-Person-90a04a221f4b147c485c01ca65b0fd85049e12373de4a60c3b3ff77c65ef2aba3316bf9e6cae15970840ae85d32989e728455908ab3482e99cd5606c139a328f",
            "file": "src/app/shared/services/encript/payload.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { enableEncryption, encript } from \"@shared/decorators/encript/encript.decorator\";\r\n\r\n@enableEncryption()\r\nexport class PayloadRequest {\r\n  email = \"\";\r\n\r\n  password: any;\r\n\r\n  confirmPassword: any;\r\n\r\n  documentNumber: any;\r\n\r\n  documentType: any;\r\n\r\n  person: Person = new Person();\r\n}\r\n\r\nexport class Person {\r\n  @encript\r\n  name: any;\r\n\r\n  @encript\r\n  surname: any;\r\n\r\n  idade: any;\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "idade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "encript"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "encript"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RegisterPayload",
            "id": "class-RegisterPayload-70b913107e7ab51933311f855699ab8f50fbdf4e41016303548191f0b9fb84dfe2b7ad8faafccdceb2a66736561b0602351059efabb3650abdcc98adf606d54b",
            "file": "src/app/pages/auth/register/register.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Roles } from \"@shared/enums/roles.enum\";\r\nimport { RegisterRequest } from \"../services/auth/auth.model\";\r\n\r\nexport class RegisterPayload implements RegisterRequest {\r\n  confirm_password!: string;\r\n  documentNumber!: string;\r\n  role = Roles.DIRECTOR;\r\n  password!: string;\r\n  email!: string;\r\n  name!: string;\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "confirm_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "documentNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "role",
                    "defaultValue": "Roles.DIRECTOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RegisterRequest"
            ]
        },
        {
            "name": "Utils",
            "id": "class-Utils-465d09e8f55cad7a1dc842a0e934195feff0772bd8b5b1f5d85c09b25db9456cae31dc8c249ccdd6091bcdf2af16c8175e0612c8d4868e93dd3929ed7c9a743f",
            "file": "src/app/shared/services/utils/utils.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Routes } from \"@angular/router\";\r\nimport { IMenu, menus } from \"@shared/data/menus\";\r\n\r\nexport class Utils {\r\n  static readonly byteValue = 1048576;\r\n\r\n  static convertToFormData(form: any) {\r\n    let form_data = new FormData();\r\n\r\n    for (let key in form) form_data.append(key, form[key]);\r\n\r\n    return form_data;\r\n  }\r\n\r\n  static addMounth(date: Date, mounth: number) {\r\n    return new Date(date.setMonth(date.getMonth() + mounth));\r\n  }\r\n\r\n  static subtractMounth(date: Date, mounth: number) {\r\n    return new Date(date.setMonth(date.getMonth() - mounth));\r\n  }\r\n\r\n  static getRouteByRole(role: string): string {\r\n    const urlBaseByRoles: any = { ADMIN: '/backoffice', DIRECTOR: '/backoffice', TEACHER: '/backoffice', STUDENT: '/student' };\r\n\r\n    return urlBaseByRoles[role] || \"/authenticate\";\r\n  }\r\n\r\n  static getMenusByRole(role: string) {\r\n    const urlBaseByRoles: any = { ADMIN: menus.DIRECTOR, DIRECTOR: menus.DIRECTOR, TEACHER: menus.TEACHER, STUDENT: menus.STUDENT };\r\n    return urlBaseByRoles[role] || menus.STUDENT;\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "byteValue",
                    "defaultValue": "1048576",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMounth",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mounth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mounth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToFormData",
                    "args": [
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenusByRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRouteByRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subtractMounth",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mounth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mounth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BackButtonDirective",
            "id": "directive-BackButtonDirective-74a625669c50eda8c4cb05f4a423ed530cd4d31efe4f38f820334a4fb7ca142ec7d8be345b1a293ced70d4439676c5ee79cac6b6e5172fd786ac07264d530837",
            "file": "src/app/shared/directives/back-button/back-button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, inject } from '@angular/core';\nimport { Location } from '@angular/common';\n\n@Directive({\n  selector: '[BackButton]',\n  standalone: true\n})\nexport class BackButtonDirective {\n  location = inject(Location);\n\n  @HostListener('click')\n  onClick() {\n    this.location.back();\n  }\n}\n",
            "selector": "[BackButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "location",
                    "defaultValue": "inject(Location)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "MaskDirective",
            "id": "directive-MaskDirective-6e68e6508f1c47ddf9354a55da65e44e11ba7d797d098a83299305b418c9adc340bfa78ccd5f0f2728d9a5313685806a62342a79acbe798f156690820adbd2d9",
            "file": "src/app/shared/directives/mask/mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[appMask]',\r\n  standalone: true,\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: MaskDirective,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MaskDirective {\r\n  @Input('mask') mask!: string;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  @HostListener('input', ['$event.target.value'])\r\n  onInputChange(value: string): void {\r\n    if (this.mask) {\r\n      const alphanumericValue = value.replace(/[^a-zA-Z0-9]/g, '');\r\n      const maskedValue = this.applyMask(alphanumericValue, this.mask);\r\n      this.renderer.setProperty(this.el.nativeElement, 'value', maskedValue);\r\n    }\r\n  }\r\n\r\n  private applyMask(value: string, mask: string): string {\r\n    let maskedValue = '';\r\n    let valueIndex = 0;\r\n\r\n    for (const char of mask) {\r\n      if (valueIndex >= value.length) break;\r\n\r\n      if (char === 'X') {\r\n        // Apenas números\r\n        while (value[valueIndex] && !/[0-9]/.test(value[valueIndex])) {\r\n          valueIndex++; // Avança até encontrar um número\r\n        }\r\n        maskedValue += value[valueIndex] || '';\r\n        valueIndex++;\r\n      } else if (char === 'A') {\r\n        // Letras ou números\r\n        while (value[valueIndex] && !/[a-zA-Z0-9]/.test(value[valueIndex])) {\r\n          valueIndex++; // Avança até encontrar um caractere válido\r\n        }\r\n        maskedValue += value[valueIndex] || '';\r\n        valueIndex++;\r\n      } else {\r\n        // Caracteres fixos na máscara\r\n        maskedValue += char;\r\n      }\r\n    }\r\n\r\n    return maskedValue;\r\n  }\r\n}\r\n",
            "selector": "[appMask]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: MaskDirective, multi: true\n}",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "mask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target.value"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "applyMask",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mask",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mask",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event.target.value']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabContentDirective",
            "id": "directive-TabContentDirective-2bf2f8435a9928d520054e470564287f4c6fd996fdb19d8ed70a959da51f62d528dab6ac91752852bb77ed6792bac566ec152f54eb6e63f7b460c1b1bc7af3ef",
            "file": "src/app/shared/components/tabs/tabs.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  computed,\r\n  contentChildren,\r\n  Directive,\r\n  OnInit,\r\n  signal,\r\n} from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTabHeader]',\r\n})\r\nexport class TabHeaderDirective { }\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTabContent]',\r\n})\r\nexport class TabContentDirective { }\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './tabs.component.html',\r\n  styleUrl: './tabs.component.scss'\r\n})\r\nexport class TabsComponent {\r\n  tabs = contentChildren(TabComponent)\r\n\r\n  tabsData = computed(() => {\r\n    return this.tabs().map(({ content, header }) => {\r\n      return {\r\n        header,\r\n        content\r\n      };\r\n    });\r\n  });\r\n\r\n  selectedTab = signal(0);\r\n\r\n  selectedTabContent = computed(\r\n    () => this.tabsData()[this.selectedTab()]?.content()\r\n  );\r\n\r\n  onSelectTab(index: number) {\r\n    this.selectedTab.set(index);\r\n  }\r\n}\r\n",
            "selector": "[appTabContent]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "TabHeaderDirective",
            "id": "directive-TabHeaderDirective-2bf2f8435a9928d520054e470564287f4c6fd996fdb19d8ed70a959da51f62d528dab6ac91752852bb77ed6792bac566ec152f54eb6e63f7b460c1b1bc7af3ef",
            "file": "src/app/shared/components/tabs/tabs.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  computed,\r\n  contentChildren,\r\n  Directive,\r\n  OnInit,\r\n  signal,\r\n} from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTabHeader]',\r\n})\r\nexport class TabHeaderDirective { }\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTabContent]',\r\n})\r\nexport class TabContentDirective { }\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './tabs.component.html',\r\n  styleUrl: './tabs.component.scss'\r\n})\r\nexport class TabsComponent {\r\n  tabs = contentChildren(TabComponent)\r\n\r\n  tabsData = computed(() => {\r\n    return this.tabs().map(({ content, header }) => {\r\n      return {\r\n        header,\r\n        content\r\n      };\r\n    });\r\n  });\r\n\r\n  selectedTab = signal(0);\r\n\r\n  selectedTabContent = computed(\r\n    () => this.tabsData()[this.selectedTab()]?.content()\r\n  );\r\n\r\n  onSelectTab(index: number) {\r\n    this.selectedTab.set(index);\r\n  }\r\n}\r\n",
            "selector": "[appTabHeader]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-8a07352184e9c307bb0e7e8e5b6ac592d435c474c3730b26062c4d65c206ab69f81937edd54daebdb1d37d63893177882cf444f920f4b46515008dc8e26687d8",
            "file": "src/app/shared/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "AlertTypes",
                    "decorators": []
                },
                {
                    "name": "hideShadow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hideShadow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\nimport { Component, Input, input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faInfoCircle, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport enum AlertTypes {\n  error = \"error\",\n  warning = \"warning\",\n  success = \"success\",\n  info = \"info\"\n}\n\n@Component({\n  selector: 'alert',\n  standalone: true,\n  imports: [FontAwesomeModule, NgClass],\n  templateUrl: './alert.component.html',\n  styleUrl: './alert.component.scss'\n})\nexport class AlertComponent {\n  @Input() type: AlertTypes = AlertTypes.error;\n  readonly hideShadow = input(false);\n\n  get icon() {\n    return this.type != AlertTypes.success ? faInfoCircle : faCheckCircle\n  };\n}\n",
            "styleUrl": "./alert.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "icon": {
                    "name": "icon",
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<div\n  role=\"alert\"\n  class=\"alert alert-{{ type }}\"\n  [ngClass]=\"{ 'alert-shadow': hideShadow() }\"\n>\n  <fa-icon class=\"alert-icon\" [icon]=\"icon\"></fa-icon>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1363a46cd173307582ca0eaa61ebee6ca1236fcadce5184f3a7a9dc4fe3aab22c177dbab3cbf6e2a2719e5dcd5505af81a19270e9b84793d423ffca2bd330533",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "AsideMenuComponent",
            "id": "component-AsideMenuComponent-192c537d701efe2a88e6a1b5ee8f3a6877cc54d0e7b9036266a70afb1d4f8d89f2678c317e7a13c642b3cf68476543e7023c43756ed6fde75d8d307e35fe4799",
            "file": "src/app/shared/components/aside-menu/aside-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aside-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aside-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "userLogged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "userLogout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "menus",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "menusInstitucional",
                    "defaultValue": "menus.INSTITUTIONAL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userLogged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "userLogout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AvatarProfileComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "IuserToAvatarPipe",
                    "type": "pipe"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, input, output } from '@angular/core';\r\n\r\nimport { AvatarProfileComponent } from '../avatar-profile/avatar-profile.component';\r\n\r\nimport { IuserToAvatarPipe } from '@shared/pipes/iuserToAvatar/iuser-to-avatar.pipe';\r\nimport { IUserLogged } from '@shared/services/user-logged/user-logged.model';\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { Utils } from '@shared/services/utils/utils.service';\r\nimport { IMenu, menus } from '@shared/data/menus';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-aside-menu',\r\n  standalone: true,\r\n  imports: [AvatarProfileComponent, RouterLink, IuserToAvatarPipe, RouterLinkActive, CommonModule],\r\n  templateUrl: './aside-menu.component.html',\r\n  styleUrl: './aside-menu.component.scss'\r\n})\r\nexport class AsideMenuComponent implements OnInit {\r\n  readonly userLogged = input.required<IUserLogged>();\r\n  readonly userLogout = output();\r\n\r\n  menusInstitucional = menus.INSTITUTIONAL;\r\n  menus: IMenu[] = [];\r\n\r\n  ngOnInit(): void {\r\n    const role = this.userLogged().user.role;\r\n    if (role) this.menus = Utils.getMenusByRole(role);\r\n  }\r\n\r\n  logout() {\r\n    this.userLogout.emit()\r\n  }\r\n}\r\n",
            "styleUrl": "./aside-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<aside id=\"aside-menu\" class=\"aside-menu\">\r\n  <a routerLink=\"./home\">\r\n    <app-avatar-profile\r\n      [content]=\"userLogged().user | iuserToAvatar\"\r\n      description=\"Perfil\"\r\n      class=\"aside-menu-avatar\"\r\n      id=\"aside-menu-avatar\"\r\n    />\r\n  </a>\r\n\r\n  <nav class=\"aside-menu-content\">\r\n    <ul>\r\n      @for (menu of menus; track $index) {\r\n      <li>\r\n        <a\r\n          [routerLink]=\"menu.link\"\r\n          [routerLinkActive]=\"menu.link\"\r\n          ariaCurrentWhenActive=\"page\"\r\n        >\r\n          {{ menu.label }}\r\n        </a>\r\n      </li>\r\n      }\r\n    </ul>\r\n\r\n    <ul>\r\n      @for (menu of menusInstitucional; track $index) {\r\n      <li>\r\n        <a\r\n          [routerLink]=\"menu.link\"\r\n          [routerLinkActive]=\"menu.link\"\r\n          ariaCurrentWhenActive=\"page\"\r\n        >\r\n          {{ menu.label }}\r\n        </a>\r\n      </li>\r\n      }\r\n    </ul>\r\n\r\n    <ul>\r\n      <li>\r\n        <button (click)=\"logout()\">Sair</button>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n</aside>\r\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-7f52332ba81391e108a8aa9bafbaecd6720903be59a1f1c72c109f10093749ca6714f72272daf86d022df95079a4fb35dfe6061e54673e8dcb0e3e5d141b777a",
            "file": "src/app/pages/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logo",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { fadeAnimation } from '@shared/animations/fade/fade.animation';\nimport { PayloadRequest } from '@shared/services/encript/payload.model';\n\n@Component({\n  selector: 'app-auth',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n  ],\n  templateUrl: './auth.component.html',\n  styleUrl: './auth.component.scss',\n  animations: [\n    fadeAnimation\n  ]\n})\nexport class AuthComponent implements OnInit {\n  logo = \"\";\n\n  async ngOnInit(): Promise<void> {\n    const payload = new PayloadRequest();\n\n    payload.confirmPassword = \"123\";\n    payload.documentNumber = \"123\";\n    payload.documentType = 13;\n    payload.password = \"123\";\n\n    const payloadFormated = await (payload as any).encript();\n\n    console.log(payloadFormated);\n  }\n}\n",
            "styleUrl": "./auth.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<main class=\"auth\">\n  @if (logo) {\n    <header class=\"auth-header\">\n      <img\n        src=\"/assets/ilustrations/celular-lg.png\"\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\n        priority\n        fetchpriority=\"high\"\n      />\n    </header>\n  }\n\n  <div class=\"auth-image\">\n    <picture>\n      <source\n        srcset=\"/assets/ilustrations/celular-sm.png\"\n        media=\"(max-width: 768px)\"\n      />\n      <img\n        src=\"/assets/ilustrations/celular-lg.png\"\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\n        priority\n        fetchpriority=\"high\"\n      />\n    </picture>\n  </div>\n\n  <div class=\"auth-route\">\n    <div [@fade]=\"outlet.isActivated ? outlet.activatedRoute : ''\">\n      <router-outlet #outlet=\"outlet\"></router-outlet>\n    </div>\n  </div>\n</main>\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-94e31d0112e4684d82a0f9f88393f291bc054fa9d138ba05e0a31fdb4b8a599727ba49a6995cb25c589f1c19b7cc6a9016e06449129cf302ebb1ad491a5a6c89",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "defaultValue": "input<AvatarSizeParam>(AvatarSizeParam.small)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AvatarLoaderComponent",
                    "type": "component"
                },
                {
                    "name": "TrustUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\n\r\nimport { AvatarLoaderComponent } from '../loaders/avatar-loader/avatar-loader.component';\r\nimport { TrustHtmlPipe } from '@shared/pipes/trust-html/trust-html.pipe';\r\nimport { TrustUrlPipe } from '@shared/pipes/trust-url/trust-url.pipe';\r\n\r\nexport interface IAvatarParans {\r\n  src: string\r\n  name: string\r\n}\r\n\r\nexport enum AvatarSizeParam {\r\n  \"small\" = \"sm\",\r\n  \"medium\" = \"md\",\r\n  \"large\" = \"lg\"\r\n}\r\n@Component({\r\n  selector: 'app-avatar',\r\n  standalone: true,\r\n  imports: [AvatarLoaderComponent, TrustUrlPipe],\r\n  templateUrl: './avatar.component.html',\r\n  styleUrl: './avatar.component.scss'\r\n})\r\nexport class AvatarComponent {\r\n  readonly content = input.required<IAvatarParans>();\r\n  readonly size = input<AvatarSizeParam>(AvatarSizeParam.small);\r\n}\r\n",
            "styleUrl": "./avatar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@defer (on viewport) {\r\n<div class=\"avatar {{ size() }}\">\r\n  <img [src]=\"content().src | trustUrl\" [alt]=\"content().name\" />\r\n</div>\r\n} @placeholder {\r\n<app-avatar-loader />\r\n} @loading {\r\n<app-avatar-loader />\r\n} @error {\r\n<app-avatar-loader />\r\n}\r\n"
        },
        {
            "name": "AvatarLoaderComponent",
            "id": "component-AvatarLoaderComponent-c9cd6058347cf5cde0d0412cf421356969b259d0372eaa5f2aa7b37852c324c96f3b756b03bb8c2914bd8dfb3142be1bf54d82ad41f31aebe364431c84854de6",
            "file": "src/app/shared/components/loaders/avatar-loader/avatar-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar-loader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar-loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input<AvatarSizeParam>(AvatarSizeParam.small)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\nimport { AvatarSizeParam } from '@shared/components/avatar/avatar.component';\r\n\r\n@Component({\r\n  selector: 'app-avatar-loader',\r\n  standalone: true,\r\n  templateUrl: './avatar-loader.component.html',\r\n  styleUrl: './avatar-loader.component.scss'\r\n})\r\nexport class AvatarLoaderComponent {\r\n  readonly size = input<AvatarSizeParam>(AvatarSizeParam.small);\r\n}\r\n",
            "styleUrl": "./avatar-loader.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"avatar {{ size() }}\">\r\n  <div class=\"avatar-loader skeleton\"></div>\r\n</div>\r\n"
        },
        {
            "name": "AvatarProfileComponent",
            "id": "component-AvatarProfileComponent-26b0dd7a887a19590d50bb4e12f98c1fd34eff374d208c7f55b253b6fa7b9ed0370bc83420170c6efb88a6bf609038b8227df3d37268e7710fdd2d06f86c4ede",
            "file": "src/app/shared/components/avatar-profile/avatar-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "description",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AvatarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\nimport { AvatarComponent, IAvatarParans } from '../avatar/avatar.component';\r\n\r\n@Component({\r\n  selector: 'app-avatar-profile',\r\n  standalone: true,\r\n  imports: [AvatarComponent],\r\n  templateUrl: './avatar-profile.component.html',\r\n  styleUrl: './avatar-profile.component.scss'\r\n})\r\nexport class AvatarProfileComponent {\r\n  readonly content = input.required<IAvatarParans>();\r\n  readonly description = input('');\r\n}\r\n",
            "styleUrl": "./avatar-profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"avatar-profile\">\r\n  <div class=\"avatar-profile-avatar\">\r\n    <app-avatar [content]=\"content()\" />\r\n  </div>\r\n\r\n  <div class=\"avatar-profile-content\">\r\n    <div class=\"avatar-profile-name\">{{ content().name }}</div>\r\n    <div class=\"avatar-profile-description\">{{ description() }}</div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AvatarProfileLoadingComponent",
            "id": "component-AvatarProfileLoadingComponent-1b182813f69dd7f9611400038002184fe6163f03eb7a60e6e94883e168978c5210713076159b757106f2b2ff055fd357e0920b1dc625f21750fdbd69339d6067",
            "file": "src/app/shared/components/loaders/avatar-profile-loading/avatar-profile-loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar-profile-loading",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar-profile-loading.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "AvatarLoaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AvatarLoaderComponent } from '../avatar-loader/avatar-loader.component';\r\n\r\n@Component({\n    selector: 'app-avatar-profile-loading',\n    imports: [AvatarLoaderComponent],\n    templateUrl: './avatar-profile-loading.component.html',\n    styleUrl: './avatar-profile-loading.component.scss'\n})\r\nexport class AvatarProfileLoadingComponent {\r\n\r\n}\r\n",
            "styleUrl": "./avatar-profile-loading.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"avatar-profile\">\r\n  <div class=\"avatar-profile-avatar\">\r\n    <app-avatar-loader />\r\n  </div>\r\n\r\n  <div class=\"avatar-profile-content\">\r\n    <div class=\"skeleton bar lg\"></div>\r\n    <div class=\"skeleton bar sm\"></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonBackComponent",
            "id": "component-ButtonBackComponent-09a2662e6448ec19ae21d39c65792a2187c8d55696f75a1e88aea7141e0773d941b9cb5ff6bfafef40b3ea08b21f0e0c581c928ebdc4da63315068299dac668c",
            "file": "src/app/shared/components/button-back/button-back.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-back",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button-back.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "faArrowLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "BackButtonDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, input } from '@angular/core';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport { ButtonComponent } from '../button/button.component';\nimport { BackButtonDirective } from '@shared/directives/back-button/back-button.directive';\n\n@Component({\n  standalone: true,\n  selector: 'app-button-back',\n  imports: [ButtonComponent, FontAwesomeModule, BackButtonDirective],\n  templateUrl: './button-back.component.html',\n  styleUrl: './button-back.component.scss'\n})\nexport class ButtonBackComponent {\n  readonly id = input(\"\");\n  icon = faArrowLeft;\n}\n",
            "styleUrl": "./button-back.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-button BackButton [id]=\"id()\" class=\"button-back\">\n  <fa-icon [icon]=\"icon\"></fa-icon>\n</app-button>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d12c1331fbf05a9696916a974b9afdd74b92d5dfdb44fa8958b8a34d491e67ee046a09220513a6fd07ba023d2bd888d03a2b5c4cd131ca821bdf92a14de5e381",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "input(\"primary\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "id",
                    "defaultValue": "input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-button` })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input(\"medium\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "input(\"button\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\n\r\nexport enum ButtonColors {\r\n  \"primary\" = \"primary\",\r\n  \"secundary\" = \"secundary\"\r\n}\r\nexport enum ButtonSize {\r\n  \"small\" = \"small\",\r\n  \"medium\" = \"medium\"\r\n}\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n  readonly color = input(\"primary\");\r\n  readonly size = input(\"medium\");\r\n  readonly id = input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-button` });\r\n  readonly disabled = input(false);\r\n  readonly type = input(\"button\");\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n  [disabled]=\"disabled()\"\r\n  [attr.aria-disabled]=\"disabled()\"\r\n  id=\"{{ id() }}\"\r\n  class=\"button button--{{ color() }} button--{{ size() }}\"\r\n  [type]=\"type()\"\r\n>\r\n  <ng-content></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "ButtonMenuComponent",
            "id": "component-ButtonMenuComponent-bccf64e30e8466b4c16a102de86390543ca1d3fcb18c59f948c9fa7dda416dfb652608e5d1233117ea81232d6fa1495adf5b2f59c16bcbb582e48adb666146a0",
            "file": "src/app/shared/components/button-menu/button-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-button-menu',\n    imports: [NgClass],\n    templateUrl: './button-menu.component.html',\n    styleUrl: './button-menu.component.scss'\n})\nexport class ButtonMenuComponent {\n  @Input() isOpen = false\n}\n",
            "styleUrl": "./button-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  class=\"button-menu\"\n  (click)=\"isOpen = !isOpen\"\n  [ngClass]=\"{\n    close: !isOpen,\n    open: isOpen\n  }\"\n>\n  <span class=\"bar\"></span>\n  <span class=\"bar\"></span>\n  <span class=\"bar\"></span>\n</button>\n"
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-cbe7c63c31c970d7f3de5a397e3f0425e461322146c40ae81253aa0c7deee8b495cc64e0ae7fb9e96a84944e2a79e5aa3e324d0fb48622cd42ef3456a17897e3",
            "file": "src/app/shared/components/calendar/calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-calendar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDay",
                    "defaultValue": "signal(new Date())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "days",
                    "defaultValue": "computed(() => this.generateDays())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "daysInWeek",
                    "defaultValue": "['D', 'S', 'T', 'Q', 'Q', 'S', 'S']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "month",
                    "defaultValue": "computed(() => this.getMonth())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nextIcon",
                    "defaultValue": "faAngleRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "prevIcon",
                    "defaultValue": "faAngleLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectDay",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "year",
                    "defaultValue": "computed(() => this.getYear())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "generateDays",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getYear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "CalendarDayComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe, NgClass } from '@angular/common';\r\nimport { Component, computed, signal } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faAngleRight, faAngleLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { Utils } from '@shared/services/utils/utils.service';\r\nimport { CalendarDayComponent } from '../calendar-day/calendar-day.component';\r\n\r\n@Component({\r\n  selector: 'app-calendar',\r\n  imports: [FontAwesomeModule, DatePipe, CalendarDayComponent],\r\n  templateUrl: './calendar.component.html',\r\n  styleUrl: './calendar.component.scss'\r\n})\r\nexport class CalendarComponent {\r\n  days = computed(() => this.generateDays());\r\n  month = computed(() => this.getMonth());\r\n  year = computed(() => this.getYear());\r\n\r\n  currentDay = signal(new Date());\r\n  daysInWeek = ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'];\r\n  prevIcon = faAngleLeft;\r\n  nextIcon = faAngleRight;\r\n\r\n  selectDay: Date | null = null;\r\n\r\n  generateDays() {\r\n    const year = this.currentDay().getFullYear();\r\n    const month = this.currentDay().getMonth();\r\n\r\n    let date = new Date(`${year}/${month + 1}/01`);\r\n    let days = [];\r\n\r\n    while (date.getMonth() === month) {\r\n      days.push(new Date(date));\r\n      date.setDate(date.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n\r\n  getMonth() {\r\n    const month = new Date(this.currentDay().setMonth(this.currentDay().getMonth()));\r\n    return new Intl.DateTimeFormat(\"pt-BR\", { month: \"long\" }).format(month);;\r\n  }\r\n\r\n  getYear() {\r\n    return this.currentDay().getFullYear();\r\n  }\r\n\r\n  prev() {\r\n    const prevMonth = Utils.subtractMounth(this.currentDay(), 1);\r\n    this.currentDay.set(prevMonth);\r\n  }\r\n\r\n  next() {\r\n    const nextMonth = Utils.addMounth(this.currentDay(), 1);\r\n    this.currentDay.set(nextMonth);\r\n  }\r\n}\r\n",
            "styleUrl": "./calendar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"calendar\">\r\n  <header class=\"calendar-header text\">\r\n    <button (click)=\"prev()\" class=\"calendar-button\">\r\n      <fa-icon [icon]=\"prevIcon\" />\r\n    </button>\r\n\r\n    <span class=\"calendar-header-title\"> {{ month() }} de {{ year() }} </span>\r\n\r\n    <button (click)=\"next()\" class=\"calendar-button\">\r\n      <fa-icon [icon]=\"nextIcon\" />\r\n    </button>\r\n  </header>\r\n\r\n  <div class=\"calendar-body\">\r\n    <ol class=\"calendar-body-week\">\r\n      @for (day of daysInWeek; track $index) {\r\n      <li class=\"calendar-day text\">{{ day }}</li>\r\n      }\r\n    </ol>\r\n\r\n    <ol class=\"calendar-body-days\">\r\n      @for (day of days(); track $index) {\r\n      <li>\r\n        <app-calendar-day\r\n          (click)=\"selectDay = day\"\r\n          [selected]=\"selectDay === day\"\r\n        >\r\n          {{ day | date : \"d\" }}\r\n        </app-calendar-day>\r\n      </li>\r\n      }\r\n    </ol>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CalendarDayComponent",
            "id": "component-CalendarDayComponent-25b239767c896a0d29aa4a2437215af93b0142c7bcccaa04fd0822fca0a9c801bc62dee95afa7f34f7938babe19ecf5e8878b9527e142a14d526c0e8a7d5070c",
            "file": "src/app/shared/components/calendar-day/calendar-day.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-calendar-day",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar-day.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "event",
                    "defaultValue": "input(CalendarDayEvents.NOTHING)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { CalendarDayEvents } from './calendar-day.model';\r\n\r\n@Component({\r\n  selector: 'app-calendar-day',\r\n  templateUrl: './calendar-day.component.html',\r\n  imports: [NgClass],\r\n  styleUrl: './calendar-day.component.scss'\r\n})\r\nexport class CalendarDayComponent {\r\n  event = input(CalendarDayEvents.NOTHING);\r\n  selected = input(false);\r\n}\r\n",
            "styleUrl": "./calendar-day.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span\r\n  [ngClass]=\"{ 'calendar-day--selected': selected() }\"\r\n  class=\"calendar-day text calendar-day--{{ event() }}\"\r\n>\r\n  <ng-content></ng-content>\r\n</span>\r\n"
        },
        {
            "name": "CalendarLegendComponent",
            "id": "component-CalendarLegendComponent-0f0aa76f8bbd6c39a874da3e841f291290dda4760680f871290ec38ebe1f9145ffd59be0443e581a807132de4c961196b7ca3bad71318b5fc35ae93bc329cc20",
            "file": "src/app/shared/components/calendar-legend/calendar-legend.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-calendar-legend",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar-legend.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-calendar-legend',\r\n  templateUrl: './calendar-legend.component.html',\r\n  styleUrl: './calendar-legend.component.scss'\r\n})\r\nexport class CalendarLegendComponent { }\r\n",
            "styleUrl": "./calendar-legend.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"calendar-legend\" role=\"contentinfo\">\r\n  <h2 class=\"calendar-legend-title title\">Legenda:</h2>\r\n\r\n  <ul class=\"calendar-legend-list\">\r\n    <li class=\"calendar-legend-item\">\r\n      <span\r\n        class=\"calendar-legend-item-color calendar-legend-item-color--disabled\"\r\n      ></span>\r\n      <span class=\"calendar-legend-item-text text\">Nenhum evento</span>\r\n    </li>\r\n\r\n    <li class=\"calendar-legend-item\">\r\n      <span\r\n        class=\"calendar-legend-item-color calendar-legend-item-color--meeting\"\r\n      ></span>\r\n      <span class=\"calendar-legend-item-text text\">Reunião</span>\r\n    </li>\r\n\r\n    <li class=\"calendar-legend-item\">\r\n      <span\r\n        class=\"calendar-legend-item-color calendar-legend-item-color--proof\"\r\n      ></span>\r\n      <span class=\"calendar-legend-item-text text\">Prova</span>\r\n    </li>\r\n\r\n    <li class=\"calendar-legend-item\">\r\n      <span\r\n        class=\"calendar-legend-item-color calendar-legend-item-color--liveclass\"\r\n      ></span>\r\n      <span class=\"calendar-legend-item-text text\">Live</span>\r\n    </li>\r\n\r\n    <li class=\"calendar-legend-item\">\r\n      <span\r\n        class=\"calendar-legend-item-color calendar-legend-item-color--others\"\r\n      ></span>\r\n      <span class=\"calendar-legend-item-text text\">Outros Eventos</span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "CollegeComponent",
            "id": "component-CollegeComponent-46d4ffce9e4d0ba02e994a7db6bf283aeaac9cfec6752e2108a9638e55a710e3138f62787619e95dd95277e4ca084d59bdd5b9a7879e9cf7639a89635adb22e5",
            "file": "src/app/pages/logged-area/pages/college/college.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-college",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./college.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#collegeService",
                    "defaultValue": "inject(CollegeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "courses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICourse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "payload",
                    "defaultValue": "new CollegeForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "getCollege",
                    "args": [
                        {
                            "name": "collegeId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "collegeId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "CollegeFormComponent",
                    "type": "component"
                },
                {
                    "name": "PageThumbComponent",
                    "type": "component"
                },
                {
                    "name": "CollegeListComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "PageThumbLoaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\n\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\nimport { PageThumbComponent } from '@shared/components/page-thumb/page-thumb.component';\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\nimport { CollegeThumbComponent } from './college-thumb/college-thumb.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { CollegeService } from '@shared/services/college/college.service';\nimport { ICourse } from '@shared/services/course/course.model';\n\nimport { CollegeFormComponent } from './college-form/college-form.component';\nimport { CollegeListComponent } from './college-list/college-list.component';\nimport { CollegeForm } from './model/college.model';\nimport { PageThumbLoaderComponent } from '@shared/components/loaders/page-thumb-loader/page-thumb-loader.component';\n\n@Component({\n    selector: 'app-college',\n    imports: [\n        ButtonBackComponent,\n        ButtonComponent,\n        AlertComponent,\n        CollegeFormComponent,\n        PageThumbComponent,\n        CollegeListComponent,\n        RouterLink,\n        PageThumbLoaderComponent\n    ],\n    templateUrl: './college.component.html',\n    styleUrl: './college.component.scss'\n})\nexport class CollegeComponent implements OnInit {\n  #collegeService = inject(CollegeService);\n  #router = inject(ActivatedRoute);\n  alertType = AlertTypes.success;\n  payload = new CollegeForm();\n  courses: ICourse[] = [];\n  alertMessage = \"\";\n\n  ngOnInit(): void {\n    this.#router.paramMap.subscribe({\n      next: params => {\n        const collegeId = Number(params.get('id'));\n        if (this.payload.name) return;\n        this.getCollege(collegeId);\n      }\n    });\n  }\n\n  private getCollege(collegeId: string | number) {\n    this.#collegeService.getCollages(collegeId).subscribe({\n      next: (college) => {\n        this.payload.secundaryColor = college.CollegeStyle[0].secundaryColor;\n        this.payload.primaryColor = college.CollegeStyle[0].primaryColor;\n        this.payload.thumb = college.CollegeStyle[0].thumb;\n        this.payload.name = college.name;\n        this.courses = college.Course;\n      },\n      error: (error) => {\n        this.alertType = AlertTypes.error;\n        this.alertMessage = error.message;\n      }\n    })\n  }\n\n  update() { }\n\n  submit() { }\n}\n",
            "styleUrl": "./college.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section id=\"college\">\n  @defer (on viewport) {\n    <app-page-thumb [college]=\"payload\" />\n  } @placeholder {\n    <app-page-thumb-loader />\n  } @loading {\n    <app-page-thumb-loader />\n  }\n\n  <div id=\"college-content\" class=\"container\">\n    <app-college-form [payload]=\"payload\" />\n    <app-college-list [courses]=\"courses\" />\n\n    @if (alertMessage) {\n      <alert id=\"college-alert\" [type]=\"alertType\">\n        {{ alertMessage }}\n      </alert>\n    }\n  </div>\n\n  <footer id=\"college-footer\">\n    <app-button-back id=\"college-back-button\"></app-button-back>\n\n    <app-button routerLink=\"./course\" id=\"college-submit-button\">\n      Cadastrar um curso\n    </app-button>\n  </footer>\n</section>\n"
        },
        {
            "name": "CollegeFormComponent",
            "id": "component-CollegeFormComponent-dd92cab698d7f45d0375322cf525189e13e352de7bfccff837baa0deb0fd41eb44205e3028d8faa34637068005a4bd1f596e7532a4aafb4fd9695606b27a748b",
            "file": "src/app/pages/logged-area/pages/college/college-form/college-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-college-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./college-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "CollegeForm",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabledFields",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "form",
                    "defaultValue": "viewChild.required<NgForm>('form')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "InputUploadComponent",
                    "type": "component"
                },
                {
                    "name": "InputColorComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input, Input, viewChild } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\n\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\nimport { InputColorComponent } from '@shared/components/input-color/input-color.component';\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { CollegeForm } from '../model/college.model';\n\n@Component({\n  selector: 'app-college-form',\n  standalone: true,\n  imports: [\n    InputUploadComponent,\n    InputColorComponent,\n    InputTextComponent,\n    FormsModule,\n    ButtonComponent\n  ],\n  templateUrl: './college-form.component.html',\n  styleUrl: './college-form.component.scss'\n})\nexport class CollegeFormComponent {\n  readonly form = viewChild.required<NgForm>('form');\n  @Input() payload!: CollegeForm;\n  disabledFields = true;\n\n  update() { }\n}\n",
            "styleUrl": "./college-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<form #form=\"ngForm\" (ngSubmit)=\"update()\" id=\"college-form\">\n  <div id=\"college-form-header\">\n    <h1 class=\"subtitle border\">{{ payload.name }}</h1>\n    <app-button\n      size=\"small\"\n      (click)=\"disabledFields = !disabledFields\"\n      id=\"college-enabled\"\n    >\n      {{ !disabledFields ? \"Alterar\" : \"Apenas visualizar\" }}\n    </app-button>\n  </div>\n\n  <div class=\"row\">\n    <app-input-text\n      [(ngModel)]=\"payload.name\"\n      id=\"college-name\"\n      [required]=\"true\"\n      [disabled]=\"disabledFields\"\n      label=\"Nome\"\n      name=\"name\"\n      type=\"text\"\n      placeholder=\"Informe o nome da instituição\"\n    />\n  </div>\n\n  <div class=\"row\">\n    <app-input-color\n      [(ngModel)]=\"payload.primaryColor\"\n      id=\"college-primary-color\"\n      [disabled]=\"disabledFields\"\n      label=\"Cor pricipal\"\n      name=\"primaryColor\"\n      [required]=\"true\"\n    />\n\n    <app-input-color\n      [(ngModel)]=\"payload.secundaryColor\"\n      [disabled]=\"disabledFields\"\n      id=\"college-secundary-color\"\n      label=\"Cor secundaria\"\n      name=\"secundaryColor\"\n      [required]=\"true\"\n    />\n  </div>\n\n  <div class=\"row\">\n    <input-upload\n      [initialImage]=\"payload.thumb\"\n      [(ngModel)]=\"payload.thumb\"\n      [disabled]=\"disabledFields\"\n      id=\"college-thumb\"\n      [required]=\"true\"\n      name=\"thumb\"\n    >\n      Faça o upload do logo da instituição\n    </input-upload>\n  </div>\n\n  @if (disabledFields) {\n  <app-button type=\"submit\" id=\"college-form-submit\">\n    Salvar alterações\n  </app-button>\n  }\n</form>\n"
        },
        {
            "name": "CollegeItemComponent",
            "id": "component-CollegeItemComponent-f0a42ca2d170a8c6359eccce0426d38da026086b30c11b0aef291d497175a1a44be857e0ac123cb58433d287a282aaa6a0f88c695bb8d2b0c88b1e878929b17a",
            "file": "src/app/shared/components/college-item/college-item/college-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-college-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./college-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "college",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "College",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { College } from '../../../services/college/collage.model';\r\nimport { NgStyle } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-college-item',\r\n  imports: [NgStyle],\r\n  standalone: true,\r\n  templateUrl: './college-item.component.html',\r\n  styleUrl: './college-item.component.scss'\r\n})\r\nexport class CollegeItemComponent {\r\n  @Input() college!: College;\r\n}\r\n",
            "styleUrl": "./college-item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div role=\"listitem\" class=\"college-item\">\r\n  <img\r\n    class=\"college-item-thumb\"\r\n    [src]=\"college.CollegeStyle[0].thumb\"\r\n    [alt]=\"college.name\"\r\n  />\r\n  <h4 class=\"college-item-title subtitle\">\r\n    {{ college.name }}\r\n  </h4>\r\n\r\n  <span\r\n    class=\"college-item-overlay\"\r\n    [ngStyle]=\"{\r\n      backgroundColor: college.CollegeStyle[0].primaryColor,\r\n    }\"\r\n  ></span>\r\n</div>\r\n"
        },
        {
            "name": "CollegeItemLoaderComponent",
            "id": "component-CollegeItemLoaderComponent-56454235bfb82b48651f56279493b04f4e7c0fb1e6fee3a9448ab830b189335270be7e6b79fea8d017ab5ff4f723a8320e9d3d7ff9e1f716fa25e7aa27e2862c",
            "file": "src/app/shared/components/loaders/college-item-loader/college-item-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-college-item-loader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./college-item-loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-college-item-loader',\r\n  standalone: true,\r\n  templateUrl: './college-item-loader.component.html',\r\n  styleUrl: './college-item-loader.component.scss'\r\n})\r\nexport class CollegeItemLoaderComponent {\r\n\r\n}\r\n",
            "styleUrl": "./college-item-loader.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div role=\"listitem\" class=\"college-item skeleton\"></div>\r\n"
        },
        {
            "name": "CollegeListComponent",
            "id": "component-CollegeListComponent-20df45f4136b5b2d55900ea3fb7b9ff223e65421cf0e75379ba0ba3c8f7dedf92dec0a98b762d3435bf4c3a6e0b9ca901f454decea347a5fb984a7fdfea4852f",
            "file": "src/app/pages/logged-area/pages/college/college-list/college-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-college-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./college-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "courses",
                    "defaultValue": "input<ICourse[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CourseItemComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { CourseItemComponent } from '@shared/components/course-item/course-item.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { ICourse } from '@shared/services/course/course.model';\r\n\r\n@Component({\r\n  selector: 'app-college-list',\r\n  standalone: true,\r\n  imports: [CourseItemComponent, ButtonComponent, RouterModule],\r\n  templateUrl: './college-list.component.html',\r\n  styleUrl: './college-list.component.scss'\r\n})\r\nexport class CollegeListComponent {\r\n  readonly courses = input<ICourse[]>([]);\r\n}\r\n",
            "styleUrl": "./college-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div id=\"college-list\">\r\n  <h2 class=\"subtitle border\">Cursos</h2>\r\n\r\n  <ul>\r\n    @for (course of courses(); track $index) {\r\n    <li>\r\n      <app-course-item [thumb]=\"course.thumb\">\r\n        <h3 class=\"title\">{{ course.name }}</h3>\r\n        <app-button routerLink=\"../../course/{{ course.id }}\" size=\"small\">\r\n          editar\r\n        </app-button>\r\n      </app-course-item>\r\n    </li>\r\n    } @empty {\r\n    <li>\r\n      <h3 class=\"subtitle empty\">\r\n        Você ainda não atribuiu nenhum curso para essa instituição.\r\n      </h3>\r\n    </li>\r\n    }\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "CollegeThumbComponent",
            "id": "component-CollegeThumbComponent-f0fd6809e3436975c35b7242cc9686bc75dcbcfe79ad5d03a55e671c083edbae18785bc702facb486ce14c39a9a702a97832af0597024627b80b1b0c4a25e8ff",
            "file": "src/app/pages/logged-area/pages/college/college-thumb/college-thumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-college-thumb",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./college-thumb.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "college",
                    "defaultValue": "input(new CollegeForm())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\nimport { CollegeForm } from '../model/college.model';\n\n@Component({\n    selector: 'app-college-thumb',\n    imports: [],\n    templateUrl: './college-thumb.component.html',\n    styleUrl: './college-thumb.component.scss'\n})\nexport class CollegeThumbComponent {\n  readonly college = input(new CollegeForm());\n}\n",
            "styleUrl": "./college-thumb.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header id=\"college-header\" [style]=\"{ backgroundColor: college().primaryColor }\">\n  <div id=\"college-header-overlay\"></div>\n  <div class=\"container\">\n    <img id=\"college-header-thumb\" [src]=\"college().thumb\" [alt]=\"college().name\" />\n  </div>\n</header>\n"
        },
        {
            "name": "CourseComponent",
            "id": "component-CourseComponent-923fc4fa21c5aab772b656eadfebe5ec022ca8cf4f952adbcdf848f8fcf3000a84dd09cefaa6c3471b9be81af513d54bc0701220a00c61e33df03b70f38a242d",
            "file": "src/app/pages/logged-area/pages/course/course.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./course.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#course",
                    "defaultValue": "inject(CourseService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isLoading",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "lessons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "payload",
                    "defaultValue": "new CourseForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "quizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "getCourse",
                    "args": [
                        {
                            "name": "courseId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "courseId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "PageThumbComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "CourseFormComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "PageThumbLoaderComponent",
                    "type": "component"
                },
                {
                    "name": "CourseListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute, RouterLink } from '@angular/router';\nimport { Component, inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\nimport { PageThumbComponent } from '@shared/components/page-thumb/page-thumb.component';\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\nimport { ItemBarComponent } from '@shared/components/item-bar/item-bar.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { SelectComponent } from '@shared/components/select/select.component';\nimport { CourseService } from '@shared/services/course/course.service';\nimport { CourseForm } from '@shared/services/course/course.model';\n\nimport { CourseFormComponent } from './course-form/course-form.component';\nimport { concatAll, concatMap, forkJoin, map } from 'rxjs';\nimport { PageThumbLoaderComponent } from '@shared/components/loaders/page-thumb-loader/page-thumb-loader.component';\nimport { CourseListComponent } from './course-list/course-list.component';\n@Component({\n  selector: 'app-course',\n  imports: [\n    ButtonComponent,\n    PageThumbComponent,\n    AlertComponent,\n    CourseFormComponent,\n    ButtonBackComponent,\n    CommonModule,\n    RouterLink,\n    PageThumbLoaderComponent,\n    CourseListComponent\n  ],\n  templateUrl: './course.component.html',\n  styleUrl: './course.component.scss'\n})\nexport class CourseComponent {\n  #router = inject(ActivatedRoute);\n  #course = inject(CourseService);\n  alertType = AlertTypes.success;\n  payload = new CourseForm();\n  alertMessage = \"\";\n  lessons: any[] = [];\n  quizes: any[] = [];\n  tasks: any[] = [];\n  isLoading = signal(true);\n\n  public ngOnInit(): void {\n    this.#router.paramMap.subscribe({\n      next: params => {\n        const collegeId = Number(params.get('id'));\n        this.getCourse(collegeId);\n      }\n    });\n  }\n\n  private getCourse(courseId: string | number) {\n    const course$ = this.#course.getCourse(courseId);\n    const content$ = this.#course.getContent(courseId);\n\n    forkJoin([course$, content$]).subscribe({\n      next: ([course, content]) => {\n        this.payload.thumb = course.thumb;\n        this.payload.name = course.name;\n        this.payload.id = course.id;\n\n        this.tasks = content.tasks;\n        this.quizes = content.quizes;\n        this.lessons = content.lessons;\n\n        this.isLoading.set(false);\n      },\n      error: (error) => {\n        this.alertType = AlertTypes.error;\n        this.alertMessage = error.message;\n\n        this.isLoading.set(false);\n      }\n    })\n  }\n\n  update() { }\n\n  submit() { }\n}\n",
            "styleUrl": "./course.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section id=\"course\">\n  @defer (when !isLoading()) {\n    <app-page-thumb [college]=\"payload\" />\n  } @placeholder {\n    <app-page-thumb-loader />\n  } @loading {\n    <app-page-thumb-loader />\n  }\n\n  <div id=\"course-content\" class=\"container\">\n    <h1 class=\"subtitle border\">{{ payload.name }}</h1>\n    <app-course-form [payload]=\"payload\" />\n\n    @if (alertMessage) {\n      <alert id=\"course-alert\" [type]=\"alertType\">\n        {{ alertMessage }}\n      </alert>\n    }\n\n    <app-course-list name=\"Aulas\" [isLoading]=\"isLoading()\" [itens]=\"lessons\" />\n    <app-course-list name=\"Quizes\" [isLoading]=\"isLoading()\" [itens]=\"quizes\" />\n    <!-- <app-course-list name=\"Tarefas\" [isLoading]=\"isLoading\" [itens]=\"tasks\" /> -->\n  </div>\n\n  <footer id=\"course-footer\">\n    <app-button-back id=\"course-back-button\" />\n\n    <app-button routerLink=\"./choice-task\" id=\"course-submit-button\">\n      Criar conteudo\n    </app-button>\n  </footer>\n</section>\n"
        },
        {
            "name": "CourseFormComponent",
            "id": "component-CourseFormComponent-5afbee2780a60b45cb5e26e73ae9cefe6230d8b7bd381759627331c1196f5a759534327348f1c529e9e2d4401cf3b3811c43804b5b0776f146418fb5f71b1f9a",
            "file": "src/app/pages/logged-area/pages/course/course-form/course-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./course-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "payload",
                    "defaultValue": "new CourseForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "disabledFields",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "InputUploadComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\nimport { PageThumbComponent } from '@shared/components/page-thumb/page-thumb.component';\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { CourseForm } from '@shared/services/course/course.model';\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\n\n@Component({\n    selector: 'app-course-form',\n    imports: [\n        InputTextComponent,\n        InputUploadComponent,\n        FormsModule,\n    ],\n    templateUrl: './course-form.component.html',\n    styleUrl: './course-form.component.scss'\n})\nexport class CourseFormComponent {\n  @Input() payload = new CourseForm();\n  alertType = AlertTypes.success;\n  alertMessage = \"\";\n  disabledFields = true;\n\n}\n",
            "styleUrl": "./course-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<form #form=\"ngForm\" id=\"course-form\">\n  <app-input-text\n    [(ngModel)]=\"payload.name\"\n    label=\"Nome\"\n    id=\"course-name\"\n    name=\"name\"\n    [required]=\"true\"\n    [disabled]=\"disabledFields\"\n    type=\"text\"\n    placeholder=\"Informe o nome da instituição\"\n  />\n\n  <input-upload\n    [(ngModel)]=\"payload.thumb\"\n    [initialImage]=\"payload.thumb\"\n    [disabled]=\"disabledFields\"\n    id=\"course-thumb\"\n    [required]=\"true\"\n    name=\"thumb\"\n  >\n    Faça o upload da thumb do curso\n  </input-upload>\n</form>\n"
        },
        {
            "name": "CourseItemComponent",
            "id": "component-CourseItemComponent-eaa9a43782e24ef6d3a652645c503011ab8c85e62dadde23ea7db84a611d9d6d06e53397e3fe3b6a486764a3ad417ad68d343cf3a5c69be1dc73e3a5b1a00f02",
            "file": "src/app/shared/components/course-item/course-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./course-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "thumb",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-course-item',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './course-item.component.html',\r\n  styleUrl: './course-item.component.scss'\r\n})\r\nexport class CourseItemComponent {\r\n  readonly thumb = input(\"\");\r\n}\r\n",
            "styleUrl": "./course-item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"course-item\">\n  <div class=\"course-item-thumb\">\n    <img [src]=\"thumb()\" alt=\"imagem meramente ilustrativa\" />\n    <div class=\"course-item-overlay\"></div>\n  </div>\n  <div class=\"course-item-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CourseListComponent",
            "id": "component-CourseListComponent-700cf3426778007c441ec9db8760b42ce06857d31885773208dcf409e39e2a50f8bf3e5b15325dce7b171b1095f0a90e34f473933ea304ef4a80ad456f8b5a8c",
            "file": "src/app/pages/logged-area/pages/course/course-list/course-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./course-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "itens",
                    "defaultValue": "input<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ItemBarComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\nimport { ItemBarComponent } from '@shared/components/item-bar/item-bar.component';\r\n\r\n@Component({\n    selector: 'app-course-list',\n    imports: [\n        ItemBarComponent,\n        RouterLink\n    ],\n    templateUrl: './course-list.component.html',\n    styleUrl: './course-list.component.scss'\n})\r\nexport class CourseListComponent {\r\n  readonly isLoading = input(true);\r\n  readonly itens = input<any>([]);\r\n\r\n  readonly name = input(\"\");\r\n}\r\n",
            "styleUrl": "./course-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"course-list\">\r\n  <h3 class=\"course-list-title subtitle border\">\r\n    {{ name() }}\r\n  </h3>\r\n\r\n  <ul>\r\n    @defer (when !isLoading()) {\r\n      @for (item of itens(); track $index) {\r\n        <li>\r\n          <app-item-bar\r\n            [title]=\"item.title\"\r\n            routerLink=\"./lesson/{{ item.id }}\"\r\n          />\r\n        </li>\r\n      } @empty {\r\n        <li>\r\n          <h3 class=\"subtitle empty\">Essse curso não tem {{ name() }}</h3>\r\n        </li>\r\n      }\r\n    } @placeholder (minimum 500ms) {\r\n      <ul>\r\n        <li>\r\n          <div role=\"listitem\" class=\"college-item skeleton\"></div>\r\n        </li>\r\n\r\n        <li>\r\n          <div role=\"listitem\" class=\"college-item skeleton\"></div>\r\n        </li>\r\n      </ul>\r\n    } @loading (after 100ms; minimum 1s) {\r\n      <ul>\r\n        <li>\r\n          <div role=\"listitem\" class=\"college-item skeleton\"></div>\r\n        </li>\r\n\r\n        <li>\r\n          <div role=\"listitem\" class=\"college-item skeleton\"></div>\r\n        </li>\r\n      </ul>\r\n    }\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "CreateCollegeComponent",
            "id": "component-CreateCollegeComponent-af9e73eabd8a6ec905ae5b0d83e2df82478a980843144e3453352e6a55299f636c3988e1adba8d7eaa7f1bfbcfe9db62d7675d1e284148b28e986b04a0d1022e",
            "file": "src/app/pages/logged-area/pages/create-college/create-college.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-college",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-college.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#collegeService",
                    "defaultValue": "inject(CollegeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "payload",
                    "defaultValue": "{\r\n    secundaryColor: \"\",\r\n    primaryColor: \"\",\r\n    thumb: \"\",\r\n    name: \"\",\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollegeRequest",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "InputColorComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "InputUploadComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\r\nimport { InputColorComponent } from '@shared/components/input-color/input-color.component';\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\r\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { CollegeService } from '@shared/services/college/college.service';\r\nimport { CollegeRequest } from '@shared/services/college/collage.model';\r\nimport { Router, RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-create-college',\r\n  imports: [\r\n    InputColorComponent,\r\n    InputTextComponent,\r\n    InputUploadComponent,\r\n    ButtonComponent,\r\n    FormsModule,\r\n    ButtonBackComponent,\r\n    AlertComponent,\r\n    RouterLink\r\n  ],\r\n  templateUrl: './create-college.component.html',\r\n  styleUrl: './create-college.component.scss'\r\n})\r\nexport class CreateCollegeComponent {\r\n  #collegeService = inject(CollegeService);\r\n  #router = inject(Router);\r\n  alertType = AlertTypes.success;\r\n  alertMessage = \"\";\r\n  payload: CollegeRequest = {\r\n    secundaryColor: \"\",\r\n    primaryColor: \"\",\r\n    thumb: \"\",\r\n    name: \"\",\r\n  }\r\n\r\n  submit() {\r\n    this.payload.thumb = this.payload?.thumb?.file ?? '';\r\n    this.#collegeService.createCollege(this.payload).subscribe({\r\n      next: async (college) => {\r\n        await this.#router.navigateByUrl(`./college/${college.id}`);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.alertType = AlertTypes.error;\r\n        this.alertMessage = error.error.message;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./create-college.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section id=\"create-college\" class=\"container\">\r\n  <header id=\"create-college-header\">\r\n    <h1 class=\"subtitle border\">Nova Escola</h1>\r\n  </header>\r\n\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" id=\"create-college-container\">\r\n    <div class=\"row\">\r\n      <app-input-text\r\n        [(ngModel)]=\"payload.name\"\r\n        label=\"Nome\"\r\n        id=\"college-name\"\r\n        name=\"name\"\r\n        [required]=\"true\"\r\n        type=\"text\"\r\n        placeholder=\"Informe o nome da instituição\"\r\n      ></app-input-text>\r\n    </div>\r\n    <div class=\"row\">\r\n      <app-input-color\r\n        [(ngModel)]=\"payload.primaryColor\"\r\n        id=\"college-primary-color\"\r\n        name=\"primaryColor\"\r\n        [required]=\"true\"\r\n        label=\"Cor pricipal\"\r\n      />\r\n\r\n      <app-input-color\r\n        [(ngModel)]=\"payload.secundaryColor\"\r\n        id=\"college-secundary-color\"\r\n        name=\"secundaryColor\"\r\n        [required]=\"true\"\r\n        label=\"Cor secundaria\"\r\n      />\r\n    </div>\r\n    <div class=\"row\">\r\n      <input-upload\r\n        [(ngModel)]=\"payload.thumb\"\r\n        id=\"college-thumb\"\r\n        [required]=\"true\"\r\n        name=\"thumb\"\r\n      >\r\n        Faça o upload do logo da instituição\r\n      </input-upload>\r\n    </div>\r\n    <footer id=\"create-college-footer\">\r\n      <app-button-back routerLink=\"../home\" />\r\n\r\n      <app-button\r\n        id=\"create-college-submit\"\r\n        type=\"submit\"\r\n        [disabled]=\"!!form.invalid\"\r\n      >\r\n        Criar\r\n      </app-button>\r\n\r\n      @if (alertMessage) {\r\n        <alert id=\"create-college-alert\" [type]=\"alertType\">\r\n          {{ alertMessage }}\r\n        </alert>\r\n      }\r\n    </footer>\r\n  </form>\r\n</section>\r\n"
        },
        {
            "name": "CreateCourseComponent",
            "id": "component-CreateCourseComponent-7e116608a0a2b3546018607c2e1abd65b4c740ac3ed1d13de823f598a3c055013cc74247807a7ecedb3d7b42386a75a000a892de49402681c74ae65179bf188a",
            "file": "src/app/pages/logged-area/pages/create-course/create-course.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-course",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-course.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#courseService",
                    "defaultValue": "inject(CourseService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "payload",
                    "defaultValue": "new CreateCourse()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequestCourseCreate",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputUploadComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Component, inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\r\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { IRequestCourseCreate } from '@shared/services/course/course.model';\r\nimport { CourseService } from '@shared/services/course/course.service';\r\n\r\nimport { CreateCourse } from './create-course.model';\r\n\r\n@Component({\r\n  selector: 'app-create-course',\r\n  imports: [\r\n    ButtonComponent,\r\n    InputUploadComponent,\r\n    InputTextComponent,\r\n    FormsModule,\r\n    ButtonBackComponent,\r\n    AlertComponent\r\n  ],\r\n  templateUrl: './create-course.component.html',\r\n  styleUrl: './create-course.component.scss'\r\n})\r\nexport class CreateCourseComponent {\r\n  #courseService = inject(CourseService);\r\n  #activatedRoute = inject(ActivatedRoute);\r\n  #router = inject(Router);\r\n  payload: IRequestCourseCreate = new CreateCourse()\r\n  alertType = AlertTypes.success;\r\n  alertMessage = \"\";\r\n\r\n  ngOnInit(): void {\r\n    this.#activatedRoute.paramMap.subscribe({\r\n      next: params => {\r\n        const collegeId = params.get('id');\r\n        if (!collegeId) return this.showError('Não foi possível buscar a univercidade');\r\n        this.payload.collegeId = parseInt(collegeId);\r\n      }\r\n    });\r\n  }\r\n\r\n  showError(message: string): void {\r\n    this.alertType = AlertTypes.error;\r\n    this.alertMessage = message;\r\n  }\r\n\r\n  submit() {\r\n    this.payload.thumb = this.payload?.thumb?.file ?? '';\r\n    this.#courseService.create(this.payload).subscribe({\r\n      next: async (college) => {\r\n        await this.#router.navigateByUrl(`/area-logada/course/${college.id}`);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.alertType = AlertTypes.error;\r\n        this.alertMessage = error.error.message;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./create-course.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section id=\"create-course\" class=\"container\">\n  <header id=\"create-course-header\">\n    <h1 class=\"subtitle border\">Cadastro curso</h1>\n  </header>\n\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" id=\"create-course-container\">\n    <app-input-text\n      [(ngModel)]=\"payload.name\"\n      label=\"Nome\"\n      id=\"course-name\"\n      name=\"name\"\n      [required]=\"true\"\n      type=\"text\"\n      placeholder=\"Informe o nome da instituição\"\n    />\n\n    <input-upload\n      [(ngModel)]=\"payload.thumb\"\n      id=\"course-thumb\"\n      [required]=\"true\"\n      name=\"thumb\"\n    >\n      Faça o upload da thumb do curso\n    </input-upload>\n\n    <footer id=\"create-course-footer\">\n      <app-button-back></app-button-back>\n\n      <app-button\n        id=\"create-course-submit\"\n        type=\"submit\"\n        [disabled]=\"!!form.invalid\"\n      >\n        Criar\n      </app-button>\n\n      @if (alertMessage) {\n        <alert id=\"create-course-alert\" [type]=\"alertType\">\n          {{ alertMessage }}\n        </alert>\n      }\n    </footer>\n  </form>\n</section>\n"
        },
        {
            "name": "CreatePostComponent",
            "id": "component-CreatePostComponent-c8cb3bf7937cceecd57d4fb50caa1734ae29f25aebe6fc3fdd9b2eddd4366e8d7f4cccc8c3bc6a2b5820a5444361e2e9033097bd428bc9eab045823a421b156f",
            "file": "src/app/pages/logged-area/pages/create-post/create-post.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-post",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-post.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "PostLoadingComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { PostLoadingComponent } from '@shared/components/loaders/post-loading/post-loading.component';\r\n\r\n@Component({\n    selector: 'app-create-post',\n    imports: [PostLoadingComponent],\n    templateUrl: './create-post.component.html',\n    styleUrl: './create-post.component.scss'\n})\r\nexport class CreatePostComponent {\r\n\r\n}\r\n",
            "styleUrl": "./create-post.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div id=\"create-post-page\">\r\n  <app-post-loading />\r\n</div>\r\n"
        },
        {
            "name": "CreateQuizComponent",
            "id": "component-CreateQuizComponent-c1aa1bcae5a887eb727747ddc0543b097712cc63c7cca65ee9bb207ec437fa503734c398f51143603da903c0d7bf626f62acf01fdd337f725a3053da6a282b12",
            "file": "src/app/pages/logged-area/pages/create-quiz/create-quiz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-quiz",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-quiz.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#activatedRouter",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#quizService",
                    "defaultValue": "inject(QuizService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "correctOptions",
                    "defaultValue": "\"0\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "payload",
                    "defaultValue": "{ name: \"\" } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuizCreateRequest",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "addOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createOption",
                    "args": [],
                    "optional": false,
                    "returnType": "{ title: string; correctOptions: boolean; }",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateOptions",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "InputRadioComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute, Router } from '@angular/router';\r\nimport { Component, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { InputRadioComponent } from '@shared/components/input-radio/input-radio.component';\r\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\r\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { QuizCreateRequest } from '@shared/services/quiz/quiz.model';\r\nimport { QuizService } from '@shared/services/quiz/quiz.service';\r\n\r\n@Component({\r\n  selector: 'app-create-quiz',\r\n  imports: [\r\n    ButtonBackComponent,\r\n    ButtonComponent,\r\n    FormsModule,\r\n    InputTextComponent,\r\n    InputRadioComponent,\r\n    AlertComponent,\r\n    CommonModule\r\n  ],\r\n  templateUrl: './create-quiz.component.html',\r\n  styleUrl: './create-quiz.component.scss'\r\n})\r\nexport class CreateQuizComponent implements OnInit {\r\n  #activatedRouter = inject(ActivatedRoute);\r\n  #quizService = inject(QuizService);\r\n  #router = inject(Router);\r\n  payload: QuizCreateRequest = { name: \"\" } as any;\r\n  alertType = AlertTypes.info;\r\n  options: any[] = [];\r\n  alertMessage = \"\";\r\n  correctOptions = \"0\"\r\n\r\n  ngOnInit(): void {\r\n    this.#activatedRouter.paramMap.subscribe({\r\n      next: params => {\r\n        this.payload.courseId = Number(params.get('id'));\r\n      }\r\n    });\r\n  }\r\n\r\n  createOption() {\r\n    return { title: '', correctOptions: false }\r\n  }\r\n\r\n  addOption() {\r\n    if (this.options.length < 5) this.options.push(this.createOption());\r\n  }\r\n\r\n  updateOptions(index: number) {\r\n    this.options.forEach((option, i) => {\r\n      option.correctOptions = i === index;\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.payload.quizOptions = this.options;\r\n    this.#quizService.create(this.payload).subscribe({\r\n      next: async (college) => {\r\n        await this.#router.navigateByUrl(`/area-logada/course/${this.payload.courseId}`);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.alertType = AlertTypes.error;\r\n        this.alertMessage = error.error.message;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./create-quiz.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section id=\"create-quiz\" class=\"container\">\r\n  <header id=\"create-quiz-header\">\r\n    <h1 class=\"subtitle border\">Quiz</h1>\r\n  </header>\r\n\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" id=\"create-quiz-content\">\r\n    <app-input-text\r\n      [(ngModel)]=\"payload.name\"\r\n      [required]=\"true\"\r\n      label=\"enunciado\"\r\n      name=\"name\"\r\n      id=\"name\"\r\n      type=\"text\"\r\n      placeholder=\"Formule o enunciado do Quiz\"\r\n    />\r\n\r\n    <alert id=\"create-college-alert\" [hideShadow]=\"true\" [type]=\"alertType\">\r\n      Todo quiz deve ter entre 4 a 5 opções e apenas uma deve ser valida\r\n    </alert>\r\n\r\n    <ul>\r\n      @for (option of options; track $index) {\r\n        <li>\r\n          <app-input-text\r\n            [(ngModel)]=\"option.title\"\r\n            [required]=\"true\"\r\n            [label]=\"'Opção' + ($index + 1)\"\r\n            name=\"title-{{ $index }}\"\r\n            id=\"title-{{ $index }}\"\r\n            type=\"text\"\r\n            placeholder=\"Formule o enunciado do Quiz\"\r\n          />\r\n\r\n          <app-input-radio\r\n            [(ngModel)]=\"correctOptions\"\r\n            value=\"{{ $index }}\"\r\n            [required]=\"true\"\r\n            name=\"correctOptions\"\r\n            (click)=\"updateOptions($index)\"\r\n            [id]=\"'correctOptions-' + $index\"\r\n          >\r\n            Opção correta\r\n          </app-input-radio>\r\n        </li>\r\n      }\r\n    </ul>\r\n\r\n    <app-button\r\n      [disabled]=\"options.length >= 5\"\r\n      (click)=\"addOption()\"\r\n      id=\"create-quiz-add-option\"\r\n    >\r\n      Criar opção\r\n    </app-button>\r\n\r\n    @if (alertMessage) {\r\n      <alert id=\"create-college-alert\" [hideShadow]=\"true\">\r\n        {{ alertMessage }}\r\n      </alert>\r\n    }\r\n\r\n    <footer id=\"create-quiz-footer\">\r\n      <app-button-back id=\"create-quiz-back-button\" />\r\n\r\n      <app-button\r\n        [disabled]=\"!!form.invalid || options.length < 4\"\r\n        id=\"create-quiz-submit-button\"\r\n        type=\"submit\"\r\n      >\r\n        Criar um conteudo\r\n      </app-button>\r\n    </footer>\r\n  </form>\r\n</section>\r\n"
        },
        {
            "name": "CreateTaskComponent",
            "id": "component-CreateTaskComponent-c099f2d864074e89ca4b067de7be779b3ee6878c6885404b82c1e82362a305b9861d0ee26765fbb1cd03a1a9320a84ea3aa2d05adb18c44f54c74620e87b6892",
            "file": "src/app/pages/logged-area/pages/create-task/create-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\n    selector: 'app-create-task',\n    imports: [],\n    templateUrl: './create-task.component.html',\n    styleUrl: './create-task.component.scss'\n})\r\nexport class CreateTaskComponent {\r\n\r\n}\r\n",
            "styleUrl": "./create-task.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>create-task works!</p>\r\n"
        },
        {
            "name": "DateItemComponent",
            "id": "component-DateItemComponent-670afefb423281c62db0370e5e27e3095d92d126706b282ce9b11ba13f69a33647ae9e9b7a832c639f414365fb01fa5025b41cf682d465a4a3c7ac67f0ac7162",
            "file": "src/app/shared/components/date-item/date-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-date-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\n\r\n@Component({\n    selector: 'app-date-item',\n    imports: [CommonModule],\n    templateUrl: './date-item.component.html',\n    styleUrl: './date-item.component.scss'\n})\r\nexport class DateItemComponent {\r\n  readonly date = input.required<string>();\r\n}\r\n",
            "styleUrl": "./date-item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"date-item\">\r\n  <div class=\"date-item-day title\">\r\n    {{ date() | date: \"dd\" }}\r\n  </div>\r\n\r\n  <div class=\"date-item-month legenda\">\r\n    {{ date() | date: \"MMM\" }}\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ForgotPasswordComponent",
            "id": "component-ForgotPasswordComponent-2ce803a8f077f0dafc0fee767509817d1ec44b3aa533191413a57edda463beb7b1793a0c4342065611ef65c205c5855e9d41ece95479d31084211d8f1e8a76cf",
            "file": "src/app/pages/auth/forgot-password/forgot-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./forgot-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payload",
                    "defaultValue": "{\r\n    password: \"\",\r\n    email: \"\",\r\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\n\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  standalone: true,\r\n  imports: [ButtonComponent, InputTextComponent, FormsModule, ButtonBackComponent],\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrl: './forgot-password.component.scss'\r\n})\r\nexport class ForgotPasswordComponent {\r\n  payload = {\r\n    password: \"\",\r\n    email: \"\",\r\n  } as any;\r\n\r\n}\r\n",
            "styleUrl": "./forgot-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div id=\"forgot-password\">\r\n  <header id=\"forgot-password-header\">\r\n    <h1 class=\"title\">Esqueceu a sua senha ?</h1>\r\n    <p class=\"text\">\r\n      Enviaremos um email com um link temporario por onde é possível criar uma\r\n      nova senha.\r\n    </p>\r\n  </header>\r\n\r\n  <form #form=\"ngForm\" id=\"forgot-password-form\">\r\n    <app-input-text\r\n      name=\"email\"\r\n      [(ngModel)]=\"payload.email\"\r\n      id=\"email\"\r\n      type=\"email\"\r\n      label=\"Email\"\r\n      required\r\n      placeholder=\"Informe o seu email\"\r\n    />\r\n  </form>\r\n\r\n  <div id=\"forgot-password-footer\">\r\n    <app-button-back id=\"forgot-password-button-back\" />\r\n\r\n    <app-button id=\"forgot-password-submit-button\" [disabled]=\"!!form.invalid\">\r\n      Atualizar senha\r\n    </app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-4f307bfa6e2aef3751bc6b426b06bbb2964e0a41570d3e61fed73792e57c8f2f540023d3cb85156299a8293be73166fb0a796a0c504f33396261a77e463e3090",
            "file": "src/app/pages/logged-area/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userLogged",
                    "defaultValue": "this.userService.user()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "JumbotronWellcomeComponent",
                    "type": "component"
                },
                {
                    "name": "JumbotronProfileComponent",
                    "type": "component"
                },
                {
                    "name": "CollegeItemComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CollegeItemLoaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterLink } from '@angular/router';\r\n\r\nimport { UserLoggedService } from '@shared/services/user-logged/user-logged.service';\r\n\r\nimport { JumbotronWellcomeComponent } from '../../components/jumbotron-wellcome/jumbotron-wellcome.component';\r\nimport { JumbotronProfileComponent } from '../../components/jumbotron-profile/jumbotron-profile.component';\r\nimport { CollegeItemComponent } from '@shared/components/college-item/college-item/college-item.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { CollegeItemLoaderComponent } from '@shared/components/loaders/college-item-loader/college-item-loader.component';\r\nimport { Roles } from '@shared/enums/roles.enum';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterLink,\r\n    JumbotronWellcomeComponent,\r\n    JumbotronProfileComponent,\r\n    CollegeItemComponent,\r\n    ButtonComponent,\r\n    CollegeItemLoaderComponent,\r\n  ],\r\n  templateUrl: './home.component.html',\r\n  styleUrl: './home.component.scss'\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  userService = inject(UserLoggedService);\r\n  userLogged = this.userService.user();\r\n  router = inject(Router);\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    console.log(this.userLogged)\r\n    if (this.userLogged.user.role === Roles.STUDENT) {\r\n      await this.router.navigateByUrl(\"/area-logada/student\");\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./home.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"home-page\" class=\"container\">\r\n  @if (!userLogged.user || !userLogged.user.photo) {\r\n  <jumbotron-profile id=\"home-page-jumbotron-profile\" />\r\n  } @if (!userLogged.colleges || !userLogged.colleges.length) {\r\n  <jumbotron-wellcome id=\"home-page-jumbotron-wellcome\" />\r\n  } @else {\r\n  <h1 class=\"subtitle border\">Escolas</h1>\r\n  <ul>\r\n    @for (college of userLogged.colleges; track $index) {\r\n    <li>\r\n      <a [routerLink]=\"'./college/' + college.id\">\r\n        @defer (on viewport) {\r\n        <app-college-item [college]=\"college\" />\r\n        } @loading {\r\n        <app-college-item-loader />\r\n        } @placeholder {\r\n        <app-college-item-loader />\r\n        }\r\n      </a>\r\n    </li>\r\n    } @empty {\r\n    <li>\r\n      <h3 class=\"empty subtitle\">\r\n        Esta conta não possui nenhuma escola inclusa. Cadastre uma nova clicando\r\n        em “Nova Escola”\r\n      </h3>\r\n    </li>\r\n    }\r\n\r\n    <li>\r\n      <app-button routerLink=\"./create-college\" class=\"new-college\">\r\n        Nova Escola\r\n      </app-button>\r\n    </li>\r\n  </ul>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "InputCardComponent",
            "id": "component-InputCardComponent-b3656d1672f275ecb2253ec7a128a28652799b2d0466fa9ab815c04bba6f4de8ae03409210e364d7f54046878b166d1bb1ca498c31bbf2594dd33a2df258b427",
            "file": "src/app/shared/components/input-card/input-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputCardComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input` })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "valor",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "InputRadioComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, forwardRef, input } from '@angular/core';\r\nimport { InputRadioComponent } from \"../input-radio/input-radio.component\";\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\n    selector: 'app-input-card',\n    imports: [InputRadioComponent, FormsModule\n    ],\n    templateUrl: './input-card.component.html',\n    styleUrl: './input-card.component.scss',\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputCardComponent),\n        },\n    ]\n})\r\nexport class InputCardComponent implements OnInit, ControlValueAccessor {\r\n  readonly id = input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input` });\r\n  readonly valor = input(\"\");\r\n  readonly name = input(\"\");\r\n  val = '';\r\n\r\n  get value() {\r\n    return this.val;\r\n  }\r\n\r\n  set value(val: any) {\r\n    if (val !== undefined && val !== null) {\r\n      this.val = val;\r\n      this.onChange(val);\r\n      this.onTouched(val);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  onBlur() { }\r\n\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n",
            "styleUrl": "./input-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "templateData": "<label class=\"input-card\">\r\n  <div class=\"input-card-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <div class=\"input-card-footer\">\r\n    <ng-content select=\"[label]\"></ng-content>\r\n    <app-input-radio [(ngModel)]=\"value\" [value]=\"valor()\" [name]=\"id()\" />\r\n  </div>\r\n</label>\r\n"
        },
        {
            "name": "InputColorComponent",
            "id": "component-InputColorComponent-28f76b6f11e1b37b3ddf50625fee093e354628ee91873854237ba609cf108b4727e97952f2210b5d175c3727cd49163b743a00938c6b1c78970c5eeea58162fd",
            "file": "src/app/shared/components/input-color/input-color.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputColorComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-color",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-color.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "id",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "label",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getColorToValProperty",
                    "args": [
                        {
                            "name": "color",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nnecessidade do cypress pois no cypress quando disparamos\numa função com trigger não esta atualizando o ngModel do angular.\n\nFica como TODO como fazer isso de uma forma menos gambiarra\n",
                    "description": "<p>necessidade do cypress pois no cypress quando disparamos\numa função com trigger não esta atualizando o ngModel do angular.</p>\n<p>Fica como TODO como fazer isso de uma forma menos gambiarra</p>\n",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\r\nimport { Component, OnInit, forwardRef, input } from '@angular/core';\r\nimport { CommonModule, NgStyle } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-input-color',\r\n  imports: [FormsModule, NgStyle, CommonModule],\r\n  standalone: true,\r\n  templateUrl: './input-color.component.html',\r\n  styleUrl: './input-color.component.scss',\r\n  providers: [\r\n    {\r\n      multi: true,\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputColorComponent),\r\n    },\r\n  ]\r\n})\r\nexport class InputColorComponent implements OnInit, ControlValueAccessor {\r\n  readonly disabled = input(false);\r\n  readonly error = input(false);\r\n  readonly label = input('');\r\n  readonly id = input('');\r\n  val = '';\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  get value() {\r\n    return this.val;\r\n  }\r\n\r\n  set value(val) {\r\n    if (val !== undefined && val !== null) {\r\n      this.val = val;\r\n      this.onChange(val);\r\n      this.onTouched(val);\r\n    }\r\n  }\r\n\r\n  onBlur() { }\r\n\r\n  /**\r\n   * @description Essa função foi criada para atender ha uma\r\n   * necessidade do cypress pois no cypress quando disparamos\r\n   * uma função com trigger não esta atualizando o ngModel do angular.\r\n   *\r\n   * Fica como TODO como fazer isso de uma forma menos gambiarra\r\n   */\r\n  getColorToValProperty(color: any) {\r\n    this.value = color;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./input-color.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<div (click)=\"input.click()\" class=\"input-color\" [ngClass]=\"{ disabled: disabled() }\">\n  <div class=\"input-color_header\">\n    <label [for]=\"id() + '-input-color'\">{{ label() }}</label>\n  </div>\n\n  <div\n    class=\"input-color_square\"\n    [ngStyle]=\"{\n      backgroundColor: value\n    }\"\n  ></div>\n\n  <input\n    #input\n    type=\"color\"\n    hidden=\"true\"\n    [disabled]=\"disabled()\"\n    (change)=\"getColorToValProperty(input.value)\"\n    [(ngModel)]=\"value\"\n    [id]=\"id() + '-input-color'\"\n    [name]=\"id() + '-input-color'\"\n  />\n</div>\n"
        },
        {
            "name": "InputMsgErrorComponent",
            "id": "component-InputMsgErrorComponent-58521472e3ffa86ed8f818a5c382c9bebf2acc6f5bc079a3b75ecf5ac11ea96bb2da20cc0fe76b2ae0b781e6f5840fca89c10ac6af4ee781444247c0fde54c9e",
            "file": "src/app/shared/components/input-msg-error/input-msg-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-msg-error",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-msg-error.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "controler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "describeBy",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "errorMsg",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, input } from '@angular/core';\r\nimport { NgModel } from '@angular/forms';\r\nimport { MESSAGES_ERRO } from '@shared/data/messages-erros';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-input-msg-error',\r\n  templateUrl: './input-msg-error.component.html',\r\n  styleUrl: './input-msg-error.component.scss'\r\n})\r\nexport class InputMsgErrorComponent implements OnInit {\r\n  readonly controler = input.required<NgModel>();\r\n  readonly describeBy = input(\"\");\r\n  errorMsg = \"\";\r\n\r\n  ngOnInit() {\r\n    const controler = this.controler();\r\n    if (!controler.errors) return;\r\n\r\n    const errors = Object.keys(controler.errors);\r\n    const firstError = errors[0];\r\n\r\n    if (firstError) {\r\n      this.errorMsg = MESSAGES_ERRO[firstError];\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./input-msg-error.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [id]=\"describeBy()\" class=\"error-msg\">\r\n  {{ errorMsg }}\r\n</span>\r\n"
        },
        {
            "name": "InputRadioComponent",
            "id": "component-InputRadioComponent-726f8dde0fd5c2265d7bb7d3f3daef224e3d5e9a3fe650b33e1b090cbe433e4b03645e707693354466126fa19619d5a157015bf093f552df55010fd3f1e4be2c",
            "file": "src/app/shared/components/input-radio/input-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputRadioComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-radio",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-radio.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "value",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, forwardRef, input } from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\n    selector: 'app-input-radio',\n    imports: [FormsModule],\n    templateUrl: './input-radio.component.html',\n    styleUrl: './input-radio.component.scss',\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputRadioComponent),\n        },\n    ]\n})\r\nexport class InputRadioComponent implements OnInit, ControlValueAccessor {\r\n  readonly value = input(\"\");\r\n  readonly name = input(\"\");\r\n  readonly id = input(\"\");\r\n  val = '';\r\n\r\n  get _value() {\r\n    return this.val;\r\n  }\r\n\r\n  set _value(val: any) {\r\n    if (val !== undefined && val !== null) {\r\n      this.val = val;\r\n      this.onChange(val);\r\n      this.onTouched(val);\r\n    }\r\n  }\r\n\r\n  toggle(event: any) {\r\n    this._value = event\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  onBlur() { }\r\n\r\n  writeValue(value: any) {\r\n    this._value = value;\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n",
            "styleUrl": "./input-radio.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "_value": {
                    "name": "_value",
                    "setSignature": {
                        "name": "_value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "_value",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "templateData": "<label class=\"radio\">\r\n  <div class=\"radio-input\">\r\n    <input\r\n      type=\"radio\"\r\n      [value]=\"value()\"\r\n      [(ngModel)]=\"val\"\r\n      [name]=\"name()\"\r\n      (change)=\"toggle(val)\"\r\n      [id]=\"id()\"\r\n    />\r\n\r\n    <div class=\"radio-bullet\"></div>\r\n  </div>\r\n\r\n  <div class=\"radio-label\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</label>\r\n"
        },
        {
            "name": "InputTextComponent",
            "id": "component-InputTextComponent-7a7eb80f631ed96816ea06e057a2de0559be927b27532185f2ad1b7683fe3a0901a9360db13b97a539626ee0e4cee1e0ae3471de5b2fe60a8d292710a12f5eab",
            "file": "src/app/shared/components/input-text/input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputTextComponent),\n}",
                    "type": "component"
                },
                {
                    "name": "provideNgxMask()"
                }
            ],
            "selector": "app-input-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "describeBy",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "id",
                    "defaultValue": "input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input` })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "inputHTML",
                    "defaultValue": "viewChild.required<ElementRef>(\"inputHTML\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "label",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "mask",
                    "defaultValue": "input(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "type",
                    "defaultValue": "input(\"text\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgxMaskDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { AfterViewInit, Component, ElementRef, OnInit, forwardRef, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgxMaskDirective, provideNgxMask } from 'ngx-mask';\n\nexport enum InputTextTypes {\n  password = \"password\",\n  text = \"text\"\n}\n\n@Component({\n  selector: 'app-input-text',\n  standalone: true,\n  imports: [FormsModule, NgClass, NgxMaskDirective],\n  templateUrl: './input-text.component.html',\n  styleUrl: './input-text.component.scss',\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputTextComponent),\n    },\n    provideNgxMask()\n  ]\n})\nexport class InputTextComponent implements OnInit, ControlValueAccessor, AfterViewInit {\n  readonly placeholder = input('');\n  readonly disabled = input(false);\n  readonly success = input(false);\n  readonly error = input(false);\n  readonly label = input('');\n  readonly id = input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input` });\n  readonly type = input(\"text\");\n  readonly mask = input(\"\");\n  readonly autofocus = input(false);\n  readonly describeBy = input(\"\");\n  val = '';\n\n  readonly inputHTML = viewChild.required<ElementRef>(\"inputHTML\");\n\n  ngOnInit(): void { }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.autofocus()) return;\n\n    this.inputHTML().nativeElement.focus();\n  }\n\n\n  onBlur() { }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "styleUrl": "./input-text.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "AfterViewInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"input-text\" [ngClass]=\"{ 'has-error': error(), success: success(), disabled: disabled() }\">\n  <div class=\"input-text_header\">\n    <label [for]=\"id()\">{{ label() }}</label>\n\n    <div class=\"input-text_header_right\">\n      <ng-content select=\"[right]\"></ng-content>\n    </div>\n  </div>\n\n  <input\n    #inputHTML\n    [(ngModel)]=\"value\"\n    [disabled]=\"disabled()\"\n    [id]=\"id()\"\n    [name]=\"id()\"\n    [type]=\"type()\"\n    [mask]=\"mask()\"\n    [placeholder]=\"placeholder()\"\n    [attr.aria-invalid]=\"error()\"\n    [attr.aria-label]=\"label()\"\n    [attr.describe-by]=\"describeBy()\"\n  />\n</div>\n"
        },
        {
            "name": "InputUploadComponent",
            "id": "component-InputUploadComponent-37fa1e1138a1cda7ce4a50bdbdb1231ea37280c216d3eb1528048210198a8da6af7b7139c95b9c12aaa0532642a8f28bba8a7274b5cbbb85aef00423104d7498",
            "file": "src/app/shared/components/input-upload/input-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputUploadComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "input-upload",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-upload.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "initialImage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accept",
                    "defaultValue": "input('image/png, image/jpeg')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "icon",
                    "defaultValue": "faCloudUploadAlt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "defaultValue": "input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input-upload` })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "val",
                    "defaultValue": "{\r\n    b64: '',\r\n    file: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputPhotoValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule, NgIf } from '@angular/common';\r\nimport { Component, forwardRef, Input, OnInit, input } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { Utils } from '@shared/services/utils/utils.service';\r\n\r\nexport interface InputPhotoValue {\r\n  b64: string;\r\n  file: any;\r\n}\r\n@Component({\r\n  selector: 'input-upload',\r\n  standalone: true,\r\n  imports: [CommonModule, FontAwesomeModule],\r\n  templateUrl: './input-upload.component.html',\r\n  styleUrl: './input-upload.component.scss',\r\n  providers: [\r\n    {\r\n      multi: true,\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputUploadComponent),\r\n    },\r\n  ]\r\n})\r\nexport class InputUploadComponent implements OnInit, ControlValueAccessor {\r\n  readonly id = input(\"\", { transform: (value: string /*T:VAE*/) => `${value}-input-upload` });\r\n  @Input() initialImage?: string = '';\r\n  readonly disabled = input(false);\r\n  readonly accept = input('image/png, image/jpeg');\r\n  icon = faCloudUploadAlt\r\n  val: InputPhotoValue = {\r\n    b64: '',\r\n    file: '',\r\n  };\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  get value() {\r\n    return this.val;\r\n  }\r\n\r\n  set value(val) {\r\n    if (val !== undefined && val !== null) {\r\n      this.val = val;\r\n      this.onChange(val);\r\n      this.onTouched(val);\r\n    }\r\n  }\r\n\r\n  onBlur() { }\r\n\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  showImage(event: any): void {\r\n    const files: FileList = event.target.files;\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      const limit = 10 * Utils.byteValue;\r\n\r\n      if (files[0].size > limit) return;\r\n\r\n      this.value = {\r\n        b64: reader.result as string,\r\n        file: files[0],\r\n      };\r\n    };\r\n\r\n    reader.readAsDataURL(files[0]);\r\n  }\r\n}\r\n",
            "styleUrl": "./input-upload.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                }
            },
            "templateData": "<label\n  [id]=\"id()\"\n  [for]=\"id() + '-input-file'\"\n  class=\"input-upload\"\n  [ngClass]=\"{ disabled: disabled() }\"\n>\n  <input\n    type=\"file\"\n    [id]=\"id() + '-input-file'\"\n    [name]=\"id()\"\n    [disabled]=\"disabled()\"\n    [accept]=\"accept()\"\n    (change)=\"showImage($event)\"\n    class=\"input-upload_input\"\n  />\n  @if (value.b64) {\n    <img [src]=\"value.b64\" class=\"input-upload_preview\" />\n  } @else if (initialImage) {\n    <img [src]=\"initialImage\" class=\"input-upload_preview\" />\n  } @else {\n    <button type=\"button\" class=\"input-upload_button\">\n      <fa-icon [icon]=\"icon\"></fa-icon>\n    </button>\n  }\n</label>\n\n<span class=\"input-upload_text\">\n  <ng-content></ng-content>\n</span>\n"
        },
        {
            "name": "ItemBarComponent",
            "id": "component-ItemBarComponent-684c406b6c2965fee97764603e03a384085b7857e0de93b5a8bb717345ce38c8d926303e0ff9f02f20d06b71ae2322a072a2ba831439ae139ed7a2773d79b769",
            "file": "src/app/shared/components/item-bar/item-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./item-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "legend",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\n    selector: 'app-item-bar',\n    imports: [],\n    templateUrl: './item-bar.component.html',\n    styleUrl: './item-bar.component.scss'\n})\r\nexport class ItemBarComponent {\r\n  @Input() title = ''\r\n  @Input() legend = ''\r\n}\r\n",
            "styleUrl": "./item-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"item-bar\">\r\n  <div class=\"item-bar-content\">\r\n    @if (title) {\r\n      <div class=\"item-bar-title\">{{ title }}</div>\r\n    }\r\n    @if (legend) {\r\n      <div class=\"item-bar-legend\">{{ legend }}</div>\r\n    }\r\n  </div>\r\n  <div class=\"item-bar-icon\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "JumbotronComponent",
            "id": "component-JumbotronComponent-2053f8c611c3a2934d2bf7bf0f252793c6a7c69c9c50410f7f6405853e114f49d0e67647bfc3ee132b17ea15d9bcb8c1639a9ff901034745144cc9f779beb895",
            "file": "src/app/shared/components/jumbotron/jumbotron.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jumbotron",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jumbotron.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jumbotron',\r\n  standalone: true,\r\n  templateUrl: './jumbotron.component.html',\r\n  styleUrl: './jumbotron.component.scss'\r\n})\r\nexport class JumbotronComponent {\r\n\r\n}\r\n",
            "styleUrl": "./jumbotron.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"jumbotron\">\n  <div class=\"jumbotron-header\">\n    <ng-content select=\"[header]\"></ng-content>\n  </div>\n\n  <div class=\"jumbotron-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <footer class=\"jumbotron-footer\">\n    <ng-content select=\"[footer]\"></ng-content>\n  </footer>\n</div>\n"
        },
        {
            "name": "JumbotronNotificationComponent",
            "id": "component-JumbotronNotificationComponent-5d03820213e52c4591cb1a514e3080867aac808a7fbc87aaf611acfded0aab3e6ffd83445c46a82d0b3d90d1df4db9e5546fc36fc632e7bc27f34f52707aeda5",
            "file": "src/app/shared/components/jumbotron-notification/jumbotron-notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jumbotron-notification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jumbotron-notification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'jumbotron-notification',\n    imports: [],\n    templateUrl: './jumbotron-notification.component.html',\n    styleUrl: './jumbotron-notification.component.scss'\n})\nexport class JumbotronNotificationComponent {\n\n}\n",
            "styleUrl": "./jumbotron-notification.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"jumbotron-notification\">\n  <div class=\"jumbotron-notification-content\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"jumbotron-notification-ilustration\">\n    <img\n      src=\"/assets/ilustrations/celular-sm.png\"\n      alt=\"ilustração de dois jovens em volta de um smartfone\"\n    />\n  </div>\n</div>\n"
        },
        {
            "name": "JumbotronProfileComponent",
            "id": "component-JumbotronProfileComponent-395b78d27d9bf1ce458349c04e7690cbd01eceabe2659fe224840aa93113190ecfe4ac88687ee68461bb7d8a4d01057418a34d9c5d1f9776046ae2b1ac600d32",
            "file": "src/app/pages/logged-area/components/jumbotron-profile/jumbotron-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jumbotron-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jumbotron-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "JumbotronComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { JumbotronComponent } from '../../../../shared/components/jumbotron/jumbotron.component';\r\nimport { ButtonComponent } from '../../../../shared/components/button/button.component';\r\nimport { RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'jumbotron-profile',\r\n  standalone: true,\r\n  imports: [JumbotronComponent, ButtonComponent, RouterLink],\r\n  templateUrl: './jumbotron-profile.component.html',\r\n  styleUrl: './jumbotron-profile.component.scss'\r\n})\r\nexport class JumbotronProfileComponent {\r\n\r\n}\r\n",
            "styleUrl": "./jumbotron-profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-jumbotron id=\"jumbotron-profile\">\n  <h2 header class=\"title\">Finalize o seu cadastro</h2>\n\n  <p id=\"jumbotron-profile-description text\">\n    Nos ajude a entender melhor você, finalize o seu cadastro\n  </p>\n\n  <a routerLink=\"../profile\">\n    <app-button>Finalizar cadastro</app-button>\n  </a>\n</app-jumbotron>\n"
        },
        {
            "name": "JumbotronWellcomeComponent",
            "id": "component-JumbotronWellcomeComponent-60dba06a6ad17b201492a0d71204889a1855967b922ba98e3f093985cd661a7087a267a4e99582638af9e28dea7de33dc19bc15cff50846d83bd540c244970d0",
            "file": "src/app/pages/logged-area/components/jumbotron-wellcome/jumbotron-wellcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jumbotron-wellcome",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jumbotron-wellcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "JumbotronComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\n\r\nimport { JumbotronComponent } from '@shared/components/jumbotron/jumbotron.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\n\r\n@Component({\r\n  selector: 'jumbotron-wellcome',\r\n  standalone: true,\r\n  imports: [JumbotronComponent, ButtonComponent, RouterLink],\r\n  templateUrl: './jumbotron-wellcome.component.html',\r\n  styleUrl: './jumbotron-wellcome.component.scss'\r\n})\r\nexport class JumbotronWellcomeComponent {\r\n\r\n}\r\n",
            "styleUrl": "./jumbotron-wellcome.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-jumbotron>\n  <h1 class=\"hide-descktop title\" header>Seja bem vindo !!</h1>\n\n  <div>\n    <img\n      src=\"/assets/ilustrations/lecture.png\"\n      alt=\"Ilustração de uma palestra\"\n    />\n  </div>\n\n  <div footer>\n    <h1 class=\"hide-mobile title\" header>Seja bem vindo !!</h1>\n\n    <p class=\"subtitle hide-mobile text\">\n      começe criando um portal sua instituição clicando aqui\n    </p>\n\n    <a routerLink=\"../create-college\">\n      <app-button> crie uma nova instituição </app-button>\n    </a>\n  </div>\n</app-jumbotron>\n"
        },
        {
            "name": "LessonComponent",
            "id": "component-LessonComponent-23bd9d80c1774e15d2f282e576a3be98a871843f6bd3f4a3cc3eff15398853b254a1064aaa1f7a2f38bf83e053e9886294886cb74e9414e12e93cedbadbea011",
            "file": "src/app/pages/logged-area/pages/lesson/lesson.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./lesson.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#lesson",
                    "defaultValue": "inject(LessonService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sanitizer",
                    "defaultValue": "inject(DomSanitizer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "signal(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "alertTypes",
                    "defaultValue": "AlertTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "payload",
                    "defaultValue": "new LessonForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "videoType",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "byPassHTML",
                    "args": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "QuillEditorComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputRadioComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "InputUploadComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "LessonFormLoadingComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Component, inject, signal } from '@angular/core';\nimport { QuillEditorComponent } from 'ngx-quill';\n\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\nimport { InputRadioComponent } from '@shared/components/input-radio/input-radio.component';\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { LessonCreateRequest } from '@shared/services/lesson/lesson.model';\nimport { LessonService } from '@shared/services/lesson/lesson.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { LessonFormLoadingComponent } from './lesson-form-loading/lesson-form-loading.component';\n\nexport class LessonForm implements LessonCreateRequest {\n  content: any = \"\";\n  description = \"\";\n  urlContent = \"\";\n  courseId = 0;\n  title = \"\";\n  fileVideo: any = null;\n}\n\n@Component({\n  selector: 'app-lesson',\n  imports: [\n    QuillEditorComponent,\n    ReactiveFormsModule,\n    InputRadioComponent,\n    ButtonComponent,\n    FormsModule,\n    InputTextComponent,\n    InputUploadComponent,\n    AlertComponent,\n    ButtonBackComponent,\n    LessonFormLoadingComponent\n  ],\n  templateUrl: './lesson.component.html',\n  styleUrl: './lesson.component.scss'\n})\nexport class LessonComponent {\n  #sanitizer = inject(DomSanitizer);\n  #router = inject(ActivatedRoute);\n  #lesson = inject(LessonService);\n  alertTypes = AlertTypes;\n  alertType = AlertTypes.success;\n  payload = new LessonForm();\n  alertMessage = signal(\"\");\n  loading = signal(true);\n  videoType = \"\";\n\n  public ngOnInit(): void {\n    this.#router.paramMap.subscribe({\n      next: params => {\n        const collegeId = Number(params.get('id'));\n        this.payload.courseId = collegeId;\n\n        const lessonId = params.get('lessonId');\n        if (!lessonId) return this.loading.set(false);\n\n        this.#lesson.get(lessonId).subscribe({\n          next: (res) => {\n            this.payload.title = res.title;\n            this.payload.description = res.description;\n            this.payload.urlContent = res.urlContent;\n\n            if (this.payload.urlContent) {\n              this.videoType = \"link\";\n            }\n\n            this.loading.set(false);\n          },\n          error: (error: HttpErrorResponse) => {\n            this.alertType = AlertTypes.error;\n            this.alertMessage.set(error.error.message);\n            this.loading.set(false);\n          }\n        })\n      }\n    });\n  }\n\n  byPassHTML(html: string) {\n    return\n  }\n\n  create() {\n    const payload = this.payload;\n\n    if (payload.content) {\n      payload.content = this.#sanitizer.bypassSecurityTrustHtml(payload.content);\n    }\n\n    if (payload.fileVideo) {\n      payload.fileVideo = this.payload?.fileVideo?.file\n    }\n\n    this.#lesson.create(payload).subscribe({\n      next: () => {\n        this.alertType = AlertTypes.success;\n\n        this.alertMessage.set('Aula criada com sucesso!!');\n\n      },\n      error: (error: HttpErrorResponse) => {\n        this.alertType = AlertTypes.error;\n        this.alertMessage.set(error.error.message);\n      }\n    })\n  }\n}\n",
            "styleUrl": "./lesson.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section id=\"lesson\" class=\"container\">\r\n  <header id=\"lesson-header\">\r\n    <h1 class=\"subtitle border\">Aula</h1>\r\n  </header>\r\n\r\n  @defer (when !loading()) {\r\n    <form (ngSubmit)=\"create()\" id=\"lesson-form\" #form=\"ngForm\">\r\n      <app-input-text\r\n        name=\"title\"\r\n        [(ngModel)]=\"payload.title\"\r\n        id=\"lesson-form-title\"\r\n        type=\"title\"\r\n        [required]=\"true\"\r\n        label=\"Titulo\"\r\n        placeholder=\"Informe o titulo da aula\"\r\n      />\r\n\r\n      <app-input-text\r\n        [(ngModel)]=\"payload.description\"\r\n        name=\"description\"\r\n        id=\"lesson-form-description\"\r\n        [required]=\"true\"\r\n        label=\"Descrição\"\r\n        placeholder=\"Descreva o conteudo da aula\"\r\n      />\r\n\r\n      <div class=\"row\">\r\n        <alert\r\n          id=\"create-course-alert\"\r\n          [hideShadow]=\"true\"\r\n          [type]=\"alertTypes.info\"\r\n        >\r\n          Por questões de performance, é possível fazer um upload de no máximo\r\n          10. megabytes\r\n        </alert>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <app-input-radio\r\n          [required]=\"true\"\r\n          id=\"lesson-form-upload\"\r\n          [(ngModel)]=\"videoType\"\r\n          value=\"upload\"\r\n          name=\"video\"\r\n        >\r\n          Upload\r\n        </app-input-radio>\r\n\r\n        <app-input-radio\r\n          [required]=\"true\"\r\n          id=\"lesson-form-link\"\r\n          [(ngModel)]=\"videoType\"\r\n          value=\"link\"\r\n          name=\"video\"\r\n        >\r\n          Link\r\n        </app-input-radio>\r\n      </div>\r\n\r\n      @if (videoType === \"link\") {\r\n        <app-input-text\r\n          [(ngModel)]=\"payload.urlContent\"\r\n          name=\"urlContent\"\r\n          [required]=\"true\"\r\n          id=\"lesson-form-url\"\r\n          label=\"Link\"\r\n          placeholder=\"Link da video aula\"\r\n        />\r\n      }\r\n\r\n      @if (videoType === \"upload\") {\r\n        <input-upload\r\n          [(ngModel)]=\"payload.fileVideo\"\r\n          [required]=\"true\"\r\n          accept=\"video/mp4,video/x-m4v,video/*\"\r\n          name=\"video\"\r\n          id=\"video\"\r\n          >Video da aula</input-upload\r\n        >\r\n      }\r\n\r\n      <h2 class=\"subtitle\">Conteudo</h2>\r\n\r\n      <quill-editor\r\n        format=\"html\"\r\n        id=\"lesson-form-content\"\r\n        name=\"lesson-content\"\r\n        [(ngModel)]=\"payload.content\"\r\n      />\r\n\r\n      @if (alertMessage()) {\r\n        <alert id=\"create-course-alert\" [type]=\"alertType\">\r\n          {{ alertMessage() }}\r\n        </alert>\r\n      }\r\n\r\n      <footer id=\"lesson-form-footer\">\r\n        <app-button-back id=\"lesson-form-button-back\" />\r\n        <app-button\r\n          type=\"submit\"\r\n          id=\"lesson-form-submit\"\r\n          [disabled]=\"!!form.invalid\"\r\n        >\r\n          Criar aula\r\n        </app-button>\r\n      </footer>\r\n    </form>\r\n  } @placeholder (minimum 500ms) {\r\n    <app-lesson-form-loading />\r\n  }\r\n</section>\r\n"
        },
        {
            "name": "LessonFormLoadingComponent",
            "id": "component-LessonFormLoadingComponent-97a6e753ad7785e11f9ad6ddae7ad1d78e273e7907ac7f67c2215c834928ad6539aba6763fef31f30670ef5f7f41505c7fad3e523b41d0b5eb8df4451577961f",
            "file": "src/app/pages/logged-area/pages/lesson/lesson-form-loading/lesson-form-loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-form-loading",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./lesson-form-loading.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-lesson-form-loading',\r\n  imports: [],\r\n  templateUrl: './lesson-form-loading.component.html',\r\n  styleUrl: './lesson-form-loading.component.scss'\r\n})\r\nexport class LessonFormLoadingComponent { }\r\n",
            "styleUrl": "./lesson-form-loading.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"lesson-form-lading\">\r\n  <ul class=\"loading-list-item\">\r\n    @for (item of [1, 2]; track $index) {\r\n      <li>\r\n        <div role=\"listitem\" class=\"loading-item skeleton\"></div>\r\n      </li>\r\n    }\r\n  </ul>\r\n\r\n  <ul class=\"bullets-container\">\r\n    @for (item of [1, 2]; track $index) {\r\n      <li>\r\n        <div role=\"listitem\" class=\"loading-item skeleton bullets\"></div>\r\n      </li>\r\n    }\r\n  </ul>\r\n\r\n  <ul class=\"loading-list-item\">\r\n    @for (item of [1, 2]; track $index) {\r\n      <li>\r\n        <div role=\"listitem\" class=\"loading-item skeleton\"></div>\r\n      </li>\r\n    }\r\n  </ul>\r\n  <div class=\"loading-item skeleton textArea\"></div>\r\n</div>\r\n"
        },
        {
            "name": "ListCollegeComponent",
            "id": "component-ListCollegeComponent-88d62d69fe36f7803f118342b568c859a835f43cc163f9be1e64aee62b6e786d3ebb1fa377a0c0db783e9a2ffa0359620af0c85f0fdb5da16370bc7577735b64",
            "file": "src/app/pages/logged-area/pages/list-college/list-college.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-college",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list-college.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "messageError",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userLogged",
                    "defaultValue": "this.userService.user()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "JumbotronNotificationComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "CollegeItemComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, signal } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\n\r\nimport { JumbotronNotificationComponent } from '@shared/components/jumbotron-notification/jumbotron-notification.component';\r\nimport { CollegeItemComponent } from '@shared/components/college-item/college-item/college-item.component';\r\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { fadeAnimation } from '@shared/animations/fade/fade.animation';\r\nimport { College } from '@shared/services/college/collage.model';\r\nimport { UserLoggedService } from '@shared/services/user-logged/user-logged.service';\r\n\r\n@Component({\n    selector: 'app-list-college',\n    imports: [JumbotronNotificationComponent, ButtonComponent, AlertComponent, CollegeItemComponent, RouterModule],\n    templateUrl: './list-college.component.html',\n    styleUrl: './list-college.component.scss',\n    animations: [fadeAnimation]\n})\r\nexport class ListCollegeComponent implements OnInit {\r\n  userService = inject(UserLoggedService);\r\n  userLogged = this.userService.user();\r\n  alertType = AlertTypes.error;\r\n  messageError = \"\";\r\n\r\n  ngOnInit() { }\r\n}\r\n",
            "styleUrl": "./list-college.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section id=\"list-college\" class=\"container\">\n  <header id=\"list-college-header\">\n    <jumbotron-notification>\n      <p class=\"text\">Estou vendo que não tem nenhuma escola. Cadastre aqui.</p>\n    </jumbotron-notification>\n\n    <h1 class=\"subtitle border\">Escolas</h1>\n  </header>\n\n  <div id=\"list-college-container\">\n    <ul>\n      @for (college of userLogged.colleges; track $index) {\n        <li>\n          <a [routerLink]=\"'../college/' + college.id\">\n            <app-college-item [college]=\"college\" />\n          </a>\n        </li>\n      } @empty {\n        <li>\n          <h3 class=\"empty subtitle\">\n            Esta conta não possui nenhuma escola inclusa. Cadastre uma nova\n            clicando em “Nova Escola”\n          </h3>\n        </li>\n      }\n    </ul>\n\n    @if (messageError) {\n      <alert @fade [type]=\"alertType\"> {{ messageError }} </alert>\n    }\n  </div>\n\n  <footer id=\"list-college-footer\">\n    <app-button>Nova Escola</app-button>\n  </footer>\n</section>\n"
        },
        {
            "name": "ListPostComponent",
            "id": "component-ListPostComponent-d5efcf3e2bdf06a51b61dfa60d201910eed2170af7a6e678c2118de3f7a5d70bf3a3f70af893d797459c55d76b22fa630e218a2ee33e22a3a0b4a93e0adea848",
            "file": "src/app/pages/logged-area/pages/list-post/list-post.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-post",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list-post.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#postService",
                    "defaultValue": "inject(PostService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "posts",
                    "defaultValue": "this.#postService.list()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "PostLoadingComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "PostComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TrustHtmlPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, inject, OnInit } from '@angular/core';\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { PostLoadingComponent } from '@shared/components/loaders/post-loading/post-loading.component';\r\nimport { PostComponent } from '@shared/components/post/post.component';\r\nimport { PostService } from '@shared/services/post/post.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { TrustHtmlPipe } from '@shared/pipes/trust-html/trust-html.pipe';\r\n\r\n@Component({\n    selector: 'app-list-post',\n    imports: [\n        PostLoadingComponent,\n        ButtonBackComponent,\n        PostComponent,\n        AsyncPipe,\n        TrustHtmlPipe\n    ],\n    templateUrl: './list-post.component.html',\n    styleUrl: './list-post.component.scss'\n})\r\nexport class ListPostComponent {\r\n  #postService = inject(PostService);\r\n  posts = this.#postService.list();\r\n}\r\n",
            "styleUrl": "./list-post.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section id=\"list-post-page\" class=\"container\">\r\n  <header id=\"list-post-page-header\">\r\n    <h1 class=\"subtitle border\">Publicações</h1>\r\n  </header>\r\n\r\n  <div id=\"list-post-page-container\">\r\n    <ul>\r\n      @for (post of posts | async; track $index) {\r\n        <li>\r\n          @defer (on viewport) {\r\n            <app-post [postParams]=\"post\">\r\n              <span [innerHTML]=\"post.content | trustHtml\"> </span>\r\n            </app-post>\r\n            <app-post-loading />\r\n          } @loading {\r\n            <app-post-loading />\r\n          } @placeholder {\r\n            <app-post-loading />\r\n          }\r\n        </li>\r\n      } @empty {\r\n        <li>\r\n          <h3 class=\"empty subtitle\">Sem nenuma publicação encontrada.</h3>\r\n        </li>\r\n      }\r\n    </ul>\r\n  </div>\r\n\r\n  <footer id=\"list-post-page-footer\">\r\n    <app-button-back />\r\n  </footer>\r\n</section>\r\n"
        },
        {
            "name": "LoggedAreaComponent",
            "id": "component-LoggedAreaComponent-783a0b4ba9de23e8f00593d5e98e8f2bcba79dc01e6e85ec7abc139f16bb9394d705f906ce34778ebd4c7cef9ccdf8abff3d0593da1b36b1536a9dc0ade0f952",
            "file": "src/app/pages/logged-area/logged-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logged-area",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logged-area.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "LoggedPageComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\nimport { LoggedPageComponent } from '../../shared/components/logged-page/logged-page.component';\nimport { fadeAnimation } from '../../shared/animations/fade/fade.animation';\n\n@Component({\n    selector: 'app-logged-area',\n    imports: [LoggedPageComponent, RouterOutlet],\n    templateUrl: './logged-area.component.html',\n    styleUrl: './logged-area.component.scss',\n    animations: [\n        fadeAnimation\n    ]\n})\nexport class LoggedAreaComponent { }\n",
            "styleUrl": "./logged-area.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<logged-page>\r\n  <div [@fade]=\"outlet.isActivated ? outlet.activatedRoute : ''\">\r\n    <router-outlet #outlet=\"outlet\"></router-outlet>\r\n  </div>\r\n</logged-page>\r\n"
        },
        {
            "name": "LoggedPageComponent",
            "id": "component-LoggedPageComponent-c3d20a865b8e5a4a8d1c44c7ecee910e14c9060dfa80f38cc65f199bd1ef56a800f3bc8624e0071758561c585e4cb132819039b43f396008936b72648d0d9b70",
            "file": "src/app/shared/components/logged-page/logged-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "logged-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logged-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "userLogged",
                    "defaultValue": "this.#userService.user()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "AsideMenuComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonMenuComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "AvatarComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IuserToAvatarPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { CommonModule, NgClass } from '@angular/common';\r\n\r\nimport { UserLoggedService } from '@shared/services/user-logged/user-logged.service';\r\nimport { IuserToAvatarPipe } from '@shared/pipes/iuserToAvatar/iuser-to-avatar.pipe';\r\n\r\nimport { ButtonMenuComponent } from '../button-menu/button-menu.component';\r\nimport { AsideMenuComponent } from '../aside-menu/aside-menu.component';\r\nimport { AvatarComponent } from '../avatar/avatar.component';\r\n\r\n@Component({\n    selector: 'logged-page',\n    imports: [\n        AsideMenuComponent,\n        ButtonMenuComponent,\n        NgClass,\n        AvatarComponent,\n        CommonModule,\n        IuserToAvatarPipe\n    ],\n    templateUrl: './logged-page.component.html',\n    styleUrl: './logged-page.component.scss'\n})\r\nexport class LoggedPageComponent {\r\n  #userService = inject(UserLoggedService);\r\n  userLogged = this.#userService.user();\r\n  open = false;\r\n\r\n  logout() {\r\n    this.#userService.logout()\r\n  }\r\n}\r\n",
            "styleUrl": "./logged-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main\r\n  class=\"logged-page\"\r\n  [ngClass]=\"{\r\n    open: open,\r\n  }\"\r\n>\r\n  <div class=\"logged-page-aside\">\r\n    <app-aside-menu [userLogged]=\"userLogged\" (userLogout)=\"logout()\" />\r\n  </div>\r\n\r\n  <div class=\"logged-page-content\">\r\n    <header class=\"logged-page-header container\">\r\n      <app-button-menu\r\n        id=\"button-menu-header\"\r\n        [isOpen]=\"open\"\r\n        (click)=\"open = !open\"\r\n      />\r\n\r\n      <app-avatar\r\n        [content]=\"userLogged.user | iuserToAvatar\"\r\n        id=\"avatar-header\"\r\n      />\r\n    </header>\r\n\r\n    <ng-content></ng-content>\r\n  </div>\r\n</main>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-e74aab863290d1ca64878408e65eb8ae7b7b39a2c4cfde6ac8198e2f123dcc1fcfa8deebb50ca12128e48afc18bf4b99790c991552cca7cb9c99526b47d3346f",
            "file": "src/app/pages/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#liveAnnouncer",
                    "defaultValue": "inject(LiveAnnouncer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "error",
                    "defaultValue": "signal(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "payload",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "InputMsgErrorComponent",
                    "type": "component"
                },
                {
                    "name": "NgModelErrorPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router, RouterLink } from '@angular/router';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { FormsModule } from '@angular/forms';\n\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\nimport { ButtonComponent } from '@shared/components/button/button.component';\nimport { fadeAnimation } from '@shared/animations/fade/fade.animation';\n\nimport { AuthService } from '../services/auth/auth.service';\nimport { InputMsgErrorComponent } from '@shared/components/input-msg-error/input-msg-error.component';\nimport { NgModelErrorPipe } from '@shared/pipes/ngModel/ng-model-error.pipe';\nimport { Utils } from '@shared/services/utils/utils.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    InputTextComponent,\n    RouterLink,\n    FormsModule,\n    AlertComponent,\n    InputMsgErrorComponent,\n    NgModelErrorPipe\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [fadeAnimation]\n})\nexport class LoginComponent {\n  #liveAnnouncer = inject(LiveAnnouncer);\n  #authService = inject(AuthService);\n  alertType = AlertTypes.error;\n  #router = inject(Router);\n  error = signal(\"\");\n\n  payload: any = {};\n\n  submit() {\n    this.#authService.login(this.payload).subscribe({\n      next: ({ user }) => {\n        this.#liveAnnouncer.announce(\"Login realizado com sucesso\");\n        this.#router.navigateByUrl(Utils.getRouteByRole(user.role));\n      },\n      error: (error: HttpErrorResponse) => {\n        this.#liveAnnouncer.announce(\"Houve um erro ao realizar login\");\n        this.error.set(error.error.message[0]);\n      }\n    })\n  }\n}\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"login\">\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" class=\"login-form\">\n    <app-input-text\n      [(ngModel)]=\"payload.email\"\n      id=\"email\"\n      name=\"email\"\n      [autofocus]=\"true\"\n      [required]=\"true\"\n      label=\"Email\"\n      email\n      [error]=\"email | ngModelError\"\n      type=\"text\"\n      placeholder=\"Informe o seu email\"\n      #email=\"ngModel\"\n      describeBy=\"emailError\"\n    />\n\n    @if (email | ngModelError) {\n      <app-input-msg-error describeBy=\"emailError\" [controler]=\"email\" />\n    }\n\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      [required]=\"true\"\n      [error]=\"password | ngModelError\"\n      #password=\"ngModel\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n      describeBy=\"passwordError\"\n    />\n\n    @if (password | ngModelError) {\n      <app-input-msg-error describeBy=\"passwordError\" [controler]=\"password\" />\n    }\n\n    <a class=\"link\" id=\"login-forget-link\" routerLink=\"../recuperar-senha\">\n      Esqueceu a senha ? <span>Clique aqui.</span>\n    </a>\n\n    <a class=\"link\" id=\"login-register-link\" routerLink=\"../cadastrar\">\n      Ainda não tem uma conta ? <span>Cadastre-se !</span>\n    </a>\n\n    <div class=\"login-form-footer\">\n      <app-button type=\"submit\" id=\"login-submit\" [disabled]=\"!!form.invalid\">\n        Entrar\n      </app-button>\n    </div>\n  </form>\n\n  @if (error()) {\n    <alert @fade [type]=\"alertType\"> {{ error() }} </alert>\n  }\n</div>\n"
        },
        {
            "name": "NewPasswordComponent",
            "id": "component-NewPasswordComponent-68bc3628e7e0cfa5dc5a56dd1c3f3ee8cfb6f8f3ae706881406548d463529573bd47845e46873530b226b11a65063b7a12530148f725b379fec82c4d8558915c",
            "file": "src/app/pages/auth/new-password/new-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payload",
                    "defaultValue": "{\n    password: \"\",\n    email: \"\",\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-new-password',\n  imports: [ButtonComponent, InputTextComponent, FormsModule],\n  templateUrl: './new-password.component.html',\n  styleUrl: './new-password.component.scss'\n})\nexport class NewPasswordComponent {\n  payload = {\n    password: \"\",\n    email: \"\",\n  } as any;\n\n}\n",
            "styleUrl": "./new-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"register\">\n  <form #form=\"ngForm\" class=\"register-form\">\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n    />\n\n    <app-input-text\n      name=\"confirm_password\"\n      [(ngModel)]=\"payload.confirm_password\"\n      id=\"confirm_password\"\n      type=\"password\"\n      label=\"Confirme sua nova Senha\"\n      placeholder=\"Confirme sua nova senha\"\n    />\n  </form>\n\n  <div class=\"register-form-footer\">\n    <app-button [disabled]=\"!!form.invalid\"> Atualizar senha </app-button>\n  </div>\n</div>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-0dee779f966cb6c0087ae8a38d33d67c92453cbf3d9ae076922a056e49584b5fd504485092398d1f15d35630c5afdd3d3cca67689561dd626b79f0f1e4a3dc32",
            "file": "src/app/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { ButtonComponent } from '../../shared/components/button/button.component';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    RouterLink\n  ],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss'\n})\nexport class NotFoundComponent { }\n",
            "styleUrl": "./not-found.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"not-found\">\n  <div class=\"not-found-image\">\n    <picture>\n      <source\n        srcset=\"/assets/ilustrations/email-sm.png\"\n        media=\"(max-width: 768px)\"\n      />\n      <img\n        src=\"/assets/ilustrations/email-lg.png\"\n        alt=\"ilustração de dois jovens em volta de um smartfone\"\n        priority\n        fetchpriority=\"high\"\n      />\n    </picture>\n  </div>\n  <div class=\"not-found-route\">\n    <h3 class=\"not-found-description text\">\n      Em breve você recebera um email nosso com um link para cadastrar uma nova\n      senha.\n    </h3>\n    <app-button routerLink=\"/\"> Voltar para tela inicial </app-button>\n  </div>\n</div>\n"
        },
        {
            "name": "PageThumbComponent",
            "id": "component-PageThumbComponent-db38751b1b71b573ca2fc4101be5d7dcafd75e83fac597653ccb9daf2426d805686a854811429dfc8b43db52e77c6c32760c5c2cde9cb19593e9e3a96d422a6d",
            "file": "src/app/shared/components/page-thumb/page-thumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-thumb",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./page-thumb.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "college",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "college",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "defaultColor",
                    "defaultValue": "\"linear-gradient(#888, #000)\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\nimport { IPageThumbParams } from './page-thumb.interface';\n\n@Component({\n    selector: 'app-page-thumb',\n    imports: [],\n    templateUrl: './page-thumb.component.html',\n    styleUrl: './page-thumb.component.scss'\n})\nexport class PageThumbComponent {\n  readonly college = input.required<IPageThumbParams>();\n  defaultColor = \"linear-gradient(#888, #000)\";\n}\n",
            "styleUrl": "./page-thumb.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header\n  id=\"page-header\"\n  [style]=\"{ backgroundColor: college().primaryColor || defaultColor }\"\n>\n  <div id=\"page-header-overlay\"></div>\n  <div class=\"container\">\n    <img id=\"page-header-thumb\" [src]=\"college().thumb\" [alt]=\"college().name\" />\n  </div>\n</header>\n"
        },
        {
            "name": "PageThumbLoaderComponent",
            "id": "component-PageThumbLoaderComponent-f22ff35ab57251374b3b4cf1f7adaf33a5475435840222c72d1cf67e3291314b423cc869b6c0a2fb426d15654b31eab2a3fb6b314ad08f3b6ed2e724cc794cee",
            "file": "src/app/shared/components/loaders/page-thumb-loader/page-thumb-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-thumb-loader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./page-thumb-loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\n    selector: 'app-page-thumb-loader',\n    imports: [],\n    templateUrl: './page-thumb-loader.component.html',\n    styleUrl: './page-thumb-loader.component.scss'\n})\r\nexport class PageThumbLoaderComponent {\r\n\r\n}\r\n",
            "styleUrl": "./page-thumb-loader.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header id=\"page-header\" class=\"skeleton\"></header>\r\n"
        },
        {
            "name": "PostComponent",
            "id": "component-PostComponent-2df79e2a7d722e03e5b8ed84b8468b617caee13201e8bbdc38339a5e3d06ccaca81afaaa03ed618c2ede08bcbcf98f7e65e450fd06d040a99b15420d88dd7fd4",
            "file": "src/app/shared/components/post/post.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./post.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "postParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "postParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "AvatarProfileComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\r\n\r\nimport { AvatarProfileComponent } from \"../avatar-profile/avatar-profile.component\";\r\nimport { IAvatarParans } from '../avatar/avatar.component';\r\n\r\nexport interface IPost extends IAvatarParans { }\r\n\r\n@Component({\r\n  selector: 'app-post',\r\n  imports: [AvatarProfileComponent],\r\n  templateUrl: './post.component.html',\r\n  styleUrl: './post.component.scss'\r\n})\r\nexport class PostComponent {\r\n  readonly postParams = input.required<IPost>();\r\n}\r\n",
            "styleUrl": "./post.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"post\">\r\n  <div class=\"post-header\">\r\n    <app-avatar-profile [content]=\"postParams()\" />\r\n  </div>\r\n\r\n  <div class=\"post-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PostLoadingComponent",
            "id": "component-PostLoadingComponent-bbf36b1c66bb9204db10576e9d8a6483ce8abb81141274b2e570c6dab6cda917504edcd2cdf3d040716ef43155e4a3bdf0911d1132b2cd19b8a0644d4236b223",
            "file": "src/app/shared/components/loaders/post-loading/post-loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-loading",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./post-loading.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "AvatarProfileLoadingComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AvatarProfileLoadingComponent } from '../avatar-profile-loading/avatar-profile-loading.component';\r\n\r\n@Component({\n    selector: 'app-post-loading',\n    imports: [AvatarProfileLoadingComponent],\n    templateUrl: './post-loading.component.html',\n    styleUrl: './post-loading.component.scss'\n})\r\nexport class PostLoadingComponent {\r\n\r\n}\r\n",
            "styleUrl": "./post-loading.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"post\">\r\n  <div class=\"post-header\">\r\n    <app-avatar-profile-loading />\r\n  </div>\r\n\r\n  <div class=\"post-content\">\r\n    <div class=\"skeleton bar lg\"></div>\r\n    <div class=\"skeleton bar md\"></div>\r\n    <div class=\"skeleton bar sm\"></div>\r\n    <div class=\"skeleton bar lg\"></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-c2f3cb0b76da8b9e9d3d380bef0871af6404584b446f6dfa59e690424ccadd431d3898c3c9b9953547313dfadd7b6c3db43ba500f1c5eb26cc9c017a883152a2",
            "file": "src/app/pages/logged-area/pages/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#profileService",
                    "defaultValue": "inject(ProfileService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "avatarSize",
                    "defaultValue": "AvatarSizeParam.large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "payload",
                    "defaultValue": "{\r\n    documentNumber: \"\",\r\n    //TODO adicionar ao banco de dados o campo telefone\r\n    // celphone: \"\",\r\n    email: \"\",\r\n    photo: \"\",\r\n    name: \"\",\r\n  } as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "InputUploadComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterLink } from '@angular/router';\r\n\r\nimport { InputUploadComponent } from '@shared/components/input-upload/input-upload.component';\r\nimport { AvatarSizeParam } from '@shared/components/avatar/avatar.component';\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { InputTextComponent } from '@shared/components/input-text/input-text.component';\r\nimport { AlertComponent, AlertTypes } from '@shared/components/alert/alert.component';\r\nimport { UserLoggedService } from '@shared/services/user-logged/user-logged.service';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { fadeAnimation } from '@shared/animations/fade/fade.animation';\r\n\r\nimport { ProfileService } from './services/profile/profile.service';\r\n@Component({\r\n  selector: 'app-profile',\r\n  imports: [\r\n    InputTextComponent,\r\n    ButtonComponent,\r\n    AlertComponent,\r\n    FormsModule,\r\n    RouterLink,\r\n    ButtonBackComponent,\r\n    InputUploadComponent\r\n  ],\r\n  templateUrl: './profile.component.html',\r\n  styleUrl: './profile.component.scss',\r\n  animations: [fadeAnimation]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  #userService = inject(UserLoggedService);\r\n  #profileService = inject(ProfileService);\r\n  alertType = AlertTypes.success;\r\n  avatarSize = AvatarSizeParam.large;\r\n  alertMessage = \"\"\r\n  payload = {\r\n    documentNumber: \"\",\r\n    //TODO adicionar ao banco de dados o campo telefone\r\n    // celphone: \"\",\r\n    email: \"\",\r\n    photo: \"\",\r\n    name: \"\",\r\n  } as any;\r\n\r\n  ngOnInit(): void {\r\n    const loggedUser = this.#userService.user();\r\n    if (!loggedUser) return;\r\n\r\n    const user = loggedUser.user;\r\n\r\n    this.payload.photo = user.photo;\r\n    this.payload.email = user.email;\r\n    this.payload.name = user.name;\r\n  }\r\n\r\n  submit() {\r\n    const payload = JSON.parse(JSON.stringify(this.payload));\r\n    if (payload.photo) payload.photo = payload.photo.file;\r\n\r\n    this.#profileService.updateProfile(payload).subscribe({\r\n      next: (updatedUser) => {\r\n        this.alertType = AlertTypes.success;\r\n        this.#userService.updatetUser(updatedUser);\r\n        this.payload.photo = updatedUser.photo;\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.alertType = AlertTypes.error;\r\n        this.alertMessage = error.error.message;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"profile\" class=\"container\">\r\n  <header id=\"profile-header\">\r\n    <h1 class=\"subtitle border\">Perfil</h1>\r\n  </header>\r\n\r\n  <div id=\"profile-avatar\">\r\n    <input-upload\r\n      id=\"photo\"\r\n      [initialImage]=\"payload.photo\"\r\n      [(ngModel)]=\"payload.photo\"\r\n    />\r\n  </div>\r\n\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" id=\"profile-container\">\r\n    <app-input-text\r\n      class=\"field\"\r\n      [(ngModel)]=\"payload.documentNumber\"\r\n      id=\"document_number\"\r\n      name=\"document_number\"\r\n      [required]=\"true\"\r\n      mask=\"000.000.000-AA\"\r\n      label=\"CPF\"\r\n      type=\"text\"\r\n      placeholder=\"Informe o CPF do novo usuario\"\r\n    ></app-input-text>\r\n\r\n    <app-input-text\r\n      class=\"field\"\r\n      [(ngModel)]=\"payload.email\"\r\n      id=\"email\"\r\n      name=\"email\"\r\n      [required]=\"true\"\r\n      email\r\n      label=\"Email\"\r\n      type=\"text\"\r\n      placeholder=\"Informe o seu email\"\r\n    ></app-input-text>\r\n\r\n    <app-input-text\r\n      class=\"field\"\r\n      [(ngModel)]=\"payload.name\"\r\n      id=\"name\"\r\n      name=\"name\"\r\n      [required]=\"true\"\r\n      label=\"name\"\r\n      type=\"text\"\r\n      placeholder=\"Informe o seu nome\"\r\n    ></app-input-text>\r\n\r\n    <!-- <app-input-text\r\n      class=\"field\"\r\n      [(ngModel)]=\"payload.celphone\"\r\n      id=\"celphone\"\r\n      name=\"celphone\"\r\n      [required]=\"true\"\r\n      label=\"Telefone\"\r\n      type=\"text\"\r\n      mask=\"(00) 0 0000-0000\"\r\n      placeholder=\"Informe o seu nome\"\r\n    ></app-input-text> -->\r\n\r\n    <footer id=\"profile-footer\">\r\n      <app-button-back\r\n        id=\"profile-back-button\"\r\n        routerLink=\"../home\"\r\n      ></app-button-back>\r\n\r\n      <app-button\r\n        id=\"profile-submit-button\"\r\n        type=\"submit\"\r\n        [disabled]=\"!!form.invalid\"\r\n      >\r\n        Atualizar perfil\r\n      </app-button>\r\n\r\n      @if (alertMessage) {\r\n        <alert id=\"profile-alert\" @fade [type]=\"alertType\">\r\n          {{ alertMessage }}\r\n        </alert>\r\n      }\r\n    </footer>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-70f137d44ca65cd85273ad0b9bf4591def46487e1996f547a3c997f4ded1844335e568b9847f3cbbb50a6e46b2ea7126ced0ea73779f488c8741b58d0c04d67b",
            "file": "src/app/shared/components/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progress",
                    "defaultValue": "input(\"\", { transform: (value: number /*T:VAE*/) => `${value} %` })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\n\r\n@Component({\n    selector: 'app-progress-bar',\n    imports: [NgStyle],\n    templateUrl: './progress-bar.component.html',\n    styleUrl: './progress-bar.component.scss'\n})\r\nexport class ProgressBarComponent {\r\n  readonly progress = input(\"\", { transform: (value: number /*T:VAE*/) => `${value} %` });\r\n}\r\n",
            "styleUrl": "./progress-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span role=\"progressbar\" max=\"100\" class=\"progressbar\">\r\n  <span [ngStyle]=\"{ width: progress() }\" class=\"progressbar-bar\"></span>\r\n</span>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-5311d08aec721cd6f53defeeb29edff3a6f8e6d8caaa6ca4a2d9f53cc18cc1b2835e6be4f3a74467ec4a47a72836172db74af464ee1b75a74ecf6286a116db95",
            "file": "src/app/pages/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#liveAnnouncer",
                    "defaultValue": "inject(LiveAnnouncer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "error",
                    "defaultValue": "signal(\"\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "payload",
                    "defaultValue": "new RegisterPayload()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "InputMsgErrorComponent",
                    "type": "component"
                },
                {
                    "name": "NgModelErrorPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormsModule } from '@angular/forms';\r\nimport { Component, inject, signal } from '@angular/core';\r\nimport { Router, RouterLink } from '@angular/router';\r\n\r\nimport { InputTextComponent } from '../../../shared/components/input-text/input-text.component';\r\nimport { AlertComponent, AlertTypes } from '../../../shared/components/alert/alert.component';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { AuthService } from '../services/auth/auth.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { fadeAnimation } from '../../../shared/animations/fade/fade.animation';\r\nimport { NgModelErrorPipe } from '@shared/pipes/ngModel/ng-model-error.pipe';\r\nimport { InputMsgErrorComponent } from '@shared/components/input-msg-error/input-msg-error.component';\r\nimport { RegisterPayload } from './register.model';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Utils } from '@shared/services/utils/utils.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    InputTextComponent,\r\n    RouterLink,\r\n    FormsModule,\r\n    AlertComponent,\r\n    InputMsgErrorComponent,\r\n    NgModelErrorPipe\r\n  ],\r\n  templateUrl: './register.component.html',\r\n  styleUrl: './register.component.scss',\r\n  animations: [fadeAnimation]\r\n})\r\nexport class RegisterComponent {\r\n  #liveAnnouncer = inject(LiveAnnouncer);\r\n  #authService = inject(AuthService);\r\n  payload = new RegisterPayload();\r\n  alertType = AlertTypes.error;\r\n  #router = inject(Router);\r\n  error = signal(\"\");\r\n\r\n  submit() {\r\n    this.#authService.register(this.payload).subscribe({\r\n      next: ({ user }) => {\r\n        this.#liveAnnouncer.announce(\"Login realizado com sucesso\");\r\n        this.#router.navigateByUrl(Utils.getRouteByRole(user.role));\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.#liveAnnouncer.announce(\"Houve um erro ao realizar login\");\r\n        this.error.set(error.error.message);\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"register\">\n  <form #form=\"ngForm\" (ngSubmit)=\"submit()\" class=\"register-form\">\n    <app-input-text\n      [(ngModel)]=\"payload.name\"\n      id=\"name\"\n      name=\"name\"\n      [required]=\"true\"\n      label=\"Nome\"\n      type=\"text\"\n      placeholder=\"Informe o seu nome\"\n      #name=\"ngModel\"\n      [autofocus]=\"true\"\n      [error]=\"name | ngModelError\"\n    />\n\n    @if (name | ngModelError) {\n      <app-input-msg-error [controler]=\"name\" />\n    }\n\n    <app-input-text\n      [(ngModel)]=\"payload.email\"\n      id=\"email\"\n      name=\"email\"\n      [required]=\"true\"\n      label=\"Email\"\n      email\n      type=\"text\"\n      placeholder=\"Informe o seu email\"\n      #email=\"ngModel\"\n      [error]=\"email | ngModelError\"\n    />\n\n    @if (email | ngModelError) {\n      <app-input-msg-error [controler]=\"email\" />\n    }\n\n    <app-input-text\n      name=\"password\"\n      [(ngModel)]=\"payload.password\"\n      id=\"password\"\n      type=\"password\"\n      [required]=\"true\"\n      label=\"Senha\"\n      placeholder=\"Informe a sua senha\"\n      #password=\"ngModel\"\n      [error]=\"password | ngModelError\"\n    />\n\n    @if (password | ngModelError) {\n      <app-input-msg-error [controler]=\"password\" />\n    }\n\n    <app-input-text\n      name=\"confirm_password\"\n      [(ngModel)]=\"payload.confirm_password\"\n      id=\"confirm_password\"\n      type=\"password\"\n      [required]=\"true\"\n      label=\"Confirme sua Senha\"\n      placeholder=\"Confirme sua senha\"\n      #confirmPassword=\"ngModel\"\n      [error]=\"confirmPassword | ngModelError\"\n    />\n\n    @if (confirmPassword | ngModelError) {\n      <app-input-msg-error [controler]=\"confirmPassword\" />\n    }\n\n    <app-input-text\n      [(ngModel)]=\"payload.documentNumber\"\n      id=\"document_number\"\n      name=\"document_number\"\n      [required]=\"true\"\n      mask=\"000.000.000-AA\"\n      label=\"CPF\"\n      type=\"text\"\n      placeholder=\"Informe o seu email\"\n      #documentNumber=\"ngModel\"\n      [error]=\"documentNumber | ngModelError\"\n    />\n\n    @if (documentNumber | ngModelError) {\n      <app-input-msg-error [controler]=\"documentNumber\" />\n    }\n\n    <a class=\"link\" id=\"register-login-link\" routerLink=\"../login\">\n      Já tem uma conta ? <span>Entre!</span>\n    </a>\n\n    <div class=\"register-form-footer\">\n      <app-button\n        id=\"register-submit\"\n        type=\"submit\"\n        [disabled]=\"\n          !!form.invalid || payload.password != payload.confirm_password\n        \"\n      >\n        Entrar\n      </app-button>\n    </div>\n  </form>\n\n  @if (error()) {\n    <alert @fade [type]=\"alertType\"> {{ error() }} </alert>\n  }\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-af56147f00dabbcdb6df9ceacc770085403b8adb88c1274cd8c7495defcbffeee6de489690dc5c051b2c2ca753667e38fa6d90fc234bf9efdf717413ffcbe084",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISelectOptions[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "id",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "label",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "options",
                    "defaultValue": "input<ISelectOptions[] | null>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "showOptions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "val",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "filterOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "ISelectOptions[]",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit, forwardRef, input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputTextComponent } from '../input-text/input-text.component';\n\nexport interface ISelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n    selector: 'app-select',\n    imports: [CommonModule, FormsModule, InputTextComponent],\n    templateUrl: './select.component.html',\n    styleUrl: './select.component.scss',\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SelectComponent),\n        },\n    ]\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  readonly placeholder = input('');\n  readonly error = input(false);\n  readonly label = input('');\n  readonly id = input('');\n  readonly options = input<ISelectOptions[] | null>([]);\n  _options: ISelectOptions[] | null = [];\n  inputValue = '';\n  showOptions = false;\n  val = '';\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  get value() {\n    return this.val;\n  }\n\n  set value(val) {\n    if (val !== undefined && val !== null) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouched(val);\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this._options = this.options();\n  }\n\n  setValue(product: any) {\n    this.showOptions = false;\n\n    this.inputValue = product.label;\n    this.value = product.value;\n  }\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  filterOptions(): ISelectOptions[] {\n    const options = this.options();\n    if (!options) return [];\n    this._options = options.filter(({ label }) => label.includes(this.inputValue));\n    return this._options;\n  }\n\n}\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"select\">\n  <div class=\"select_input\">\n    <app-input-text\n      (click)=\"showOptions = true\"\n      (blur)=\"showOptions = false\"\n      [label]=\"label()\"\n      [placeholder]=\"placeholder()\"\n      [(ngModel)]=\"inputValue\"\n      (ngModelChange)=\"filterOptions()\"\n      [id]=\"id()\"\n    >\n    </app-input-text>\n  </div>\n\n  <ul class=\"select_options scroll-style\" [ngClass]=\"{ show: showOptions }\">\n    @for (option of _options; track $index) {\n      <li (click)=\"setValue(option)\" class=\"select_options_item\">\n        {{ option.label }}\n      </li>\n    } @empty {\n      <li (click)=\"showOptions = false\" class=\"select_options_empty\">\n        sem resultados\n      </li>\n    }\n  </ul>\n</div>\n"
        },
        {
            "name": "SingleComponent",
            "id": "component-SingleComponent-8266807ef612431a992d10455cf8d51513f7d8725551934a430978e9a308a4e97bb3bc2afe7d202ffabc6ff294d771db95365ed91dc2af89b5a4767c26916798",
            "file": "src/app/pages/logged-area/pages/lesson/single/single.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-single",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./single.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#lesson",
                    "defaultValue": "inject(LessonService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lesson",
                    "defaultValue": "signal<any>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "TabsComponent",
                    "type": "component"
                },
                {
                    "name": "TabComponent",
                    "type": "component"
                },
                {
                    "name": "TabContentDirective",
                    "type": "directive"
                },
                {
                    "name": "TabHeaderDirective",
                    "type": "directive"
                },
                {
                    "name": "VideoPlayerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit, signal } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { TabComponent } from '@shared/components/tab/tab.component';\r\nimport { TabContentDirective, TabHeaderDirective, TabsComponent } from '@shared/components/tabs/tabs.component';\r\nimport { VideoPlayerComponent } from '@shared/components/video-player/video-player.component';\r\nimport { LessonService } from '@shared/services/lesson/lesson.service';\r\n\r\n@Component({\r\n  selector: 'app-single',\r\n  imports: [\r\n    ButtonComponent,\r\n    ButtonBackComponent,\r\n    TabsComponent,\r\n    TabComponent,\r\n    TabContentDirective,\r\n    TabHeaderDirective,\r\n    VideoPlayerComponent\r\n  ],\r\n  templateUrl: './single.component.html',\r\n  styleUrl: './single.component.scss'\r\n})\r\nexport class SingleComponent implements OnInit {\r\n  #router = inject(ActivatedRoute);\r\n  #lesson = inject(LessonService);\r\n  lesson = signal<any>({});\r\n\r\n  loading = signal(true);\r\n\r\n  public ngOnInit(): void {\r\n    this.#router.paramMap.subscribe({\r\n      next: params => {\r\n        const lessonId = params.get('id');\r\n        if (!lessonId) return this.loading.set(false);\r\n\r\n        this.#lesson.get(lessonId).subscribe({\r\n          next: (res) => {\r\n            this.lesson.update((lesson) => lesson = res);\r\n            this.loading.set(false);\r\n          },\r\n          error: () => {\r\n            this.loading.set(false);\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./single.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section id=\"lesson-single\" class=\"container\">\r\n  <header id=\"lesson-single-header\">\r\n    <h1 class=\"subtitle border\">Aula</h1>\r\n  </header>\r\n\r\n  <app-video-player [options]=\"{ src: 'https://www.youtube.com/watch?v=irSp2gwJi4A'}\" id=\"lesson-single-video\" />\r\n\r\n  <div [innerHTML]=\"lesson().content\" id=\"lesson-single-description\"></div>\r\n\r\n  <div id=\"lesson-single-tabs\">\r\n    <app-tabs>\r\n      <app-tab>\r\n        <ng-template appTabHeader>\r\n          <h2 class=\"subtitle border\">Atividades</h2>\r\n        </ng-template>\r\n\r\n        <ng-template appTabContent>\r\n          <div id=\"student-ativeidade-content\">Atividades content</div>\r\n        </ng-template>\r\n      </app-tab>\r\n\r\n      <app-tab>\r\n        <ng-template appTabHeader>\r\n          <h2 class=\"subtitle border\">Histórico</h2>\r\n        </ng-template>\r\n\r\n        <ng-template appTabContent>\r\n          <span>Conteúdo da Tab Histórico</span>\r\n        </ng-template>\r\n      </app-tab>\r\n    </app-tabs>\r\n  </div>\r\n\r\n  <footer id=\"lesson-single-footer\">\r\n    <app-button-back id=\"lesson-single-button-back\" />\r\n    <app-button id=\"lesson-single-watch\"> Assistir as aulas </app-button>\r\n  </footer>\r\n</section>\r\n"
        },
        {
            "name": "StudentComponent",
            "id": "component-StudentComponent-f12987bb267a450ad9c831692698649c907fa255c78dfed9365bdd0e24777382eb0e3579cbb8ae0001ae014cd49237e480efc694bebbdcda64f1ef35e0102d43",
            "file": "src/app/pages/logged-area/pages/student/student.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./student.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#postService",
                    "defaultValue": "inject(PostService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#userService",
                    "defaultValue": "inject(UserLoggedService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "alertType",
                    "defaultValue": "AlertTypes.success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "avatarSize",
                    "defaultValue": "AvatarSizeParam.large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "courses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICourse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "posts",
                    "defaultValue": "this.#postService.list()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "userLogged",
                    "defaultValue": "this.#userService.user()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "TabsComponent",
                    "type": "component"
                },
                {
                    "name": "TabComponent",
                    "type": "component"
                },
                {
                    "name": "TabContentDirective",
                    "type": "directive"
                },
                {
                    "name": "TabHeaderDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "JumbotronProfileComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "PostLoadingComponent",
                    "type": "component"
                },
                {
                    "name": "PostComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TrustHtmlPipe",
                    "type": "pipe"
                },
                {
                    "name": "IuserToAvatarPipe",
                    "type": "pipe"
                },
                {
                    "name": "AvatarComponent",
                    "type": "component"
                },
                {
                    "name": "CourseItemComponent",
                    "type": "component"
                },
                {
                    "name": "ProgressBarComponent",
                    "type": "component"
                },
                {
                    "name": "CalendarComponent",
                    "type": "component"
                },
                {
                    "name": "CalendarLegendComponent",
                    "type": "component"
                },
                {
                    "name": "TimeLineComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\nimport { JumbotronProfileComponent } from '@pages/logged-area/components/jumbotron-profile/jumbotron-profile.component';\r\nimport { AlertTypes } from '@shared/components/alert/alert.component';\r\nimport { AvatarComponent, AvatarSizeParam } from '@shared/components/avatar/avatar.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\nimport { CalendarLegendComponent } from '@shared/components/calendar-legend/calendar-legend.component';\r\nimport { CalendarComponent } from '@shared/components/calendar/calendar.component';\r\nimport { CourseItemComponent } from '@shared/components/course-item/course-item.component';\r\nimport { PostLoadingComponent } from '@shared/components/loaders/post-loading/post-loading.component';\r\nimport { PostComponent } from '@shared/components/post/post.component';\r\nimport { ProgressBarComponent } from '@shared/components/progress-bar/progress-bar.component';\r\nimport { TabComponent } from '@shared/components/tab/tab.component';\r\nimport { TabContentDirective, TabHeaderDirective, TabsComponent } from '@shared/components/tabs/tabs.component';\r\nimport { TimeLineComponent } from '@shared/components/time-line/time-line.component';\r\nimport { IuserToAvatarPipe } from '@shared/pipes/iuserToAvatar/iuser-to-avatar.pipe';\r\nimport { TrustHtmlPipe } from '@shared/pipes/trust-html/trust-html.pipe';\r\nimport { ICourse } from '@shared/services/course/course.model';\r\nimport { PostService } from '@shared/services/post/post.service';\r\nimport { UserLoggedService } from '@shared/services/user-logged/user-logged.service';\r\n\r\n@Component({\r\n  selector: 'app-student',\r\n  imports: [\r\n    TabsComponent,\r\n    TabComponent,\r\n    TabContentDirective,\r\n    TabHeaderDirective,\r\n    RouterLink,\r\n    JumbotronProfileComponent,\r\n    ButtonComponent,\r\n    PostLoadingComponent,\r\n    PostComponent,\r\n    AsyncPipe,\r\n    TrustHtmlPipe,\r\n    IuserToAvatarPipe,\r\n    AvatarComponent,\r\n    CourseItemComponent,\r\n    ProgressBarComponent,\r\n    CalendarComponent,\r\n    CalendarLegendComponent,\r\n    TimeLineComponent\r\n  ],\r\n  templateUrl: './student.component.html',\r\n  styleUrl: './student.component.scss'\r\n})\r\nexport class StudentComponent {\r\n  #postService = inject(PostService);\r\n  #userService = inject(UserLoggedService);\r\n\r\n  posts = this.#postService.list();\r\n  userLogged = this.#userService.user();\r\n\r\n  avatarSize = AvatarSizeParam.large;\r\n  courses: ICourse[] = [];\r\n\r\n  alertType = AlertTypes.success;\r\n  alertMessage = \"\";\r\n\r\n  ngOnInit(): void {\r\n    const course: ICourse = {\r\n      \"id\": 2,\r\n      \"createdAt\": \"2024-09-16T19:15:02.315Z\",\r\n      \"updatedAt\": \"2024-09-16T19:15:02.315Z\",\r\n      \"name\": \"Conceitos de computação I\",\r\n      \"thumb\": \"https://imagedelivery.net/Bpbv9d8J9NqFhm--zUdxEA/2bc5647a-6236-4cc6-57e0-d2b6a267fb00/public\",\r\n      \"collegeId\": 4,\r\n      \"content\": \"\"\r\n    }\r\n\r\n    this.courses = Array(20).fill(course)\r\n  }\r\n}\r\n",
            "styleUrl": "./student.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main id=\"student\">\r\n  <aside id=\"student-aside\">\r\n    @if (userLogged.user) {\r\n    <app-avatar\r\n      id=\"student-aside-avatar\"\r\n      [size]=\"avatarSize\"\r\n      [content]=\"userLogged.user | iuserToAvatar\"\r\n    />\r\n\r\n    <span id=\"student-aside-avatar-name\" class=\"subtitle\">\r\n      {{ userLogged.user.name }}\r\n    </span>\r\n    } @else {\r\n    <jumbotron-profile class=\"jumbotron\" id=\"student-jumbotron-profile\" />\r\n    }\r\n\r\n    <section id=\"student-list-post\">\r\n      <header id=\"student-list-post-header\">\r\n        <h2 class=\"subtitle border\">Publicações</h2>\r\n      </header>\r\n      <ul>\r\n        @for (post of posts | async; track $index) {\r\n        <li>\r\n          @defer (on viewport) {\r\n          <app-post [postParams]=\"post\">\r\n            <span [innerHTML]=\"post.content | trustHtml\"></span>\r\n          </app-post>\r\n          <app-post-loading />\r\n          } @loading {\r\n          <app-post-loading />\r\n          } @placeholder {\r\n          <app-post-loading />\r\n          }\r\n        </li>\r\n        } @empty {\r\n        <li>\r\n          <h3 class=\"empty subtitle\">Sem nenuma publicação encontrada.</h3>\r\n        </li>\r\n        }\r\n      </ul>\r\n    </section>\r\n  </aside>\r\n\r\n  <div id=\"student-content\">\r\n    <app-tabs>\r\n      <app-tab>\r\n        <ng-template appTabHeader>\r\n          <h2 class=\"subtitle border\">Atividades</h2>\r\n        </ng-template>\r\n\r\n        <ng-template appTabContent>\r\n          <div id=\"student-atividade-content\">\r\n            <app-time-line />\r\n            <div>\r\n              <app-calendar />\r\n              <app-calendar-legend />\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </app-tab>\r\n\r\n      <app-tab>\r\n        <ng-template appTabHeader>\r\n          <h2 class=\"subtitle border\">Avaliações</h2>\r\n        </ng-template>\r\n\r\n        <ng-template appTabContent>\r\n          <span>Conteúdo da Tab 2</span>\r\n        </ng-template>\r\n      </app-tab>\r\n\r\n      <app-tab>\r\n        <ng-template appTabHeader>\r\n          <h2 class=\"subtitle border\">Materias</h2>\r\n        </ng-template>\r\n\r\n        <ng-template appTabContent>\r\n          <div id=\"college-list\">\r\n            <h2 class=\"subtitle border\">Cursos</h2>\r\n\r\n            <section id=\"student-list-courses\">\r\n              <ul>\r\n                @for (course of courses; track $index) {\r\n                <li>\r\n                  <app-course-item [thumb]=\"course.thumb\">\r\n                    <h3 class=\"title\">\r\n                      {{ course.name }}\r\n                    </h3>\r\n\r\n                    <app-progress-bar [progress]=\"$index\" />\r\n\r\n                    <app-button\r\n                      routerLink=\"./course/{{ course.id }}\"\r\n                      size=\"small\"\r\n                    >\r\n                      Entrar\r\n                    </app-button>\r\n                  </app-course-item>\r\n                </li>\r\n                } @empty {\r\n                <li>\r\n                  <h3 class=\"subtitle empty\">\r\n                    Você ainda não atribuiu nenhum curso para essa instituição.\r\n                  </h3>\r\n                </li>\r\n                }\r\n              </ul>\r\n            </section>\r\n          </div>\r\n        </ng-template>\r\n      </app-tab>\r\n    </app-tabs>\r\n  </div>\r\n</main>\r\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-13ba5d294e72a2af25f9ae6f697ffe55c080624eb4813175286330e50362cd707ffc4c6dea1e136a69814ff2878a7fb760c77442d4178fb40f912bfcd75ee3a3",
            "file": "src/app/shared/components/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "contentChild.required(TabContentDirective, { read: TemplateRef })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "header",
                    "defaultValue": "contentChild.required(TabHeaderDirective, { read: TemplateRef })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, contentChild, TemplateRef } from '@angular/core';\nimport { TabContentDirective, TabHeaderDirective } from '../tabs/tabs.component';\n\n@Component({\n  selector: 'app-tab',\n  templateUrl: './tab.component.html',\n  styleUrl: './tab.component.scss'\n})\nexport class TabComponent {\n  header = contentChild.required(TabHeaderDirective, { read: TemplateRef });\n  content = contentChild.required(TabContentDirective, { read: TemplateRef });\n}\n",
            "styleUrl": "./tab.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-2bf2f8435a9928d520054e470564287f4c6fd996fdb19d8ed70a959da51f62d528dab6ac91752852bb77ed6792bac566ec152f54eb6e63f7b460c1b1bc7af3ef",
            "file": "src/app/shared/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTab",
                    "defaultValue": "signal(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "selectedTabContent",
                    "defaultValue": "computed(\r\n    () => this.tabsData()[this.selectedTab()]?.content()\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "tabs",
                    "defaultValue": "contentChildren(TabComponent)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "tabsData",
                    "defaultValue": "computed(() => {\r\n    return this.tabs().map(({ content, header }) => {\r\n      return {\r\n        header,\r\n        content\r\n      };\r\n    });\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "onSelectTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  computed,\r\n  contentChildren,\r\n  Directive,\r\n  OnInit,\r\n  signal,\r\n} from '@angular/core';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTabHeader]',\r\n})\r\nexport class TabHeaderDirective { }\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTabContent]',\r\n})\r\nexport class TabContentDirective { }\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './tabs.component.html',\r\n  styleUrl: './tabs.component.scss'\r\n})\r\nexport class TabsComponent {\r\n  tabs = contentChildren(TabComponent)\r\n\r\n  tabsData = computed(() => {\r\n    return this.tabs().map(({ content, header }) => {\r\n      return {\r\n        header,\r\n        content\r\n      };\r\n    });\r\n  });\r\n\r\n  selectedTab = signal(0);\r\n\r\n  selectedTabContent = computed(\r\n    () => this.tabsData()[this.selectedTab()]?.content()\r\n  );\r\n\r\n  onSelectTab(index: number) {\r\n    this.selectedTab.set(index);\r\n  }\r\n}\r\n",
            "styleUrl": "./tabs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"tab\">\r\n  <div class=\"tab-header\" role=\"tablist\">\r\n    @for (tab of tabsData(); track $index) {\r\n      <a\r\n        role=\"tab\"\r\n        class=\"tab-item\"\r\n        [ngClass]=\"{ 'tab-active': $index === selectedTab() }\"\r\n        (click)=\"onSelectTab($index)\"\r\n      >\r\n        <ng-container *ngTemplateOutlet=\"tab.header()\"></ng-container>\r\n      </a>\r\n    }\r\n  </div>\r\n\r\n  <div class=\"tab-content\">\r\n    <ng-container *ngTemplateOutlet=\"selectedTabContent()\"></ng-container>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskChoiceComponent",
            "id": "component-TaskChoiceComponent-93d67c37ed834faea399640bc6cb4c371f891b95335dbcf1980832e35ab2d4c0ecedbec7a4e6aeafc7e085173253e62b0c8c6d2b2c6291160f35718c050a0737",
            "file": "src/app/pages/logged-area/pages/task-choice/task-choice.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-choice",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-choice.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "task",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonBackComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "InputCardComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonBackComponent } from '@shared/components/button-back/button-back.component';\r\nimport { InputCardComponent } from '@shared/components/input-card/input-card.component';\r\nimport { ButtonComponent } from '@shared/components/button/button.component';\r\n\r\n@Component({\n    selector: 'app-task-choice',\n    imports: [\n        ButtonBackComponent,\n        ButtonComponent,\n        RouterLink,\n        InputCardComponent,\n        FormsModule\n    ],\n    templateUrl: './task-choice.component.html',\n    styleUrl: './task-choice.component.scss'\n})\r\nexport class TaskChoiceComponent {\r\n  task = '';\r\n}\r\n",
            "styleUrl": "./task-choice.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<form id=\"task-choice\" class=\"container\">\r\n  <div id=\"task-choice-content\">\r\n    <app-input-card [(ngModel)]=\"task\" valor=\"lesson\" id=\"tarefa\" name=\"task\">\r\n      <img src=\"/assets/ilustrations/programer.svg\" />\r\n      <h3 label>Aula</h3>\r\n    </app-input-card>\r\n\r\n    <app-input-card [(ngModel)]=\"task\" valor=\"quiz\" id=\"quiz\" name=\"task\">\r\n      <img src=\"/assets/ilustrations/computador.svg\" />\r\n      <h3 label>Quiz</h3>\r\n    </app-input-card>\r\n  </div>\r\n\r\n  <footer id=\"task-choice-footer\">\r\n    <app-button-back id=\"task-choice-back-button\" />\r\n\r\n    <app-button\r\n      [routerLink]=\"'../' + task\"\r\n      [disabled]=\"!task\"\r\n      id=\"task-choice-submit-button\"\r\n    >\r\n      Criar um conteudo\r\n    </app-button>\r\n  </footer>\r\n</form>\r\n"
        },
        {
            "name": "TextEditorComponent",
            "id": "component-TextEditorComponent-fd376e051cfcd4eafe22b0d065a32d0debb65bb01beb1d38d839b3f7ece9346f5c3e527b99d2dfaf62c6b963bd173dad5ebc75b2e7bab7d037ad3bab679dcbd4",
            "file": "src/app/shared/components/text-editor/text-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text-editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-text-editor',\n    imports: [],\n    templateUrl: './text-editor.component.html',\n    styleUrl: './text-editor.component.scss'\n})\nexport class TextEditorComponent { }\n",
            "styleUrl": "./text-editor.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": ""
        },
        {
            "name": "TimeLineComponent",
            "id": "component-TimeLineComponent-ee95bb5889790c64d2940a0944b51ed2ab1598fa14beaf8cbd6536a9f1bbf33bbca6314e2b65da5380bb0b0bf6d66ec5be268859ab9a2c41678542bccc895cbb",
            "file": "src/app/shared/components/time-line/time-line.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-time-line",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./time-line.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "events",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ITimeLine[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DateItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { ITimeLine } from '@shared/interfaces/timeline.model';\r\nimport { DateItemComponent } from '../date-item/date-item.component';\r\n\r\n@Component({\n    selector: 'app-time-line',\n    imports: [DateItemComponent],\n    templateUrl: './time-line.component.html',\n    styleUrl: './time-line.component.scss'\n})\r\nexport class TimeLineComponent implements OnInit {\r\n  @Input() events: ITimeLine[] = []\r\n\r\n  ngOnInit(): void {\r\n    const event1: ITimeLine = {\r\n      date: new Date().toISOString(),\r\n      title: \"Data limite para entregar a atividade de matematica\",\r\n      description: \"\"\r\n    }\r\n\r\n    const event2: ITimeLine = {\r\n      date: new Date(\"2024/8/9\").toISOString(),\r\n      title: \"Data limite para entregar a atividade de conceitos computacionais\",\r\n      description: \"\"\r\n    }\r\n\r\n    const event3: ITimeLine = {\r\n      date: new Date(\"2024/7/12\").toISOString(),\r\n      title: \"Data final para marcar as provas presenciais\",\r\n      description: \"\"\r\n    }\r\n\r\n    this.events = [event1, event2, event3]\r\n\r\n  }\r\n}\r\n",
            "styleUrl": "./time-line.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul class=\"time-line\">\r\n  <li class=\"time-line-item no-bullet\">\r\n    <span class=\"time-line-date text\"> Date </span>\r\n    <span class=\"time-line-content\"> </span>\r\n  </li>\r\n\r\n  @for (event of events; track $index) {\r\n    <li class=\"time-line-item\">\r\n      <div class=\"time-line-date\">\r\n        <app-date-item [date]=\"event.date\" />\r\n      </div>\r\n\r\n      <div class=\"time-line-content\">\r\n        <span class=\"bg\">\r\n          {{ event.title }}\r\n        </span>\r\n      </div>\r\n    </li>\r\n  }\r\n</ul>\r\n"
        },
        {
            "name": "VideoPlayerComponent",
            "id": "component-VideoPlayerComponent-95b92cce94883f6a4e77c498d1f3fcda629f8066e78be5334f087978417a46102e791fa9dd2e849842584e78fbfbd0a74bb3801873c55f9a043891e654a42107",
            "file": "src/app/shared/components/video-player/video-player.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-video-player",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./video-player.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "options",
                    "defaultValue": "input<any>({\r\n    require: true, Transform: (value: any) => {\r\n      if (value.src) value.src = this.sanitizer.bypassSecurityTrustUrl(value.src)\r\n      return value\r\n    }\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sanitizer",
                    "defaultValue": "inject(DomSanitizer)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "target",
                    "defaultValue": "viewChild.required<ElementRef>('target')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "TrustUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewChecked, Component, ElementRef, inject, input, viewChild, ViewEncapsulation } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { TrustUrlPipe } from '@shared/pipes/trust-url/trust-url.pipe';\r\nimport Plyr from 'plyr';\r\n\r\n@Component({\r\n  selector: 'app-video-player',\r\n  templateUrl: './video-player.component.html',\r\n  styleUrl: './video-player.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n  imports: [TrustUrlPipe]\r\n})\r\nexport class VideoPlayerComponent implements AfterViewChecked {\r\n  readonly target = viewChild.required<ElementRef>('target');\r\n  sanitizer = inject(DomSanitizer);\r\n  elementRef = inject(ElementRef);\r\n\r\n  options = input<any>({\r\n    require: true, Transform: (value: any) => {\r\n      if (value.src) value.src = this.sanitizer.bypassSecurityTrustUrl(value.src)\r\n      return value\r\n    }\r\n  });\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.target()) new Plyr(this.target().nativeElement);\r\n  }\r\n}\r\n",
            "styleUrl": "./video-player.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewChecked"
            ],
            "templateData": "@let src = options().src; @if (src) {\r\n<div #target class=\"plyr__video-embed\" id=\"player\">\r\n  <iframe\r\n    [src]=\"src | trustUrl\"\r\n    allowfullscreen\r\n    allowtransparency\r\n    allow=\"autoplay\"\r\n  ></iframe>\r\n</div>\r\n}\r\n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-7160b81d35da5c33a07daf408d1d7682bfdbf4e331eea7f221dada513d06a1f9f292c9944aee6bf3e17aed89e307e09a5df5cd68c1e6d2472be0ca641ea7caed",
            "file": "src/app/pages/auth/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n    selector: 'app-welcome',\n    imports: [ButtonComponent, RouterLink],\n    templateUrl: './welcome.component.html',\n    styleUrl: './welcome.component.scss'\n})\nexport class WelcomeComponent {\n\n}\n",
            "styleUrl": "./welcome.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"welcome\">\n  <h1 class=\"welcome-title title\">Entre na sua conta</h1>\n\n  <p class=\"welcome-description subtitle\">\n    Transforme seu aprendizado com cursos online de alta qualidade. Junte-se a\n    nós agora!\n  </p>\n\n  <app-button\n    id=\"welcome-login-button\"\n    routerLink=\"./login\"\n    class=\"welcome-button\"\n  >\n    Login\n  </app-button>\n  <app-button\n    id=\"welcome-register-button\"\n    routerLink=\"./cadastrar\"\n    color=\"secundary\"\n    class=\"welcome-button\"\n  >\n    Cadastre-se\n  </app-button>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideAnimationsAsync(),\r\n    provideHttpClient(withFetch(), withInterceptors([tokenInterceptor, errorInterceptor])),\r\n    provideEnvironmentNgxMask(maskConfig),\r\n    provideQuillConfig(\r\n      {\r\n        customModules: [{\r\n          implementation: Counter,\r\n          path: 'modules/counter'\r\n        }],\r\n        customOptions: [{\r\n          import: 'formats/font',\r\n          whitelist: ['mirza', 'roboto', 'aref', 'serif', 'sansserif', 'monospace']\r\n        }]\r\n      }\r\n    ),\r\n    provideExperimentalZonelessChangeDetection()\r\n  ]\r\n}"
            },
            {
                "name": "collageList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/college/collage.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Array(2).fill(collageMock)"
            },
            {
                "name": "collageMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/college/collage.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "College",
                "defaultValue": "{\r\n  id: 1,\r\n  createdAt: \"2024-04-19T19:28:18.952Z\",\r\n  updatedAt: \"2024-04-19T19:28:18.952Z\",\r\n  userId: 3,\r\n  name: \"senac\",\r\n  CollegeStyle: [collegeStyleMock],\r\n  Course: []\r\n}"
            },
            {
                "name": "collegeStyleMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/college/collage.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CollegeStyle",
                "defaultValue": "{\r\n  thumb: \"https://dummyimage.com/90/000/fff.jpg\",\r\n  createdAt: \"2024-04-19T19:28:18.987Z\",\r\n  updatedAt: \"2024-04-19T19:28:18.987Z\",\r\n  secundaryColor: \"BDD4E7\",\r\n  primaryColor: \"212227\",\r\n  collegeId: 1,\r\n  id: 1,\r\n}"
            },
            {
                "name": "createPostRequestMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/course/course.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n}"
            },
            {
                "name": "CreatePostResponseMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/course/course.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n}"
            },
            {
                "name": "DIRECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/data/menus.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMenu[]",
                "defaultValue": "[\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Escolas', link: 'list-college' },\r\n  { label: 'Publicações', link: 'feed' },\r\n]"
            },
            {
                "name": "editorConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/text-editor/text-editor.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  modules: {\r\n    syntax: true,\r\n    toolbar: [\r\n      ['bold', 'italic', 'underline', 'strike'],\r\n      ['blockquote', 'code-block'],\r\n      [{ 'header': 1 }, { 'header': 2 }],\r\n      [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n      [{ 'script': 'sub' }, { 'script': 'super' }],\r\n      [{ 'indent': '-1' }, { 'indent': '+1' }],\r\n      [{ 'direction': 'rtl' }],\r\n      [{ 'size': ['small', false, 'large', 'huge'] }],\r\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n      [{ 'color': [] }, { 'background': [] }],\r\n      [{ 'font': [] }],\r\n      [{ 'align': [] }],\r\n      ['clean'],\r\n      ['link', 'image', 'video']\r\n    ]\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  url: 'http://localhost:3000',\r\n  token: '@ODIN/TOKEN',\r\n  user: '@ODIN/USER',\r\n  env: 'dev'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  url: 'http://localhost:3000',\r\n  token: '@ODIN/TOKEN',\r\n  user: '@ODIN/USER',\r\n  env: 'prod'\r\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interceptors/error/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n  const router = inject(Router);\n\n  return next(req).pipe(\n    catchError((err: any) => {\n      if ((err instanceof HttpErrorResponse) && err.status === 403) {\n        console.info('Sessão vencida, é necessario se autenticar novamente.');\n        tokenService.clearToken();\n        router.navigateByUrl('/')\n      }\n\n      return throwError(() => err);\n    })\n  );\n}"
            },
            {
                "name": "fadeAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/fade/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fade', [\n  transition('* <=> *', [\n    query(':enter', [\n      style({ opacity: 0 }),\n      stagger(30, [\n        animate('300ms ease-in', style({ opacity: 1 })),\n      ])\n    ], optional),\n  ])\n])"
            },
            {
                "name": "fieldsToDecript",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Symbol(\"decript:fields\")"
            },
            {
                "name": "fieldsToEncript",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Symbol(\"encript:fields\")"
            },
            {
                "name": "formatMetadataKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/decorators/encript/format.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Symbol(\"format\")"
            },
            {
                "name": "INSTITUTIONAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/data/menus.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMenu[]",
                "defaultValue": "[\r\n  { label: 'Perguntas Frequentes', link: 'faq' },\r\n  { label: 'Quem somos', link: 'about' },\r\n  { label: 'Ajuda', link: 'suport' }\r\n]"
            },
            {
                "name": "maskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<IConfig>",
                "defaultValue": "{\r\n  validation: false,\r\n}"
            },
            {
                "name": "menus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/data/menus.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  STUDENT,\r\n  TEACHER,\r\n  DIRECTOR,\r\n  INSTITUTIONAL\r\n}"
            },
            {
                "name": "MESSAGES_ERRO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/data/messages-erros.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  \"required\": \"Campo obrigatorio\",\r\n  \"email\": \"Email inválido\"\r\n}"
            },
            {
                "name": "mockUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/user-logged/user-logged.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IUser",
                "defaultValue": "{\r\n  id: 1,\r\n  name: 'John Doe',\r\n  email: 'john.doe@example.com',\r\n  photo: 'john.doe@example.com',\r\n  role: 'admin'\r\n}"
            },
            {
                "name": "mockUserLogged",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/user-logged/user-logged.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IUserLogged",
                "defaultValue": "{\r\n  access_token: 'abc123',\r\n  user: mockUser,\r\n  colleges: [],\r\n  calendar: [],\r\n}"
            },
            {
                "name": "optional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/fade/fade.animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ optional: true }"
            },
            {
                "name": "permissionByRoleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/guards/permission-by-role/permission-by-role.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(roles: string[]) => {\r\n  const guard: CanActivateFn = (route, state) => {\r\n    const user = inject(UserLoggedService).user().user;\r\n    const router = inject(Router);\r\n\r\n    if (!roles.includes(user.role)) {\r\n      router.navigateByUrl(Utils.getRouteByRole(user.role));\r\n    }\r\n\r\n    return roles.includes(user.role);\r\n  };\r\n\r\n  return guard;\r\n}"
            },
            {
                "name": "PROJECT_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/routes/backoffice.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Odin\""
            },
            {
                "name": "PROJECT_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/routes/institutional.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Odin\""
            },
            {
                "name": "PROJECT_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/routes/logged-out.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Odin\""
            },
            {
                "name": "PROJECT_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/routes/students.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Odin\""
            },
            {
                "name": "STUDENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/data/menus.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMenu[]",
                "defaultValue": "[\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Avaliações', link: 'assessments' },\r\n  { label: 'Materias', link: 'assessments' },\r\n  { label: 'Atividades', link: 'task' },\r\n  { label: 'Publicações', link: 'feed' },\r\n]"
            },
            {
                "name": "TEACHER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/data/menus.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMenu[]",
                "defaultValue": "[\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Avaliações', link: 'assessments' },\r\n  { label: 'Materias', link: 'assessments' },\r\n  { label: 'Atividades', link: 'task' },\r\n  { label: 'Publicações', link: 'feed' },\r\n]"
            },
            {
                "name": "tokenInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interceptors/token/token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n\n  if (tokenService.token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${tokenService.token}`,\n        Accept: 'application/json',\n      },\n    });\n  }\n\n  return next(req);\n}"
            },
            {
                "name": "unauthorizedGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/guards/unauthorized/unauthorized.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const tokenService = inject(TokenService);\n  const router = inject(Router);\n\n  if (!tokenService.token) {\n    router.navigateByUrl('/authenticate/login')\n  }\n\n  return !!tokenService.token;\n}"
            },
            {
                "name": "userLoggedGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/guards/userLogged/user-logged.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateChildFn",
                "defaultValue": "(childRoute, state) => {\r\n  const tokenService = inject(TokenService);\r\n  if (!tokenService) return true;\r\n\r\n  const user = inject(UserLoggedService).user().user;\r\n  const router = inject(Router);\r\n\r\n  if (!user) return true;\r\n\r\n  router.navigateByUrl(Utils.getRouteByRole(user.role));\r\n\r\n  return false;\r\n}"
            }
        ],
        "functions": [
            {
                "name": "debounce",
                "file": "src/app/shared/decorators/debounce/debounce.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Decorator<T>",
                "jsdoctags": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "debouncify",
                "file": "src/app/shared/decorators/debounce/debouncify.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "originalMethod",
                        "type": "Method",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Method<void, A>",
                "jsdoctags": [
                    {
                        "name": "originalMethod",
                        "type": "Method",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "decript",
                "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "target",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "propertyKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "target",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propertyKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "enableEncryption",
                "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "encript",
                "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "target",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "propertyKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "target",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propertyKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "format",
                "file": "src/app/shared/decorators/encript/format.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "formatString",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "formatString",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFormat",
                "file": "src/app/shared/decorators/encript/format.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "target",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "propertyKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "target",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propertyKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AsyncMethod",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Decorator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Method",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "UnboxPromise",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            }
        ],
        "enumerations": [
            {
                "name": "AlertTypes",
                "childs": [
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/alert/alert.component.ts"
            },
            {
                "name": "AvatarSizeParam",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sm"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "md"
                    },
                    {
                        "name": "large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/avatar/avatar.component.ts"
            },
            {
                "name": "ButtonColors",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secundary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secundary"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/button/button.component.ts"
            },
            {
                "name": "ButtonSize",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/button/button.component.ts"
            },
            {
                "name": "CalendarDayEvents",
                "childs": [
                    {
                        "name": "LIVECLASS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "liveclass"
                    },
                    {
                        "name": "MEETING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "meeting"
                    },
                    {
                        "name": "OTHERS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "others"
                    },
                    {
                        "name": "PROOF",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "proof"
                    },
                    {
                        "name": "TODAY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "today"
                    },
                    {
                        "name": "NOTHING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "nothing"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/calendar-day/calendar-day.model.ts"
            },
            {
                "name": "InputTextTypes",
                "childs": [
                    {
                        "name": "password",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "password"
                    },
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/input-text/input-text.component.ts"
            },
            {
                "name": "Roles",
                "childs": [
                    {
                        "name": "DIRECTOR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DIRECTOR"
                    },
                    {
                        "name": "TEACHER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TEACHER"
                    },
                    {
                        "name": "STUDENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "STUDENT"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/roles.enum.ts"
            },
            {
                "name": "UrlBase",
                "childs": [
                    {
                        "name": "AUTHENTICATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "authenticate"
                    },
                    {
                        "name": "INSTITUTIONAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "institutional"
                    },
                    {
                        "name": "BACKOFFICE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "backoffice"
                    },
                    {
                        "name": "STUDENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "student"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/data/base-url.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideAnimationsAsync(),\r\n    provideHttpClient(withFetch(), withInterceptors([tokenInterceptor, errorInterceptor])),\r\n    provideEnvironmentNgxMask(maskConfig),\r\n    provideQuillConfig(\r\n      {\r\n        customModules: [{\r\n          implementation: Counter,\r\n          path: 'modules/counter'\r\n        }],\r\n        customOptions: [{\r\n          import: 'formats/font',\r\n          whitelist: ['mirza', 'roboto', 'aref', 'serif', 'sansserif', 'monospace']\r\n        }]\r\n      }\r\n    ),\r\n    provideExperimentalZonelessChangeDetection()\r\n  ]\r\n}"
                },
                {
                    "name": "maskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<IConfig>",
                    "defaultValue": "{\r\n  validation: false,\r\n}"
                }
            ],
            "src/app/shared/services/college/collage.mock.ts": [
                {
                    "name": "collageList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/college/collage.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Array(2).fill(collageMock)"
                },
                {
                    "name": "collageMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/college/collage.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "College",
                    "defaultValue": "{\r\n  id: 1,\r\n  createdAt: \"2024-04-19T19:28:18.952Z\",\r\n  updatedAt: \"2024-04-19T19:28:18.952Z\",\r\n  userId: 3,\r\n  name: \"senac\",\r\n  CollegeStyle: [collegeStyleMock],\r\n  Course: []\r\n}"
                },
                {
                    "name": "collegeStyleMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/college/collage.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollegeStyle",
                    "defaultValue": "{\r\n  thumb: \"https://dummyimage.com/90/000/fff.jpg\",\r\n  createdAt: \"2024-04-19T19:28:18.987Z\",\r\n  updatedAt: \"2024-04-19T19:28:18.987Z\",\r\n  secundaryColor: \"BDD4E7\",\r\n  primaryColor: \"212227\",\r\n  collegeId: 1,\r\n  id: 1,\r\n}"
                }
            ],
            "src/app/shared/services/course/course.mock.ts": [
                {
                    "name": "createPostRequestMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/course/course.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n}"
                },
                {
                    "name": "CreatePostResponseMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/course/course.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n}"
                }
            ],
            "src/app/shared/data/menus.ts": [
                {
                    "name": "DIRECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/data/menus.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "defaultValue": "[\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Escolas', link: 'list-college' },\r\n  { label: 'Publicações', link: 'feed' },\r\n]"
                },
                {
                    "name": "INSTITUTIONAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/data/menus.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "defaultValue": "[\r\n  { label: 'Perguntas Frequentes', link: 'faq' },\r\n  { label: 'Quem somos', link: 'about' },\r\n  { label: 'Ajuda', link: 'suport' }\r\n]"
                },
                {
                    "name": "menus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/data/menus.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  STUDENT,\r\n  TEACHER,\r\n  DIRECTOR,\r\n  INSTITUTIONAL\r\n}"
                },
                {
                    "name": "STUDENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/data/menus.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "defaultValue": "[\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Avaliações', link: 'assessments' },\r\n  { label: 'Materias', link: 'assessments' },\r\n  { label: 'Atividades', link: 'task' },\r\n  { label: 'Publicações', link: 'feed' },\r\n]"
                },
                {
                    "name": "TEACHER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/data/menus.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "defaultValue": "[\r\n  { label: 'Pefil', link: 'profile' },\r\n  { label: 'Avaliações', link: 'assessments' },\r\n  { label: 'Materias', link: 'assessments' },\r\n  { label: 'Atividades', link: 'task' },\r\n  { label: 'Publicações', link: 'feed' },\r\n]"
                }
            ],
            "src/app/shared/components/text-editor/text-editor.config.ts": [
                {
                    "name": "editorConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/text-editor/text-editor.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  modules: {\r\n    syntax: true,\r\n    toolbar: [\r\n      ['bold', 'italic', 'underline', 'strike'],\r\n      ['blockquote', 'code-block'],\r\n      [{ 'header': 1 }, { 'header': 2 }],\r\n      [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n      [{ 'script': 'sub' }, { 'script': 'super' }],\r\n      [{ 'indent': '-1' }, { 'indent': '+1' }],\r\n      [{ 'direction': 'rtl' }],\r\n      [{ 'size': ['small', false, 'large', 'huge'] }],\r\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n      [{ 'color': [] }, { 'background': [] }],\r\n      [{ 'font': [] }],\r\n      [{ 'align': [] }],\r\n      ['clean'],\r\n      ['link', 'image', 'video']\r\n    ]\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  url: 'http://localhost:3000',\r\n  token: '@ODIN/TOKEN',\r\n  user: '@ODIN/USER',\r\n  env: 'dev'\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  url: 'http://localhost:3000',\r\n  token: '@ODIN/TOKEN',\r\n  user: '@ODIN/USER',\r\n  env: 'prod'\r\n}"
                }
            ],
            "src/app/shared/interceptors/error/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interceptors/error/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n  const router = inject(Router);\n\n  return next(req).pipe(\n    catchError((err: any) => {\n      if ((err instanceof HttpErrorResponse) && err.status === 403) {\n        console.info('Sessão vencida, é necessario se autenticar novamente.');\n        tokenService.clearToken();\n        router.navigateByUrl('/')\n      }\n\n      return throwError(() => err);\n    })\n  );\n}"
                }
            ],
            "src/app/shared/animations/fade/fade.animation.ts": [
                {
                    "name": "fadeAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/fade/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fade', [\n  transition('* <=> *', [\n    query(':enter', [\n      style({ opacity: 0 }),\n      stagger(30, [\n        animate('300ms ease-in', style({ opacity: 1 })),\n      ])\n    ], optional),\n  ])\n])"
                },
                {
                    "name": "optional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/fade/fade.animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ optional: true }"
                }
            ],
            "src/app/shared/decorators/encript/encript.decorator.ts": [
                {
                    "name": "fieldsToDecript",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Symbol(\"decript:fields\")"
                },
                {
                    "name": "fieldsToEncript",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Symbol(\"encript:fields\")"
                }
            ],
            "src/app/shared/decorators/encript/format.decorator.ts": [
                {
                    "name": "formatMetadataKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/decorators/encript/format.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Symbol(\"format\")"
                }
            ],
            "src/app/shared/data/messages-erros.ts": [
                {
                    "name": "MESSAGES_ERRO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/data/messages-erros.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  \"required\": \"Campo obrigatorio\",\r\n  \"email\": \"Email inválido\"\r\n}"
                }
            ],
            "src/app/shared/services/user-logged/user-logged.mock.ts": [
                {
                    "name": "mockUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/user-logged/user-logged.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "defaultValue": "{\r\n  id: 1,\r\n  name: 'John Doe',\r\n  email: 'john.doe@example.com',\r\n  photo: 'john.doe@example.com',\r\n  role: 'admin'\r\n}"
                },
                {
                    "name": "mockUserLogged",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/user-logged/user-logged.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserLogged",
                    "defaultValue": "{\r\n  access_token: 'abc123',\r\n  user: mockUser,\r\n  colleges: [],\r\n  calendar: [],\r\n}"
                }
            ],
            "src/app/shared/guards/permission-by-role/permission-by-role.guard.ts": [
                {
                    "name": "permissionByRoleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/guards/permission-by-role/permission-by-role.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(roles: string[]) => {\r\n  const guard: CanActivateFn = (route, state) => {\r\n    const user = inject(UserLoggedService).user().user;\r\n    const router = inject(Router);\r\n\r\n    if (!roles.includes(user.role)) {\r\n      router.navigateByUrl(Utils.getRouteByRole(user.role));\r\n    }\r\n\r\n    return roles.includes(user.role);\r\n  };\r\n\r\n  return guard;\r\n}"
                }
            ],
            "src/app/routes/backoffice.routes.ts": [
                {
                    "name": "PROJECT_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/routes/backoffice.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Odin\""
                }
            ],
            "src/app/routes/institutional.routes.ts": [
                {
                    "name": "PROJECT_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/routes/institutional.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Odin\""
                }
            ],
            "src/app/routes/logged-out.routes.ts": [
                {
                    "name": "PROJECT_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/routes/logged-out.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Odin\""
                }
            ],
            "src/app/routes/students.routes.ts": [
                {
                    "name": "PROJECT_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/routes/students.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Odin\""
                }
            ],
            "src/app/shared/interceptors/token/token.interceptor.ts": [
                {
                    "name": "tokenInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interceptors/token/token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n\n  if (tokenService.token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${tokenService.token}`,\n        Accept: 'application/json',\n      },\n    });\n  }\n\n  return next(req);\n}"
                }
            ],
            "src/app/shared/guards/unauthorized/unauthorized.guard.ts": [
                {
                    "name": "unauthorizedGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/guards/unauthorized/unauthorized.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const tokenService = inject(TokenService);\n  const router = inject(Router);\n\n  if (!tokenService.token) {\n    router.navigateByUrl('/authenticate/login')\n  }\n\n  return !!tokenService.token;\n}"
                }
            ],
            "src/app/shared/guards/userLogged/user-logged.guard.ts": [
                {
                    "name": "userLoggedGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/guards/userLogged/user-logged.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateChildFn",
                    "defaultValue": "(childRoute, state) => {\r\n  const tokenService = inject(TokenService);\r\n  if (!tokenService) return true;\r\n\r\n  const user = inject(UserLoggedService).user().user;\r\n  const router = inject(Router);\r\n\r\n  if (!user) return true;\r\n\r\n  router.navigateByUrl(Utils.getRouteByRole(user.role));\r\n\r\n  return false;\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/decorators/debounce/debounce.ts": [
                {
                    "name": "debounce",
                    "file": "src/app/shared/decorators/debounce/debounce.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Decorator<T>",
                    "jsdoctags": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/decorators/debounce/debouncify.ts": [
                {
                    "name": "debouncify",
                    "file": "src/app/shared/decorators/debounce/debouncify.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "originalMethod",
                            "type": "Method",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Method<void, A>",
                    "jsdoctags": [
                        {
                            "name": "originalMethod",
                            "type": "Method",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/decorators/encript/encript.decorator.ts": [
                {
                    "name": "decript",
                    "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enableEncryption",
                    "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "encript",
                    "file": "src/app/shared/decorators/encript/encript.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/decorators/encript/format.decorator.ts": [
                {
                    "name": "format",
                    "file": "src/app/shared/decorators/encript/format.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "formatString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "formatString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormat",
                    "file": "src/app/shared/decorators/encript/format.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/components/alert/alert.component.ts": [
                {
                    "name": "AlertTypes",
                    "childs": [
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/alert/alert.component.ts"
                }
            ],
            "src/app/shared/components/avatar/avatar.component.ts": [
                {
                    "name": "AvatarSizeParam",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sm"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "md"
                        },
                        {
                            "name": "large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/avatar/avatar.component.ts"
                }
            ],
            "src/app/shared/components/button/button.component.ts": [
                {
                    "name": "ButtonColors",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secundary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secundary"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/button/button.component.ts"
                },
                {
                    "name": "ButtonSize",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/button/button.component.ts"
                }
            ],
            "src/app/shared/components/calendar-day/calendar-day.model.ts": [
                {
                    "name": "CalendarDayEvents",
                    "childs": [
                        {
                            "name": "LIVECLASS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "liveclass"
                        },
                        {
                            "name": "MEETING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "meeting"
                        },
                        {
                            "name": "OTHERS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "others"
                        },
                        {
                            "name": "PROOF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "proof"
                        },
                        {
                            "name": "TODAY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "today"
                        },
                        {
                            "name": "NOTHING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "nothing"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/calendar-day/calendar-day.model.ts"
                }
            ],
            "src/app/shared/components/input-text/input-text.component.ts": [
                {
                    "name": "InputTextTypes",
                    "childs": [
                        {
                            "name": "password",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "password"
                        },
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/input-text/input-text.component.ts"
                }
            ],
            "src/app/shared/enums/roles.enum.ts": [
                {
                    "name": "Roles",
                    "childs": [
                        {
                            "name": "DIRECTOR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DIRECTOR"
                        },
                        {
                            "name": "TEACHER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TEACHER"
                        },
                        {
                            "name": "STUDENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "STUDENT"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/roles.enum.ts"
                }
            ],
            "src/app/shared/data/base-url.ts": [
                {
                    "name": "UrlBase",
                    "childs": [
                        {
                            "name": "AUTHENTICATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "authenticate"
                        },
                        {
                            "name": "INSTITUTIONAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "institutional"
                        },
                        {
                            "name": "BACKOFFICE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "backoffice"
                        },
                        {
                            "name": "STUDENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "student"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/data/base-url.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/decorators/debounce/debounce.model.ts": [
                {
                    "name": "AsyncMethod",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Decorator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Method",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "UnboxPromise",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/decorators/debounce/debounce.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/forgot-password/forgot-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/new-password/new-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/register/register.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RegisterPayload",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/components/jumbotron-profile/jumbotron-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JumbotronProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/components/jumbotron-wellcome/jumbotron-wellcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JumbotronWellcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/logged-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoggedAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/college/college-form/college-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollegeFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/college/college-list/college-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollegeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/college/college-thumb/college-thumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollegeThumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/college/college.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollegeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/college/model/college.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CollegeForm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/course/course-form/course-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/course/course-list/course-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/course/course.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/create-college/create-college.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateCollegeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/create-course/create-course.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateCourseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/create-course/create-course.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateCourse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/create-post/create-post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/create-quiz/create-quiz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateQuizComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/create-task/create-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/lesson/lesson-form-loading/lesson-form-loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonFormLoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/lesson/lesson.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/lesson/lesson.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LessonForm",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/lesson/single/single.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SingleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/list-college/list-college.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCollegeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/list-post/list-post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListPostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetProfileRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetProfileResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateProfileRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/profile/services/profile/profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateProfileResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/profile/services/profile/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/student/student.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/logged-area/pages/task-choice/task-choice.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskChoiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/routes/backoffice.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROJECT_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/routes/institutional.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROJECT_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/routes/logged-out.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROJECT_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/routes/students.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROJECT_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/fade/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/fade/fade.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/aside-menu/aside-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar-profile/avatar-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAvatarParans",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-back/button-back.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonBackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-menu/button-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar-day/calendar-day.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarDayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar-legend/calendar-legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/college-item/college-item/college-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollegeItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/course-item/course-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/date-item/date-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-card/input-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-color/input-color.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputColorComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-msg-error/input-msg-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputMsgErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-radio/input-radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputRadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-upload/input-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-upload/input-upload.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputPhotoValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/item-bar/item-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/jumbotron-notification/jumbotron-notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JumbotronNotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/jumbotron/jumbotron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JumbotronComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loaders/avatar-loader/avatar-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loaders/avatar-profile-loading/avatar-profile-loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarProfileLoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loaders/college-item-loader/college-item-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollegeItemLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loaders/page-thumb-loader/page-thumb-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageThumbLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loaders/post-loading/post-loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostLoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/logged-page/logged-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoggedPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-thumb/page-thumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageThumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-thumb/page-thumb.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPageThumbParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/tabs.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/tabs.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabHeaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-editor/counter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Counter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-editor/counter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Config",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-editor/counter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuillInstance",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-editor/text-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-editor/text-editor.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editorConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/time-line/time-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimeLineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/video-player/video-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/menus.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenu",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/menus.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/menus.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INSTITUTIONAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/menus.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/menus.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STUDENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/menus.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEACHER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data/messages-erros.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MESSAGES_ERRO",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AsyncMethod",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Decorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Method",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "UnboxPromise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debounce.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debounce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/debounce/debouncify.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debouncify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/encript.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "decript",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/encript.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "enableEncryption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/encript.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "encript",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/encript.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fieldsToDecript",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/encript.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fieldsToEncript",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/format.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "format",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/format.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFormat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/decorators/encript/format.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatMetadataKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/back-button/back-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BackButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/mask/mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/permission-by-role/permission-by-role.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "permissionByRoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/unauthorized/unauthorized.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unauthorizedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/userLogged/user-logged.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userLoggedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/error/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/token/token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/error.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorDefault",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/timeline.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITimeLine",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/get-url-base/get-url-base.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetUrlBasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/iuserToAvatar/iuser-to-avatar.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IuserToAvatarPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/ngModel/ng-model-error.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NgModelErrorPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/trust-html/trust-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TrustHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/trust-url/trust-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TrustUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "collageList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "collageMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "collegeStyleMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "College",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "College",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollegeRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollegeResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollegeStyle",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/collage.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseCollegelist",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/college/college.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CollegeService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createPostRequestMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CreatePostResponseMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CourseForm",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICourse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRequestCourseCreate",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResponseCourseCreate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResponseCourseGetById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/course/course.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CourseService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/encript/encript.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EncriptService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/encript/payload.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PayloadRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/encript/payload.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/lesson/lesson.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetLessonResponse",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/lesson/lesson.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LessonCreateRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/lesson/lesson.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LessonService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/post/post.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreatePostRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/post/post.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreatePostResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/post/post.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/quiz/quiz.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateQuizOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/quiz/quiz.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuizCreateRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/quiz/quiz.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuizCreateResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/quiz/quiz.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuizOption",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/quiz/quiz.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuizService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/token/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user-logged/user-logged.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user-logged/user-logged.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockUserLogged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user-logged/user-logged.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user-logged/user-logged.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserLogged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user-logged/user-logged.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserLoggedService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/utils/utils.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Utils",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}